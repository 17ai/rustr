/* automatically generated by rust-bindgen */

pub type size_t = ::std::os::raw::c_ulong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum___codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct__IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
        -> __ssize_t;
pub type __io_write_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *const ::std::os::raw::c_char, __n: size_t)
        -> __ssize_t;
pub type __io_seek_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
pub type __io_close_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type ptrdiff_t = ::std::os::raw::c_long;
pub type wchar_t = ::std::os::raw::c_int;
pub type float_t = ::std::os::raw::c_float;
pub type double_t = ::std::os::raw::c_double;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
#[derive(Clone, Copy)]
#[repr(i32)]
#[derive(Debug)]
pub enum Enum_Unnamed7 {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
pub type _LIB_VERSION_TYPE = Enum_Unnamed7;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_exception {
    pub _type: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: ::std::os::raw::c_double,
    pub arg2: ::std::os::raw::c_double,
    pub retval: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_exception {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_exception {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy, PartialEq)]
#[repr(u32)]
#[derive(Debug)]
pub enum Rboolean { FALSE = 0, TRUE = 1, }
//pub type Rboolean = Enum_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub r: ::std::os::raw::c_double,
    pub i: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Rcomplex = Struct_Unnamed9;
pub type Rbyte = ::std::os::raw::c_uchar;
pub type R_len_t = ::std::os::raw::c_int;
pub type R_xlen_t = ptrdiff_t;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed10 {
    pub lv_length: R_xlen_t,
    pub lv_truelength: R_xlen_t,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type R_long_vec_hdr_t = Struct_Unnamed10;
pub type SEXPTYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_sxpinfo_struct {
    pub _bindgen_bitfield_1_: SEXPTYPE,
    pub _bindgen_bitfield_2_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_sxpinfo_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sxpinfo_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_vecsxp_struct {
    pub length: R_len_t,
    pub truelength: R_len_t,
}
impl ::std::clone::Clone for Struct_vecsxp_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vecsxp_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_primsxp_struct {
    pub offset: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_primsxp_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_primsxp_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_symsxp_struct {
    pub pname: *mut Struct_SEXPREC,
    pub value: *mut Struct_SEXPREC,
    pub internal: *mut Struct_SEXPREC,
}
impl ::std::clone::Clone for Struct_symsxp_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_symsxp_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_listsxp_struct {
    pub carval: *mut Struct_SEXPREC,
    pub cdrval: *mut Struct_SEXPREC,
    pub tagval: *mut Struct_SEXPREC,
}
impl ::std::clone::Clone for Struct_listsxp_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_listsxp_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_envsxp_struct {
    pub frame: *mut Struct_SEXPREC,
    pub enclos: *mut Struct_SEXPREC,
    pub hashtab: *mut Struct_SEXPREC,
}
impl ::std::clone::Clone for Struct_envsxp_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_envsxp_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_closxp_struct {
    pub formals: *mut Struct_SEXPREC,
    pub body: *mut Struct_SEXPREC,
    pub env: *mut Struct_SEXPREC,
}
impl ::std::clone::Clone for Struct_closxp_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_closxp_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_promsxp_struct {
    pub value: *mut Struct_SEXPREC,
    pub expr: *mut Struct_SEXPREC,
    pub env: *mut Struct_SEXPREC,
}
impl ::std::clone::Clone for Struct_promsxp_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_promsxp_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_SEXPREC {
    pub sxpinfo: Struct_sxpinfo_struct,
    pub attrib: *mut Struct_SEXPREC,
    pub gengc_next_node: *mut Struct_SEXPREC,
    pub gengc_prev_node: *mut Struct_SEXPREC,
    pub u: Union_Unnamed11,
}
impl ::std::clone::Clone for Struct_SEXPREC {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_SEXPREC {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_Unnamed11 {
    pub unsafe fn primsxp(&mut self) -> *mut Struct_primsxp_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn symsxp(&mut self) -> *mut Struct_symsxp_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn listsxp(&mut self) -> *mut Struct_listsxp_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn envsxp(&mut self) -> *mut Struct_envsxp_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn closxp(&mut self) -> *mut Struct_closxp_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn promsxp(&mut self) -> *mut Struct_promsxp_struct {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SEXPREC = Struct_SEXPREC;
pub type SEXP = *mut Struct_SEXPREC;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_VECTOR_SEXPREC {
    pub sxpinfo: Struct_sxpinfo_struct,
    pub attrib: *mut Struct_SEXPREC,
    pub gengc_next_node: *mut Struct_SEXPREC,
    pub gengc_prev_node: *mut Struct_SEXPREC,
    pub vecsxp: Struct_vecsxp_struct,
}
impl ::std::clone::Clone for Struct_VECTOR_SEXPREC {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VECTOR_SEXPREC {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VECTOR_SEXPREC = Struct_VECTOR_SEXPREC;
pub type VECSEXP = *mut Struct_VECTOR_SEXPREC;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed12 {
    pub unsafe fn s(&mut self) -> *mut VECTOR_SEXPREC {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn align(&mut self) -> *mut ::std::os::raw::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SEXPREC_ALIGN = Union_Unnamed12;
pub type PROTECT_INDEX = ::std::os::raw::c_int;
pub type R_allocator_t = Struct_R_allocator;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed13 { Bytes = 0, Chars = 1, Width = 2, }
pub type nchar_type = Enum_Unnamed13;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed14 {
    CE_NATIVE = 0,
    CE_UTF8 = 1,
    CE_LATIN1 = 2,
    CE_BYTES = 3,
    CE_SYMBOL = 5,
    CE_ANY = 99,
}
pub type cetype_t = Enum_Unnamed14;
pub type R_CFinalizer_t = ::std::option::Option<extern "C" fn(arg1: SEXP)>;
pub type R_pstream_data_t = *mut ::std::os::raw::c_void;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed15 {
    R_pstream_any_format = 0,
    R_pstream_ascii_format = 1,
    R_pstream_binary_format = 2,
    R_pstream_xdr_format = 3,
    R_pstream_asciihex_format = 4,
}
pub type R_pstream_format_t = Enum_Unnamed15;
pub type R_outpstream_t = *mut Struct_R_outpstream_st;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_R_outpstream_st {
    pub data: R_pstream_data_t,
    pub _type: R_pstream_format_t,
    pub version: ::std::os::raw::c_int,
    pub OutChar: ::std::option::Option<extern "C" fn(arg1: R_outpstream_t,
                                                     arg2:
                                                         ::std::os::raw::c_int)>,
    pub OutBytes: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 R_outpstream_t,
                                                             arg2:
                                                                 *mut ::std::os::raw::c_void,
                                                             arg3:
                                                                 ::std::os::raw::c_int)>,
    pub OutPersistHookFunc: ::std::option::Option<extern "C" fn(arg1: SEXP,
                                                                arg2: SEXP)
                                                      -> SEXP>,
    pub OutPersistHookData: SEXP,
}
impl ::std::clone::Clone for Struct_R_outpstream_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_R_outpstream_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type R_inpstream_t = *mut Struct_R_inpstream_st;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_R_inpstream_st {
    pub data: R_pstream_data_t,
    pub _type: R_pstream_format_t,
    pub InChar: ::std::option::Option<extern "C" fn(arg1: R_inpstream_t)
                                          -> ::std::os::raw::c_int>,
    pub InBytes: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                R_inpstream_t,
                                                            arg2:
                                                                *mut ::std::os::raw::c_void,
                                                            arg3:
                                                                ::std::os::raw::c_int)>,
    pub InPersistHookFunc: ::std::option::Option<extern "C" fn(arg1: SEXP,
                                                               arg2: SEXP)
                                                     -> SEXP>,
    pub InPersistHookData: SEXP,
}
impl ::std::clone::Clone for Struct_R_inpstream_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_R_inpstream_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed16 { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub type idtype_t = Enum_Unnamed16;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed18 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed17 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed18 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed19 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed19;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed20 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed20;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed21 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed21;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed22 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed22;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type _uint = ::std::os::raw::c_uint;
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_long;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed23 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed23;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed24 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed24;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed25 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed25 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed25;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed26 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed26 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed26 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed26;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed27 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed27 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed28 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed28 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed28 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed27;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed29 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed29 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed29;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed30 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed30 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed31 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed30 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed31 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed31 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed30;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed32 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed32 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed32;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed33 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed33 {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed33;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Union_Unnamed34 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed34 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed34 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed34;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::clone::Clone for Struct_random_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::clone::Clone for Struct_drand48_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed35 {
    WICHMANN_HILL = 0,
    MARSAGLIA_MULTICARRY = 1,
    SUPER_DUPER = 2,
    MERSENNE_TWISTER = 3,
    KNUTH_TAOCP = 4,
    USER_UNIF = 5,
    KNUTH_TAOCP2 = 6,
    LECUYER_CMRG = 7,
}
pub type RNGtype = Enum_Unnamed35;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed36 {
    BUGGY_KINDERMAN_RAMAGE = 0,
    AHRENS_DIETER = 1,
    BOX_MULLER = 2,
    USER_NORM = 3,
    INVERSION = 4,
    KINDERMAN_RAMAGE = 5,
}
pub type N01type = Enum_Unnamed36;
pub type Int32 = ::std::os::raw::c_uint;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type Sfloat = ::std::os::raw::c_double;
pub type Sint = ::std::os::raw::c_int;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum ParseStatus {
    PARSE_NULL = 0,
    PARSE_OK = 1,
    PARSE_INCOMPLETE = 2,
    PARSE_ERROR = 3,
    PARSE_EOF = 4,
}
//pub type ParseStatus = Enum_Unnamed37;
pub type DL_FUNC =
    ::std::option::Option<extern "C" fn() -> *mut ::std::os::raw::c_void>;
pub type R_NativePrimitiveArgType = ::std::os::raw::c_uint;
pub type R_NativeObjectArgType = ::std::os::raw::c_uint;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed38 {
    R_ARG_IN = 0,
    R_ARG_OUT = 1,
    R_ARG_IN_OUT = 2,
    R_IRRELEVANT = 3,
}
pub type R_NativeArgStyle = Enum_Unnamed38;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed39 {
    pub name: *const ::std::os::raw::c_char,
    pub fun: DL_FUNC,
    pub numArgs: ::std::os::raw::c_int,
    pub types: *mut R_NativePrimitiveArgType,
    pub styles: *mut R_NativeArgStyle,
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type R_CMethodDef = Struct_Unnamed39;
pub type R_FortranMethodDef = R_CMethodDef;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed40 {
    pub name: *const ::std::os::raw::c_char,
    pub fun: DL_FUNC,
    pub numArgs: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed40 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type R_CallMethodDef = Struct_Unnamed40;
pub type R_ExternalMethodDef = R_CallMethodDef;
pub enum Struct__DllInfo { }
pub type DllInfo = Struct__DllInfo;
pub enum Struct_Rf_RegisteredNativeSymbol { }
pub type R_RegisteredNativeSymbol = Struct_Rf_RegisteredNativeSymbol;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed41 {
    R_ANY_SYM = 0,
    R_C_SYM = 1,
    R_CALL_SYM = 2,
    R_FORTRAN_SYM = 3,
    R_EXTERNAL_SYM = 4,
}
pub type NativeSymbolType = Enum_Unnamed41;
pub type GAbyte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed42 {
    pub kind: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed42 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed42 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gui_obj = Struct_Unnamed42;
pub type objptr = *mut gui_obj;
pub type rgb = ::std::os::raw::c_ulong;
pub type font = objptr;
pub type cursor = objptr;
pub type drawing = objptr;
pub type bitmap = drawing;
pub type window = drawing;
pub type control = drawing;
pub type label = control;
pub type button = control;
pub type checkbox = control;
pub type radiobutton = control;
pub type radiogroup = control;
pub type field = control;
pub type textbox = control;
pub type scrollbar = control;
pub type listbox = control;
pub type progressbar = control;
pub type menubar = control;
pub type menu = control;
pub type menuitem = control;
pub type point = Struct_point;
pub type rect = Struct_rect;
pub type drawstruct = Struct_drawstruct;
pub type drawstate = *mut Struct_drawstruct;
pub type imagedata = Struct_imagedata;
pub type image = *mut Struct_imagedata;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_point {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_point {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_point {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_rect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_rect {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_drawstruct {
    pub dest: drawing,
    pub hue: rgb,
    pub mode: ::std::os::raw::c_int,
    pub p: point,
    pub linewidth: ::std::os::raw::c_int,
    pub fnt: font,
    pub crsr: cursor,
}
impl ::std::clone::Clone for Struct_drawstruct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_drawstruct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_imagedata {
    pub depth: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub cmapsize: ::std::os::raw::c_int,
    pub cmap: *mut rgb,
    pub pixels: *mut GAbyte,
}
impl ::std::clone::Clone for Struct_imagedata {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_imagedata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type voidfn = ::std::option::Option<extern "C" fn()>;
pub type timerfn =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void)>;
pub type actionfn = ::std::option::Option<extern "C" fn(c: control)>;
pub type drawfn = ::std::option::Option<extern "C" fn(c: control, r: rect)>;
pub type mousefn =
    ::std::option::Option<extern "C" fn(c: control,
                                        buttons: ::std::os::raw::c_int,
                                        xy: point)>;
pub type intfn =
    ::std::option::Option<extern "C" fn(c: control,
                                        argument: ::std::os::raw::c_int)>;
pub type keyfn =
    ::std::option::Option<extern "C" fn(c: control,
                                        key: ::std::os::raw::c_int)>;
pub type menufn = ::std::option::Option<extern "C" fn(m: menuitem)>;
pub type scrollfn =
    ::std::option::Option<extern "C" fn(s: scrollbar,
                                        position: ::std::os::raw::c_int)>;
pub type dropfn =
    ::std::option::Option<unsafe extern "C" fn(c: control,
                                               data:
                                                   *mut ::std::os::raw::c_char)>;
pub type imfn =
    ::std::option::Option<unsafe extern "C" fn(c: control, f: *mut font,
                                               xy: *mut point)>;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed43 {
    pub nm: *mut ::std::os::raw::c_char,
    pub _fn: menufn,
    pub key: ::std::os::raw::c_int,
    pub m: menuitem,
}
impl ::std::clone::Clone for Struct_Unnamed43 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed43 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MenuItem = Struct_Unnamed43;
pub type popup = menu;
pub type printer = objptr;
pub type metafile = objptr;
pub type libiconv_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_lconv {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_lconv {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type integr_fn =
    unsafe extern "C" fn(x: *mut ::std::os::raw::c_double,
                         n: ::std::os::raw::c_int,
                         ex: *mut ::std::os::raw::c_void);
pub type optimfn =
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int,
                         arg2: *mut ::std::os::raw::c_double,
                         arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_double;
pub type optimgr =
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int,
                         arg2: *mut ::std::os::raw::c_double,
                         arg3: *mut ::std::os::raw::c_double,
                         arg4: *mut ::std::os::raw::c_void);
pub type fcn_p =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int,
                                               arg2:
                                                   *mut ::std::os::raw::c_double,
                                               arg3:
                                                   *mut ::std::os::raw::c_double,
                                               arg4:
                                                   *mut ::std::os::raw::c_void)>;
pub type d2fcn_p =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int,
                                               arg2: ::std::os::raw::c_int,
                                               arg3:
                                                   *mut ::std::os::raw::c_double,
                                               arg4:
                                                   *mut ::std::os::raw::c_double,
                                               arg5:
                                                   *mut ::std::os::raw::c_void)>;
pub type R_ToplevelCallback =
    ::std::option::Option<unsafe extern "C" fn(expr: SEXP, value: SEXP,
                                               succeeded: Rboolean,
                                               visible: Rboolean,
                                               arg1:
                                                   *mut ::std::os::raw::c_void)
                              -> Rboolean>;
pub type R_ToplevelCallbackEl = Struct__ToplevelCallback;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct__ToplevelCallback {
    pub cb: R_ToplevelCallback,
    pub data: *mut ::std::os::raw::c_void,
    pub finalizer: ::std::option::Option<unsafe extern "C" fn(data:
                                                                  *mut ::std::os::raw::c_void)>,
    pub name: *mut ::std::os::raw::c_char,
    pub next: *mut R_ToplevelCallbackEl,
}
impl ::std::clone::Clone for Struct__ToplevelCallback {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ToplevelCallback {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type R_ObjectTable = Struct__R_ObjectTable;
pub type Rdb_exists =
    ::std::option::Option<unsafe extern "C" fn(name:
                                                   *const ::std::os::raw::c_char,
                                               canCache: *mut Rboolean,
                                               arg1: *mut R_ObjectTable)
                              -> Rboolean>;
pub type Rdb_get =
    ::std::option::Option<unsafe extern "C" fn(name:
                                                   *const ::std::os::raw::c_char,
                                               canCache: *mut Rboolean,
                                               arg1: *mut R_ObjectTable)
                              -> SEXP>;
pub type Rdb_remove =
    ::std::option::Option<unsafe extern "C" fn(name:
                                                   *const ::std::os::raw::c_char,
                                               arg1: *mut R_ObjectTable)
                              -> ::std::os::raw::c_int>;
pub type Rdb_assign =
    ::std::option::Option<unsafe extern "C" fn(name:
                                                   *const ::std::os::raw::c_char,
                                               value: SEXP,
                                               arg1: *mut R_ObjectTable)
                              -> SEXP>;
pub type Rdb_objects =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut R_ObjectTable)
                              -> SEXP>;
pub type Rdb_canCache =
    ::std::option::Option<unsafe extern "C" fn(name:
                                                   *const ::std::os::raw::c_char,
                                               arg1: *mut R_ObjectTable)
                              -> Rboolean>;
pub type Rdb_onDetach =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut R_ObjectTable)>;
pub type Rdb_onAttach =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut R_ObjectTable)>;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct__R_ObjectTable {
    pub _type: ::std::os::raw::c_int,
    pub cachedNames: *mut *mut ::std::os::raw::c_char,
    pub active: Rboolean,
    pub exists: Rdb_exists,
    pub get: Rdb_get,
    pub remove: Rdb_remove,
    pub assign: Rdb_assign,
    pub objects: Rdb_objects,
    pub canCache: Rdb_canCache,
    pub onDetach: Rdb_onDetach,
    pub onAttach: Rdb_onAttach,
    pub privateData: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__R_ObjectTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__R_ObjectTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Rconnection = *mut Struct_Rconn;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Rconn {
    pub class: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub enc: ::std::os::raw::c_int,
    pub mode: [::std::os::raw::c_char; 5usize],
    pub text: Rboolean,
    pub isopen: Rboolean,
    pub incomplete: Rboolean,
    pub canread: Rboolean,
    pub canwrite: Rboolean,
    pub canseek: Rboolean,
    pub blocking: Rboolean,
    pub isGzcon: Rboolean,
    pub open: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_Rconn)
                                        -> Rboolean>,
    pub close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut Struct_Rconn)>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                *mut Struct_Rconn)>,
    pub vfprintf: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_Rconn,
                                                             arg2:
                                                                 *const ::std::os::raw::c_char,
                                                             arg3: va_list)
                                            -> ::std::os::raw::c_int>,
    pub fgetc: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut Struct_Rconn)
                                         -> ::std::os::raw::c_int>,
    pub fgetc_internal: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut Struct_Rconn)
                                                  -> ::std::os::raw::c_int>,
    pub seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_Rconn,
                                                         arg2:
                                                             ::std::os::raw::c_double,
                                                         arg3:
                                                             ::std::os::raw::c_int,
                                                         arg4:
                                                             ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_double>,
    pub truncate: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_Rconn)>,
    pub fflush: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut Struct_Rconn)
                                          -> ::std::os::raw::c_int>,
    pub read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut ::std::os::raw::c_void,
                                                         arg2: size_t,
                                                         arg3: size_t,
                                                         arg4:
                                                             *mut Struct_Rconn)
                                        -> size_t>,
    pub write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *const ::std::os::raw::c_void,
                                                          arg2: size_t,
                                                          arg3: size_t,
                                                          arg4:
                                                              *mut Struct_Rconn)
                                         -> size_t>,
    pub nPushBack: ::std::os::raw::c_int,
    pub posPushBack: ::std::os::raw::c_int,
    pub PushBack: *mut *mut ::std::os::raw::c_char,
    pub save: ::std::os::raw::c_int,
    pub save2: ::std::os::raw::c_int,
    pub encname: [::std::os::raw::c_char; 101usize],
    pub inconv: *mut ::std::os::raw::c_void,
    pub outconv: *mut ::std::os::raw::c_void,
    pub iconvbuff: [::std::os::raw::c_char; 25usize],
    pub oconvbuff: [::std::os::raw::c_char; 50usize],
    pub next: *mut ::std::os::raw::c_char,
    pub init_out: [::std::os::raw::c_char; 25usize],
    pub navail: ::std::os::raw::c_short,
    pub inavail: ::std::os::raw::c_short,
    pub EOF_signalled: Rboolean,
    pub UTF8out: Rboolean,
    pub id: *mut ::std::os::raw::c_void,
    pub ex_ptr: *mut ::std::os::raw::c_void,
    pub private: *mut ::std::os::raw::c_void,
    pub status: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Rconn {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Rconn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type InputHandlerProc =
    ::std::option::Option<unsafe extern "C" fn(userData:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct__InputHandler {
    pub activity: ::std::os::raw::c_int,
    pub fileDescriptor: ::std::os::raw::c_int,
    pub handler: InputHandlerProc,
    pub next: *mut Struct__InputHandler,
    pub active: ::std::os::raw::c_int,
    pub userData: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__InputHandler {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__InputHandler {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type InputHandler = Struct__InputHandler;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed44 {
    GE_DEVICE = 0,
    GE_NDC = 1,
    GE_INCHES = 2,
    GE_CM = 3,
}
pub type GEUnit = Enum_Unnamed44;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed45 {
    GE_InitState = 0,
    GE_FinaliseState = 1,
    GE_SaveState = 2,
    GE_RestoreState = 6,
    GE_CopyState = 3,
    GE_SaveSnapshotState = 4,
    GE_RestoreSnapshotState = 5,
    GE_CheckPlot = 7,
    GE_ScalePS = 8,
}
pub type GEevent = Enum_Unnamed45;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed46 {
    GE_ROUND_CAP = 1,
    GE_BUTT_CAP = 2,
    GE_SQUARE_CAP = 3,
}
pub type R_GE_lineend = Enum_Unnamed46;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed47 {
    GE_ROUND_JOIN = 1,
    GE_MITRE_JOIN = 2,
    GE_BEVEL_JOIN = 3,
}
pub type R_GE_linejoin = Enum_Unnamed47;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub col: ::std::os::raw::c_int,
    pub fill: ::std::os::raw::c_int,
    pub gamma: ::std::os::raw::c_double,
    pub lwd: ::std::os::raw::c_double,
    pub lty: ::std::os::raw::c_int,
    pub lend: R_GE_lineend,
    pub ljoin: R_GE_linejoin,
    pub lmitre: ::std::os::raw::c_double,
    pub cex: ::std::os::raw::c_double,
    pub ps: ::std::os::raw::c_double,
    pub lineheight: ::std::os::raw::c_double,
    pub fontface: ::std::os::raw::c_int,
    pub fontfamily: [::std::os::raw::c_char; 201usize],
}
impl ::std::clone::Clone for Struct_Unnamed48 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type R_GE_gcontext = Struct_Unnamed48;
pub type pGEcontext = *mut R_GE_gcontext;
pub type DevDesc = Struct__DevDesc;
pub type pDevDesc = *mut DevDesc;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DevDesc {
    pub left: ::std::os::raw::c_double,
    pub right: ::std::os::raw::c_double,
    pub bottom: ::std::os::raw::c_double,
    pub top: ::std::os::raw::c_double,
    pub clipLeft: ::std::os::raw::c_double,
    pub clipRight: ::std::os::raw::c_double,
    pub clipBottom: ::std::os::raw::c_double,
    pub clipTop: ::std::os::raw::c_double,
    pub xCharOffset: ::std::os::raw::c_double,
    pub yCharOffset: ::std::os::raw::c_double,
    pub yLineBias: ::std::os::raw::c_double,
    pub ipr: [::std::os::raw::c_double; 2usize],
    pub cra: [::std::os::raw::c_double; 2usize],
    pub gamma: ::std::os::raw::c_double,
    pub canClip: Rboolean,
    pub canChangeGamma: Rboolean,
    pub canHAdj: ::std::os::raw::c_int,
    pub startps: ::std::os::raw::c_double,
    pub startcol: ::std::os::raw::c_int,
    pub startfill: ::std::os::raw::c_int,
    pub startlty: ::std::os::raw::c_int,
    pub startfont: ::std::os::raw::c_int,
    pub startgamma: ::std::os::raw::c_double,
    pub deviceSpecific: *mut ::std::os::raw::c_void,
    pub displayListOn: Rboolean,
    pub canGenMouseDown: Rboolean,
    pub canGenMouseMove: Rboolean,
    pub canGenMouseUp: Rboolean,
    pub canGenKeybd: Rboolean,
    pub gettingEvent: Rboolean,
    pub activate: ::std::option::Option<extern "C" fn(arg1: pDevDesc)>,
    pub circle: ::std::option::Option<extern "C" fn(x:
                                                        ::std::os::raw::c_double,
                                                    y:
                                                        ::std::os::raw::c_double,
                                                    r:
                                                        ::std::os::raw::c_double,
                                                    gc: pGEcontext,
                                                    dd: pDevDesc)>,
    pub clip: ::std::option::Option<extern "C" fn(x0:
                                                      ::std::os::raw::c_double,
                                                  x1:
                                                      ::std::os::raw::c_double,
                                                  y0:
                                                      ::std::os::raw::c_double,
                                                  y1:
                                                      ::std::os::raw::c_double,
                                                  dd: pDevDesc)>,
    pub close: ::std::option::Option<extern "C" fn(dd: pDevDesc)>,
    pub deactivate: ::std::option::Option<extern "C" fn(arg1: pDevDesc)>,
    pub locator: ::std::option::Option<unsafe extern "C" fn(x:
                                                                *mut ::std::os::raw::c_double,
                                                            y:
                                                                *mut ::std::os::raw::c_double,
                                                            dd: pDevDesc)
                                           -> Rboolean>,
    pub line: ::std::option::Option<extern "C" fn(x1:
                                                      ::std::os::raw::c_double,
                                                  y1:
                                                      ::std::os::raw::c_double,
                                                  x2:
                                                      ::std::os::raw::c_double,
                                                  y2:
                                                      ::std::os::raw::c_double,
                                                  gc: pGEcontext,
                                                  dd: pDevDesc)>,
    pub metricInfo: ::std::option::Option<unsafe extern "C" fn(c:
                                                                   ::std::os::raw::c_int,
                                                               gc: pGEcontext,
                                                               ascent:
                                                                   *mut ::std::os::raw::c_double,
                                                               descent:
                                                                   *mut ::std::os::raw::c_double,
                                                               width:
                                                                   *mut ::std::os::raw::c_double,
                                                               dd: pDevDesc)>,
    pub mode: ::std::option::Option<extern "C" fn(mode: ::std::os::raw::c_int,
                                                  dd: pDevDesc)>,
    pub newPage: ::std::option::Option<extern "C" fn(gc: pGEcontext,
                                                     dd: pDevDesc)>,
    pub polygon: ::std::option::Option<unsafe extern "C" fn(n:
                                                                ::std::os::raw::c_int,
                                                            x:
                                                                *mut ::std::os::raw::c_double,
                                                            y:
                                                                *mut ::std::os::raw::c_double,
                                                            gc: pGEcontext,
                                                            dd: pDevDesc)>,
    pub polyline: ::std::option::Option<unsafe extern "C" fn(n:
                                                                 ::std::os::raw::c_int,
                                                             x:
                                                                 *mut ::std::os::raw::c_double,
                                                             y:
                                                                 *mut ::std::os::raw::c_double,
                                                             gc: pGEcontext,
                                                             dd: pDevDesc)>,
    pub rect: ::std::option::Option<extern "C" fn(x0:
                                                      ::std::os::raw::c_double,
                                                  y0:
                                                      ::std::os::raw::c_double,
                                                  x1:
                                                      ::std::os::raw::c_double,
                                                  y1:
                                                      ::std::os::raw::c_double,
                                                  gc: pGEcontext,
                                                  dd: pDevDesc)>,
    pub path: ::std::option::Option<unsafe extern "C" fn(x:
                                                             *mut ::std::os::raw::c_double,
                                                         y:
                                                             *mut ::std::os::raw::c_double,
                                                         npoly:
                                                             ::std::os::raw::c_int,
                                                         nper:
                                                             *mut ::std::os::raw::c_int,
                                                         winding: Rboolean,
                                                         gc: pGEcontext,
                                                         dd: pDevDesc)>,
    pub raster: ::std::option::Option<unsafe extern "C" fn(raster:
                                                               *mut ::std::os::raw::c_uint,
                                                           w:
                                                               ::std::os::raw::c_int,
                                                           h:
                                                               ::std::os::raw::c_int,
                                                           x:
                                                               ::std::os::raw::c_double,
                                                           y:
                                                               ::std::os::raw::c_double,
                                                           width:
                                                               ::std::os::raw::c_double,
                                                           height:
                                                               ::std::os::raw::c_double,
                                                           rot:
                                                               ::std::os::raw::c_double,
                                                           interpolate:
                                                               Rboolean,
                                                           gc: pGEcontext,
                                                           dd: pDevDesc)>,
    pub cap: ::std::option::Option<extern "C" fn(dd: pDevDesc) -> SEXP>,
    pub size: ::std::option::Option<unsafe extern "C" fn(left:
                                                             *mut ::std::os::raw::c_double,
                                                         right:
                                                             *mut ::std::os::raw::c_double,
                                                         bottom:
                                                             *mut ::std::os::raw::c_double,
                                                         top:
                                                             *mut ::std::os::raw::c_double,
                                                         dd: pDevDesc)>,
    pub strWidth: ::std::option::Option<unsafe extern "C" fn(str:
                                                                 *const ::std::os::raw::c_char,
                                                             gc: pGEcontext,
                                                             dd: pDevDesc)
                                            -> ::std::os::raw::c_double>,
    pub text: ::std::option::Option<unsafe extern "C" fn(x:
                                                             ::std::os::raw::c_double,
                                                         y:
                                                             ::std::os::raw::c_double,
                                                         str:
                                                             *const ::std::os::raw::c_char,
                                                         rot:
                                                             ::std::os::raw::c_double,
                                                         hadj:
                                                             ::std::os::raw::c_double,
                                                         gc: pGEcontext,
                                                         dd: pDevDesc)>,
    pub onExit: ::std::option::Option<extern "C" fn(dd: pDevDesc)>,
    pub getEvent: ::std::option::Option<unsafe extern "C" fn(arg1: SEXP,
                                                             arg2:
                                                                 *const ::std::os::raw::c_char)
                                            -> SEXP>,
    pub newFrameConfirm: ::std::option::Option<extern "C" fn(dd: pDevDesc)
                                                   -> Rboolean>,
    pub hasTextUTF8: Rboolean,
    pub textUTF8: ::std::option::Option<unsafe extern "C" fn(x:
                                                                 ::std::os::raw::c_double,
                                                             y:
                                                                 ::std::os::raw::c_double,
                                                             str:
                                                                 *const ::std::os::raw::c_char,
                                                             rot:
                                                                 ::std::os::raw::c_double,
                                                             hadj:
                                                                 ::std::os::raw::c_double,
                                                             gc: pGEcontext,
                                                             dd: pDevDesc)>,
    pub strWidthUTF8: ::std::option::Option<unsafe extern "C" fn(str:
                                                                     *const ::std::os::raw::c_char,
                                                                 gc:
                                                                     pGEcontext,
                                                                 dd: pDevDesc)
                                                -> ::std::os::raw::c_double>,
    pub wantSymbolUTF8: Rboolean,
    pub useRotatedTextInContour: Rboolean,
    pub eventEnv: SEXP,
    pub eventHelper: ::std::option::Option<extern "C" fn(dd: pDevDesc,
                                                         code:
                                                             ::std::os::raw::c_int)>,
    pub holdflush: ::std::option::Option<extern "C" fn(dd: pDevDesc,
                                                       level:
                                                           ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_int>,
    pub haveTransparency: ::std::os::raw::c_int,
    pub haveTransparentBg: ::std::os::raw::c_int,
    pub haveRaster: ::std::os::raw::c_int,
    pub haveCapture: ::std::os::raw::c_int,
    pub haveLocator: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_char; 64usize],
}
impl ::std::clone::Clone for Struct__DevDesc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__DevDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(i32)]
#[derive(Debug)]
pub enum Enum_Unnamed49 {
    knUNKNOWN = -1,
    knLEFT = 0,
    knUP = 1,
    knRIGHT = 2,
    knDOWN = 3,
    knF1 = 4,
    knF2 = 5,
    knF3 = 6,
    knF4 = 7,
    knF5 = 8,
    knF6 = 9,
    knF7 = 10,
    knF8 = 11,
    knF9 = 12,
    knF10 = 13,
    knF11 = 14,
    knF12 = 15,
    knPGUP = 16,
    knPGDN = 17,
    knEND = 18,
    knHOME = 19,
    knINS = 20,
    knDEL = 21,
}
pub type R_KeyName = Enum_Unnamed49;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed50 { meMouseDown = 0, meMouseUp = 1, meMouseMove = 2, }
pub type R_MouseEvent = Enum_Unnamed50;
pub type GEDevDesc = Struct__GEDevDesc;
pub type GEcallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: GEevent,
                                               arg2: *mut GEDevDesc,
                                               arg3: SEXP) -> SEXP>;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed51 {
    pub systemSpecific: *mut ::std::os::raw::c_void,
    pub callback: GEcallback,
}
impl ::std::clone::Clone for Struct_Unnamed51 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed51 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GESystemDesc = Struct_Unnamed51;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct__GEDevDesc {
    pub dev: pDevDesc,
    pub displayListOn: Rboolean,
    pub displayList: SEXP,
    pub DLlastElt: SEXP,
    pub savedSnapshot: SEXP,
    pub dirty: Rboolean,
    pub recordGraphics: Rboolean,
    pub gesd: [*mut GESystemDesc; 24usize],
    pub ask: Rboolean,
}
impl ::std::clone::Clone for Struct__GEDevDesc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GEDevDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pGEDevDesc = *mut GEDevDesc;
pub type rcolor = ::std::os::raw::c_uint;
pub type L_fp =
    ::std::option::Option<extern "C" fn() -> ::std::os::raw::c_int>;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulong;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = ::std::os::raw::c_long;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type DLsize_t = int_fast64_t;
pub type custom_alloc_t =
    ::std::option::Option<unsafe extern "C" fn(allocator: *mut R_allocator_t,
                                               arg1: size_t)
                              -> *mut ::std::os::raw::c_void>;
pub type custom_free_t =
    ::std::option::Option<unsafe extern "C" fn(allocator: *mut R_allocator_t,
                                               arg1:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_R_allocator {
    pub mem_alloc: custom_alloc_t,
    pub mem_free: custom_free_t,
    pub res: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_R_allocator {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_R_allocator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed52 {
    SA_NORESTORE = 0,
    SA_RESTORE = 1,
    SA_DEFAULT = 2,
    SA_NOSAVE = 3,
    SA_SAVE = 4,
    SA_SAVEASK = 5,
    SA_SUICIDE = 6,
}
pub type SA_TYPE = Enum_Unnamed52;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct_Unnamed53 {
    pub R_Quiet: Rboolean,
    pub R_Slave: Rboolean,
    pub R_Interactive: Rboolean,
    pub R_Verbose: Rboolean,
    pub LoadSiteFile: Rboolean,
    pub LoadInitFile: Rboolean,
    pub DebugInitFile: Rboolean,
    pub RestoreAction: SA_TYPE,
    pub SaveAction: SA_TYPE,
    pub vsize: size_t,
    pub nsize: size_t,
    pub max_vsize: size_t,
    pub max_nsize: size_t,
    pub ppsize: size_t,
    pub NoRenviron: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed53 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed53 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type structRstart = Struct_Unnamed53;
pub type Rstart = *mut structRstart;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_AlgType { NREG = 1, OPT = 2, }
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_VPos { F = 9, F0 = 12, FDIF = 10, G = 27, HC = 70, }
pub const INITS: Enum_IVPos = Enum_IVPos::INITH;
#[derive(Clone, Copy)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_IVPos {
    AI = 90,
    AM = 94,
    ALGSAV = 50,
    COVMAT = 25,
    COVPRT = 13,
    COVREQ = 14,
    DRADPR = 100,
    DTYPE = 15,
    IERR = 74,
    INITH = 24,
    IPIVOT = 75,
    IVNEED = 2,
    LASTIV = 42,
    LASTV = 44,
    LMAT = 41,
    MXFCAL = 16,
    MXITER = 17,
    NEXTV = 46,
    NFCALL = 5,
    NFCOV = 51,
    NFGCAL = 6,
    NGCOV = 52,
    NITER = 30,
    NVDFLT = 49,
    NVSAVE = 8,
    OUTLEV = 18,
    PARPRT = 19,
    PARSAV = 48,
    PERM = 57,
    PRUNIT = 20,
    QRTYP = 79,
    RDREQ = 56,
    RMAT = 77,
    SOLPRT = 21,
    STATPR = 22,
    TOOBIG = 1,
    VNEED = 3,
    VSAVE = 59,
    X0PRT = 23,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
#[derive(Debug)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "R")]
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
    pub static mut signgam: ::std::os::raw::c_int;
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
    pub static mut R_NaN: ::std::os::raw::c_double;
    pub static mut R_PosInf: ::std::os::raw::c_double;
    pub static mut R_NegInf: ::std::os::raw::c_double;
    pub static mut R_NaReal: ::std::os::raw::c_double;
    pub static mut R_NaInt: ::std::os::raw::c_int;
    pub static mut R_GlobalEnv: SEXP;
    pub static mut R_EmptyEnv: SEXP;
    pub static mut R_BaseEnv: SEXP;
    pub static mut R_BaseNamespace: SEXP;
    pub static mut R_NamespaceRegistry: SEXP;
    pub static mut R_Srcref: SEXP;
    pub static mut R_NilValue: SEXP;
    pub static mut R_UnboundValue: SEXP;
    pub static mut R_MissingArg: SEXP;
    pub static mut R_RestartToken: SEXP;
    pub static mut R_baseSymbol: SEXP;
    pub static mut R_BaseSymbol: SEXP;
    pub static mut R_BraceSymbol: SEXP;
    pub static mut R_Bracket2Symbol: SEXP;
    pub static mut R_BracketSymbol: SEXP;
    pub static mut R_ClassSymbol: SEXP;
    pub static mut R_DeviceSymbol: SEXP;
    pub static mut R_DimNamesSymbol: SEXP;
    pub static mut R_DimSymbol: SEXP;
    pub static mut R_DollarSymbol: SEXP;
    pub static mut R_DotsSymbol: SEXP;
    pub static mut R_DoubleColonSymbol: SEXP;
    pub static mut R_DropSymbol: SEXP;
    pub static mut R_LastvalueSymbol: SEXP;
    pub static mut R_LevelsSymbol: SEXP;
    pub static mut R_ModeSymbol: SEXP;
    pub static mut R_NaRmSymbol: SEXP;
    pub static mut R_NameSymbol: SEXP;
    pub static mut R_NamesSymbol: SEXP;
    pub static mut R_NamespaceEnvSymbol: SEXP;
    pub static mut R_PackageSymbol: SEXP;
    pub static mut R_PreviousSymbol: SEXP;
    pub static mut R_QuoteSymbol: SEXP;
    pub static mut R_RowNamesSymbol: SEXP;
    pub static mut R_SeedsSymbol: SEXP;
    pub static mut R_SortListSymbol: SEXP;
    pub static mut R_SourceSymbol: SEXP;
    pub static mut R_SpecSymbol: SEXP;
    pub static mut R_TripleColonSymbol: SEXP;
    pub static mut R_TspSymbol: SEXP;
    pub static mut R_dot_defined: SEXP;
    pub static mut R_dot_Method: SEXP;
    pub static mut R_dot_packageName: SEXP;
    pub static mut R_dot_target: SEXP;
    pub static mut R_dot_Generic: SEXP;
    pub static mut R_NaString: SEXP;
    pub static mut R_BlankString: SEXP;
    pub static mut R_BlankScalarString: SEXP;
    pub static mut GA_FixedFont: font;
    pub static mut GA_ArrowCursor: cursor;
    pub static mut GA_BlankCursor: cursor;
    pub static mut GA_WatchCursor: cursor;
    pub static mut GA_CaretCursor: cursor;
    pub static mut GA_TextCursor: cursor;
    pub static mut GA_HandCursor: cursor;
    pub static mut GA_CrossCursor: cursor;
    pub static mut GA_SystemFont: font;
    pub static mut GA_Times: font;
    pub static mut GA_Helvetica: font;
    pub static mut GA_Courier: font;
    pub static mut libintl_version: ::std::os::raw::c_int;
    pub static mut R_DirtyImage: ::std::os::raw::c_int;
    pub static mut R_TempDir: *mut ::std::os::raw::c_char;
    pub static mut UserBreak: ::std::os::raw::c_int;
    pub static mut AllDevicesKilled: Rboolean;
    pub static mut R_InputHandlers: *mut InputHandler;
    pub static mut R_PolledEvents: ::std::option::Option<extern "C" fn()>;
    pub static mut R_wait_usec: ::std::os::raw::c_int;
    pub static mut R_interrupts_suspended: Rboolean;
    pub static mut R_interrupts_pending: ::std::os::raw::c_int;
    pub static mut mbcslocale: Rboolean;
    pub static mut R_num_math_threads: ::std::os::raw::c_int;
    pub static mut R_max_num_math_threads: ::std::os::raw::c_int;
}
#[link(name = "R")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn gets(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn acos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan2(__y: ::std::os::raw::c_double, __x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __atan2(__y: ::std::os::raw::c_double,
                   __x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cos(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sin(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tan(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acosh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanh(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn frexp(__x: ::std::os::raw::c_double,
                 __exponent: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __frexp(__x: ::std::os::raw::c_double,
                   __exponent: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn ldexp(__x: ::std::os::raw::c_double,
                 __exponent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __ldexp(__x: ::std::os::raw::c_double,
                   __exponent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn log(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log10(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log10(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn modf(__x: ::std::os::raw::c_double,
                __iptr: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __modf(__x: ::std::os::raw::c_double,
                  __iptr: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn expm1(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expm1(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log1p(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log1p(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log2(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn pow(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __pow(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn sqrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sqrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn hypot(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __hypot(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cbrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cbrt(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ceil(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __ceil(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fabs(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fabs(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn floor(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __floor(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmod(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __fmod(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __isinf(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __finite(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn isinf(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn finite(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn drem(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __drem(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn significand(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __significand(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn copysign(__x: ::std::os::raw::c_double,
                    __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __copysign(__x: ::std::os::raw::c_double,
                      __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nan(__tagb: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn __nan(__tagb: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn __isnan(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn isnan(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn j0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn j1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn y0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn y1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn erf(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erf(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfc(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfc(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __lgamma(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn tgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tgamma(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn gamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __gamma(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn lgamma_r(arg1: ::std::os::raw::c_double,
                    __signgamp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __lgamma_r(arg1: ::std::os::raw::c_double,
                      __signgamp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn rint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __rint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn nextafter(__x: ::std::os::raw::c_double,
                     __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __nextafter(__x: ::std::os::raw::c_double,
                       __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nexttoward(__x: ::std::os::raw::c_double,
                      __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __nexttoward(__x: ::std::os::raw::c_double,
                        __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn remainder(__x: ::std::os::raw::c_double,
                     __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __remainder(__x: ::std::os::raw::c_double,
                       __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn scalbn(__x: ::std::os::raw::c_double, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __scalbn(__x: ::std::os::raw::c_double, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn ilogb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __ilogb(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn scalbln(__x: ::std::os::raw::c_double, __n: ::std::os::raw::c_long)
     -> ::std::os::raw::c_double;
    pub fn __scalbln(__x: ::std::os::raw::c_double,
                     __n: ::std::os::raw::c_long) -> ::std::os::raw::c_double;
    pub fn nearbyint(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __nearbyint(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn round(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __round(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn trunc(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __trunc(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn remquo(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double,
                  __quo: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __remquo(__x: ::std::os::raw::c_double,
                    __y: ::std::os::raw::c_double,
                    __quo: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn lrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lrint(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llrint(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn __llrint(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn lround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lround(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llround(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn __llround(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn fdim(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __fdim(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmax(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __fmax(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmin(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __fmin(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fpclassify(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __signbit(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn fma(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double,
               __z: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fma(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double,
                 __z: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn scalb(__x: ::std::os::raw::c_double, __n: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __scalb(__x: ::std::os::raw::c_double,
                   __n: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __acosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn asinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __asinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __atanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atan2f(__y: ::std::os::raw::c_float, __x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __atan2f(__y: ::std::os::raw::c_float,
                    __x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn cosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __cosf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sinf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tanf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn coshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __coshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn acoshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __acoshf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn asinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __asinhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __atanhf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn expf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __expf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn frexpf(__x: ::std::os::raw::c_float,
                  __exponent: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn __frexpf(__x: ::std::os::raw::c_float,
                    __exponent: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn ldexpf(__x: ::std::os::raw::c_float,
                  __exponent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn __ldexpf(__x: ::std::os::raw::c_float,
                    __exponent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn logf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __logf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log10f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log10f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn modff(__x: ::std::os::raw::c_float,
                 __iptr: *mut ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __modff(__x: ::std::os::raw::c_float,
                   __iptr: *mut ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn expm1f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __expm1f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log1pf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log1pf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn logbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __logbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn exp2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __exp2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __log2f(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn powf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __powf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn sqrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sqrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn hypotf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __hypotf(__x: ::std::os::raw::c_float,
                    __y: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn cbrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __cbrtf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn ceilf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __ceilf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn fabsf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __fabsf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn floorf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __floorf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn fmodf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __fmodf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __isinff(__value: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn __finitef(__value: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn isinff(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn finitef(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn dremf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __dremf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn significandf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __significandf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn copysignf(__x: ::std::os::raw::c_float,
                     __y: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __copysignf(__x: ::std::os::raw::c_float,
                       __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn nanf(__tagb: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn __isnanf(__value: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn isnanf(__value: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn j0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __j0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn j1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __j1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn y0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __y0f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn y1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __y1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn erff(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __erff(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn erfcf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __erfcf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn lgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __lgammaf(arg1: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn tgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tgammaf(arg1: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn gammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __gammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn lgammaf_r(arg1: ::std::os::raw::c_float,
                     __signgamp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn __lgammaf_r(arg1: ::std::os::raw::c_float,
                       __signgamp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn rintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __rintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn nextafterf(__x: ::std::os::raw::c_float,
                      __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __nextafterf(__x: ::std::os::raw::c_float,
                        __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn nexttowardf(__x: ::std::os::raw::c_float,
                       __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_float;
    pub fn __nexttowardf(__x: ::std::os::raw::c_float,
                         __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_float;
    pub fn remainderf(__x: ::std::os::raw::c_float,
                      __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __remainderf(__x: ::std::os::raw::c_float,
                        __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn scalbnf(__x: ::std::os::raw::c_float, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn __scalbnf(__x: ::std::os::raw::c_float, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn ilogbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn __ilogbf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn scalblnf(__x: ::std::os::raw::c_float, __n: ::std::os::raw::c_long)
     -> ::std::os::raw::c_float;
    pub fn __scalblnf(__x: ::std::os::raw::c_float,
                      __n: ::std::os::raw::c_long) -> ::std::os::raw::c_float;
    pub fn nearbyintf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __nearbyintf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn roundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __roundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn truncf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __truncf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn remquof(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float,
                   __quo: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn __remquof(__x: ::std::os::raw::c_float,
                     __y: ::std::os::raw::c_float,
                     __quo: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn lrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn __lrintf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn llrintf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_longlong;
    pub fn __llrintf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_longlong;
    pub fn lroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn __lroundf(__x: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn llroundf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_longlong;
    pub fn __llroundf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_longlong;
    pub fn fdimf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __fdimf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn fmaxf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __fmaxf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn fminf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __fminf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __fpclassifyf(__value: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn __signbitf(__value: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn fmaf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float,
                __z: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __fmaf(__x: ::std::os::raw::c_float, __y: ::std::os::raw::c_float,
                  __z: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn scalbf(__x: ::std::os::raw::c_float, __n: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn __scalbf(__x: ::std::os::raw::c_float,
                    __n: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn acosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan2l(__y: ::std::os::raw::c_double,
                  __x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atan2l(__y: ::std::os::raw::c_double,
                    __x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn cosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cosl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn coshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __coshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __tanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acoshl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __acoshl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn asinhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __asinhl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn atanhl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __atanhl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn expl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn frexpl(__x: ::std::os::raw::c_double,
                  __exponent: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __frexpl(__x: ::std::os::raw::c_double,
                    __exponent: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn ldexpl(__x: ::std::os::raw::c_double,
                  __exponent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __ldexpl(__x: ::std::os::raw::c_double,
                    __exponent: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn logl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log10l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log10l(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn modfl(__x: ::std::os::raw::c_double,
                 __iptr: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __modfl(__x: ::std::os::raw::c_double,
                   __iptr: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn expm1l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __expm1l(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn log1pl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log1pl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn logbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __logbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __exp2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __log2l(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn powl(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __powl(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sqrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __sqrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn hypotl(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __hypotl(__x: ::std::os::raw::c_double,
                    __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn cbrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __cbrtl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ceill(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __ceill(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fabsl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fabsl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn floorl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __floorl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn fmodl(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __fmodl(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __isinfl(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __finitel(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn isinfl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn finitel(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn dreml(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __dreml(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn significandl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __significandl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn copysignl(__x: ::std::os::raw::c_double,
                     __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __copysignl(__x: ::std::os::raw::c_double,
                       __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nanl(__tagb: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn __isnanl(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn isnanl(__value: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn j0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn j1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __j1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn y0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y0l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn y1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __y1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn erfl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfcl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __erfcl(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn lgammal(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __lgammal(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn tgammal(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __tgammal(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn gammal(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __gammal(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn lgammal_r(arg1: ::std::os::raw::c_double,
                     __signgamp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __lgammal_r(arg1: ::std::os::raw::c_double,
                       __signgamp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn rintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __rintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn nextafterl(__x: ::std::os::raw::c_double,
                      __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __nextafterl(__x: ::std::os::raw::c_double,
                        __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nexttowardl(__x: ::std::os::raw::c_double,
                       __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __nexttowardl(__x: ::std::os::raw::c_double,
                         __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn remainderl(__x: ::std::os::raw::c_double,
                      __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __remainderl(__x: ::std::os::raw::c_double,
                        __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn scalbnl(__x: ::std::os::raw::c_double, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __scalbnl(__x: ::std::os::raw::c_double,
                     __n: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn ilogbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn __ilogbl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn scalblnl(__x: ::std::os::raw::c_double,
                    __n: ::std::os::raw::c_long) -> ::std::os::raw::c_double;
    pub fn __scalblnl(__x: ::std::os::raw::c_double,
                      __n: ::std::os::raw::c_long)
     -> ::std::os::raw::c_double;
    pub fn nearbyintl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __nearbyintl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn roundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __roundl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn truncl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __truncl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn remquol(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double,
                   __quo: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn __remquol(__x: ::std::os::raw::c_double,
                     __y: ::std::os::raw::c_double,
                     __quo: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn lrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lrintl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llrintl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn __llrintl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn lroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn __lroundl(__x: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llroundl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn __llroundl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn fdiml(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __fdiml(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmaxl(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __fmaxl(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fminl(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __fminl(__x: ::std::os::raw::c_double,
                   __y: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fpclassifyl(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __signbitl(__value: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn fmal(__x: ::std::os::raw::c_double, __y: ::std::os::raw::c_double,
                __z: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __fmal(__x: ::std::os::raw::c_double,
                  __y: ::std::os::raw::c_double,
                  __z: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn scalbl(__x: ::std::os::raw::c_double,
                  __n: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __scalbl(__x: ::std::os::raw::c_double,
                    __n: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn matherr(__exc: *mut Struct_exception) -> ::std::os::raw::c_int;
    pub fn R_IsNA(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn R_IsNaN(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn R_finite(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn Rf_error(arg1: *const ::std::os::raw::c_char, ...);
    pub fn UNIMPLEMENTED(arg1: *const ::std::os::raw::c_char);
    pub fn WrongArgCount(arg1: *const ::std::os::raw::c_char);
    pub fn Rf_warning(arg1: *const ::std::os::raw::c_char, ...);
    pub fn R_ShowMessage(s: *const ::std::os::raw::c_char);
    pub fn vmaxget() -> *mut ::std::os::raw::c_void;
    pub fn vmaxset(arg1: *const ::std::os::raw::c_void);
    pub fn R_gc();
    pub fn R_gc_running() -> ::std::os::raw::c_int;
    pub fn R_alloc(arg1: size_t, arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn R_allocLD(nelem: size_t) -> *mut ::std::os::raw::c_double;
    pub fn S_alloc(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn S_realloc(arg1: *mut ::std::os::raw::c_char,
                     arg2: ::std::os::raw::c_long,
                     arg3: ::std::os::raw::c_long,
                     arg4: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn R_isort(arg1: *mut ::std::os::raw::c_int,
                   arg2: ::std::os::raw::c_int);
    pub fn R_rsort(arg1: *mut ::std::os::raw::c_double,
                   arg2: ::std::os::raw::c_int);
    pub fn R_csort(arg1: *mut Rcomplex, arg2: ::std::os::raw::c_int);
    pub fn rsort_with_index(arg1: *mut ::std::os::raw::c_double,
                            arg2: *mut ::std::os::raw::c_int,
                            arg3: ::std::os::raw::c_int);
    pub fn Rf_revsort(arg1: *mut ::std::os::raw::c_double,
                      arg2: *mut ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int);
    pub fn Rf_iPsort(arg1: *mut ::std::os::raw::c_int,
                     arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int);
    pub fn Rf_rPsort(arg1: *mut ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int);
    pub fn Rf_cPsort(arg1: *mut Rcomplex, arg2: ::std::os::raw::c_int,
                     arg3: ::std::os::raw::c_int);
    pub fn R_qsort(v: *mut ::std::os::raw::c_double, i: size_t, j: size_t);
    pub fn R_qsort_I(v: *mut ::std::os::raw::c_double,
                     II: *mut ::std::os::raw::c_int, i: ::std::os::raw::c_int,
                     j: ::std::os::raw::c_int);
    pub fn R_qsort_int(iv: *mut ::std::os::raw::c_int, i: size_t, j: size_t);
    pub fn R_qsort_int_I(iv: *mut ::std::os::raw::c_int,
                         II: *mut ::std::os::raw::c_int,
                         i: ::std::os::raw::c_int, j: ::std::os::raw::c_int);
    pub fn R_ExpandFileName(arg1: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn Rf_setIVector(arg1: *mut ::std::os::raw::c_int,
                         arg2: ::std::os::raw::c_int,
                         arg3: ::std::os::raw::c_int);
    pub fn Rf_setRVector(arg1: *mut ::std::os::raw::c_double,
                         arg2: ::std::os::raw::c_int,
                         arg3: ::std::os::raw::c_double);
    pub fn Rf_StringFalse(arg1: *const ::std::os::raw::c_char) -> Rboolean;
    pub fn Rf_StringTrue(arg1: *const ::std::os::raw::c_char) -> Rboolean;
    pub fn Rf_isBlankString(arg1: *const ::std::os::raw::c_char) -> Rboolean;
    pub fn R_atof(str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn R_strtod(c: *const ::std::os::raw::c_char,
                    end: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn R_tmpnam(prefix: *const ::std::os::raw::c_char,
                    tempdir: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn R_tmpnam2(prefix: *const ::std::os::raw::c_char,
                     tempdir: *const ::std::os::raw::c_char,
                     fileext: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn R_CheckUserInterrupt();
    pub fn R_CheckStack();
    pub fn R_CheckStack2(arg1: size_t);
    pub fn findInterval(xt: *mut ::std::os::raw::c_double,
                        n: ::std::os::raw::c_int, x: ::std::os::raw::c_double,
                        rightmost_closed: Rboolean, all_inside: Rboolean,
                        ilo: ::std::os::raw::c_int,
                        mflag: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn findInterval2(xt: *mut ::std::os::raw::c_double,
                         n: ::std::os::raw::c_int,
                         x: ::std::os::raw::c_double,
                         rightmost_closed: Rboolean, all_inside: Rboolean,
                         left_open: Rboolean, ilo: ::std::os::raw::c_int,
                         mflag: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn find_interv_vec(xt: *mut ::std::os::raw::c_double,
                           n: *mut ::std::os::raw::c_int,
                           x: *mut ::std::os::raw::c_double,
                           nx: *mut ::std::os::raw::c_int,
                           rightmost_closed: *mut ::std::os::raw::c_int,
                           all_inside: *mut ::std::os::raw::c_int,
                           indx: *mut ::std::os::raw::c_int);
    pub fn R_max_col(matrix: *mut ::std::os::raw::c_double,
                     nr: *mut ::std::os::raw::c_int,
                     nc: *mut ::std::os::raw::c_int,
                     maxes: *mut ::std::os::raw::c_int,
                     ties_meth: *mut ::std::os::raw::c_int);
    pub fn Rprintf(arg1: *const ::std::os::raw::c_char, ...);
    pub fn REprintf(arg1: *const ::std::os::raw::c_char, ...);
    pub fn Rvprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list);
    pub fn REvprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list);
    pub fn R_BadLongVector(arg1: SEXP, arg2: *const ::std::os::raw::c_char,
                           arg3: ::std::os::raw::c_int) -> R_len_t;
    pub fn ATTRIB(x: SEXP) -> SEXP;
    pub fn OBJECT(x: SEXP) -> ::std::os::raw::c_int;
    pub fn MARK(x: SEXP) -> ::std::os::raw::c_int;
    pub fn TYPEOF(x: SEXP) -> ::std::os::raw::c_int;
    pub fn NAMED(x: SEXP) -> ::std::os::raw::c_int;
    pub fn REFCNT(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SET_OBJECT(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_TYPEOF(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_NAMED(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_ATTRIB(x: SEXP, v: SEXP);
    pub fn DUPLICATE_ATTRIB(to: SEXP, from: SEXP);
    pub fn SHALLOW_DUPLICATE_ATTRIB(to: SEXP, from: SEXP);
    pub fn IS_S4_OBJECT(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SET_S4_OBJECT(x: SEXP);
    pub fn UNSET_S4_OBJECT(x: SEXP);
    pub fn LENGTH(x: SEXP) -> ::std::os::raw::c_int;
    pub fn TRUELENGTH(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SETLENGTH(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_TRUELENGTH(x: SEXP, v: ::std::os::raw::c_int);
    pub fn XLENGTH(x: SEXP) -> R_xlen_t;
    pub fn XTRUELENGTH(x: SEXP) -> R_xlen_t;
    pub fn IS_LONG_VEC(x: SEXP) -> ::std::os::raw::c_int;
    pub fn LEVELS(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SETLEVELS(x: SEXP, v: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn LOGICAL(x: SEXP) -> *mut ::std::os::raw::c_int;
    pub fn INTEGER(x: SEXP) -> *mut ::std::os::raw::c_int;
    pub fn RAW(x: SEXP) -> *mut Rbyte;
    pub fn REAL(x: SEXP) -> *mut ::std::os::raw::c_double;
    pub fn COMPLEX(x: SEXP) -> *mut Rcomplex;
    pub fn STRING_ELT(x: SEXP, i: R_xlen_t) -> SEXP;
    pub fn VECTOR_ELT(x: SEXP, i: R_xlen_t) -> SEXP;
    pub fn SET_STRING_ELT(x: SEXP, i: R_xlen_t, v: SEXP);
    pub fn SET_VECTOR_ELT(x: SEXP, i: R_xlen_t, v: SEXP) -> SEXP;
    pub fn STRING_PTR(x: SEXP) -> *mut SEXP;
    pub fn VECTOR_PTR(x: SEXP) -> *mut SEXP;
    pub fn TAG(e: SEXP) -> SEXP;
    pub fn CAR(e: SEXP) -> SEXP;
    pub fn CDR(e: SEXP) -> SEXP;
    pub fn CAAR(e: SEXP) -> SEXP;
    pub fn CDAR(e: SEXP) -> SEXP;
    pub fn CADR(e: SEXP) -> SEXP;
    pub fn CDDR(e: SEXP) -> SEXP;
    pub fn CDDDR(e: SEXP) -> SEXP;
    pub fn CADDR(e: SEXP) -> SEXP;
    pub fn CADDDR(e: SEXP) -> SEXP;
    pub fn CAD4R(e: SEXP) -> SEXP;
    pub fn MISSING(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SET_MISSING(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_TAG(x: SEXP, y: SEXP);
    pub fn SETCAR(x: SEXP, y: SEXP) -> SEXP;
    pub fn SETCDR(x: SEXP, y: SEXP) -> SEXP;
    pub fn SETCADR(x: SEXP, y: SEXP) -> SEXP;
    pub fn SETCADDR(x: SEXP, y: SEXP) -> SEXP;
    pub fn SETCADDDR(x: SEXP, y: SEXP) -> SEXP;
    pub fn SETCAD4R(e: SEXP, y: SEXP) -> SEXP;
    pub fn CONS_NR(a: SEXP, b: SEXP) -> SEXP;
    pub fn FORMALS(x: SEXP) -> SEXP;
    pub fn BODY(x: SEXP) -> SEXP;
    pub fn CLOENV(x: SEXP) -> SEXP;
    pub fn RDEBUG(x: SEXP) -> ::std::os::raw::c_int;
    pub fn RSTEP(x: SEXP) -> ::std::os::raw::c_int;
    pub fn RTRACE(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SET_RDEBUG(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_RSTEP(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_RTRACE(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_FORMALS(x: SEXP, v: SEXP);
    pub fn SET_BODY(x: SEXP, v: SEXP);
    pub fn SET_CLOENV(x: SEXP, v: SEXP);
    pub fn PRINTNAME(x: SEXP) -> SEXP;
    pub fn SYMVALUE(x: SEXP) -> SEXP;
    pub fn INTERNAL(x: SEXP) -> SEXP;
    pub fn DDVAL(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SET_DDVAL(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_PRINTNAME(x: SEXP, v: SEXP);
    pub fn SET_SYMVALUE(x: SEXP, v: SEXP);
    pub fn SET_INTERNAL(x: SEXP, v: SEXP);
    pub fn FRAME(x: SEXP) -> SEXP;
    pub fn ENCLOS(x: SEXP) -> SEXP;
    pub fn HASHTAB(x: SEXP) -> SEXP;
    pub fn ENVFLAGS(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SET_ENVFLAGS(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_FRAME(x: SEXP, v: SEXP);
    pub fn SET_ENCLOS(x: SEXP, v: SEXP);
    pub fn SET_HASHTAB(x: SEXP, v: SEXP);
    pub fn PRCODE(x: SEXP) -> SEXP;
    pub fn PRENV(x: SEXP) -> SEXP;
    pub fn PRVALUE(x: SEXP) -> SEXP;
    pub fn PRSEEN(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SET_PRSEEN(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_PRENV(x: SEXP, v: SEXP);
    pub fn SET_PRVALUE(x: SEXP, v: SEXP);
    pub fn SET_PRCODE(x: SEXP, v: SEXP);
    pub fn HASHASH(x: SEXP) -> ::std::os::raw::c_int;
    pub fn HASHVALUE(x: SEXP) -> ::std::os::raw::c_int;
    pub fn SET_HASHASH(x: SEXP, v: ::std::os::raw::c_int);
    pub fn SET_HASHVALUE(x: SEXP, v: ::std::os::raw::c_int);
    pub fn R_GetCurrentSrcref(arg1: ::std::os::raw::c_int) -> SEXP;
    pub fn R_GetSrcFilename(arg1: SEXP) -> SEXP;
    pub fn Rf_asChar(arg1: SEXP) -> SEXP;
    pub fn Rf_coerceVector(arg1: SEXP, arg2: SEXPTYPE) -> SEXP;
    pub fn Rf_PairToVectorList(x: SEXP) -> SEXP;
    pub fn Rf_VectorToPairList(x: SEXP) -> SEXP;
    pub fn Rf_asCharacterFactor(x: SEXP) -> SEXP;
    pub fn Rf_asLogical(x: SEXP) -> ::std::os::raw::c_int;
    pub fn Rf_asInteger(x: SEXP) -> ::std::os::raw::c_int;
    pub fn Rf_asReal(x: SEXP) -> ::std::os::raw::c_double;
    pub fn Rf_asComplex(x: SEXP) -> Rcomplex;
    pub fn Rf_acopy_string(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn Rf_addMissingVarsToNewEnv(arg1: SEXP, arg2: SEXP);
    pub fn Rf_alloc3DArray(arg1: SEXPTYPE, arg2: ::std::os::raw::c_int,
                           arg3: ::std::os::raw::c_int,
                           arg4: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_allocArray(arg1: SEXPTYPE, arg2: SEXP) -> SEXP;
    pub fn Rf_allocFormalsList2(sym1: SEXP, sym2: SEXP) -> SEXP;
    pub fn Rf_allocFormalsList3(sym1: SEXP, sym2: SEXP, sym3: SEXP) -> SEXP;
    pub fn Rf_allocFormalsList4(sym1: SEXP, sym2: SEXP, sym3: SEXP,
                                sym4: SEXP) -> SEXP;
    pub fn Rf_allocFormalsList5(sym1: SEXP, sym2: SEXP, sym3: SEXP,
                                sym4: SEXP, sym5: SEXP) -> SEXP;
    pub fn Rf_allocFormalsList6(sym1: SEXP, sym2: SEXP, sym3: SEXP,
                                sym4: SEXP, sym5: SEXP, sym6: SEXP) -> SEXP;
    pub fn Rf_allocMatrix(arg1: SEXPTYPE, arg2: ::std::os::raw::c_int,
                          arg3: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_allocList(arg1: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_allocS4Object() -> SEXP;
    pub fn Rf_allocSExp(arg1: SEXPTYPE) -> SEXP;
    pub fn Rf_allocVector3(arg1: SEXPTYPE, arg2: R_xlen_t,
                           arg3: *mut R_allocator_t) -> SEXP;
    pub fn Rf_any_duplicated(x: SEXP, from_last: Rboolean) -> R_xlen_t;
    pub fn Rf_any_duplicated3(x: SEXP, incomp: SEXP, from_last: Rboolean)
     -> R_xlen_t;
    pub fn Rf_applyClosure(arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP,
                           arg5: SEXP) -> SEXP;
    pub fn Rf_arraySubscript(arg1: ::std::os::raw::c_int, arg2: SEXP,
                             arg3: SEXP,
                             arg4:
                                 ::std::option::Option<extern "C" fn(arg1:
                                                                         SEXP,
                                                                     arg2:
                                                                         SEXP)
                                                           -> SEXP>,
                             arg5:
                                 ::std::option::Option<extern "C" fn(arg1:
                                                                         SEXP,
                                                                     arg2:
                                                                         ::std::os::raw::c_int)
                                                           -> SEXP>,
                             arg6: SEXP) -> SEXP;
    pub fn Rf_classgets(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_cons(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_copyMatrix(arg1: SEXP, arg2: SEXP, arg3: Rboolean);
    pub fn Rf_copyListMatrix(arg1: SEXP, arg2: SEXP, arg3: Rboolean);
    pub fn Rf_copyMostAttrib(arg1: SEXP, arg2: SEXP);
    pub fn Rf_copyVector(arg1: SEXP, arg2: SEXP);
    pub fn Rf_countContexts(arg1: ::std::os::raw::c_int,
                            arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn Rf_CreateTag(arg1: SEXP) -> SEXP;
    pub fn Rf_defineVar(arg1: SEXP, arg2: SEXP, arg3: SEXP);
    pub fn Rf_dimgets(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_dimnamesgets(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_DropDims(arg1: SEXP) -> SEXP;
    pub fn Rf_duplicate(arg1: SEXP) -> SEXP;
    pub fn Rf_shallow_duplicate(arg1: SEXP) -> SEXP;
    pub fn Rf_lazy_duplicate(arg1: SEXP) -> SEXP;
    pub fn Rf_duplicated(arg1: SEXP, arg2: Rboolean) -> SEXP;
    pub fn R_envHasNoSpecialSymbols(arg1: SEXP) -> Rboolean;
    pub fn Rf_eval(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_findFun(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_findVar(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_findVarInFrame(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_findVarInFrame3(arg1: SEXP, arg2: SEXP, arg3: Rboolean) -> SEXP;
    pub fn Rf_getAttrib(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_GetArrayDimnames(arg1: SEXP) -> SEXP;
    pub fn Rf_GetColNames(arg1: SEXP) -> SEXP;
    pub fn Rf_GetMatrixDimnames(arg1: SEXP, arg2: *mut SEXP, arg3: *mut SEXP,
                                arg4: *mut *const ::std::os::raw::c_char,
                                arg5: *mut *const ::std::os::raw::c_char);
    pub fn Rf_GetOption(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_GetOption1(arg1: SEXP) -> SEXP;
    pub fn Rf_GetOptionDigits() -> ::std::os::raw::c_int;
    pub fn Rf_GetOptionWidth() -> ::std::os::raw::c_int;
    pub fn Rf_GetRowNames(arg1: SEXP) -> SEXP;
    pub fn Rf_gsetVar(arg1: SEXP, arg2: SEXP, arg3: SEXP);
    pub fn Rf_install(arg1: *const ::std::os::raw::c_char) -> SEXP;
    pub fn Rf_installChar(arg1: SEXP) -> SEXP;
    pub fn Rf_installDDVAL(i: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_installS3Signature(arg1: *const ::std::os::raw::c_char,
                                 arg2: *const ::std::os::raw::c_char) -> SEXP;
    pub fn Rf_isFree(arg1: SEXP) -> Rboolean;
    pub fn Rf_isOrdered(arg1: SEXP) -> Rboolean;
    pub fn Rf_isUnmodifiedSpecSym(sym: SEXP, env: SEXP) -> Rboolean;
    pub fn Rf_isUnordered(arg1: SEXP) -> Rboolean;
    pub fn Rf_isUnsorted(arg1: SEXP, arg2: Rboolean) -> Rboolean;
    pub fn Rf_lengthgets(arg1: SEXP, arg2: R_len_t) -> SEXP;
    pub fn Rf_xlengthgets(arg1: SEXP, arg2: R_xlen_t) -> SEXP;
    pub fn R_lsInternal(arg1: SEXP, arg2: Rboolean) -> SEXP;
    pub fn R_lsInternal3(arg1: SEXP, arg2: Rboolean, arg3: Rboolean) -> SEXP;
    pub fn Rf_match(arg1: SEXP, arg2: SEXP, arg3: ::std::os::raw::c_int)
     -> SEXP;
    pub fn Rf_matchE(arg1: SEXP, arg2: SEXP, arg3: ::std::os::raw::c_int,
                     arg4: SEXP) -> SEXP;
    pub fn Rf_namesgets(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_mkChar(arg1: *const ::std::os::raw::c_char) -> SEXP;
    pub fn Rf_mkCharLen(arg1: *const ::std::os::raw::c_char,
                        arg2: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_NonNullStringMatch(arg1: SEXP, arg2: SEXP) -> Rboolean;
    pub fn Rf_ncols(arg1: SEXP) -> ::std::os::raw::c_int;
    pub fn Rf_nrows(arg1: SEXP) -> ::std::os::raw::c_int;
    pub fn Rf_nthcdr(arg1: SEXP, arg2: ::std::os::raw::c_int) -> SEXP;
    pub fn R_nchar(string: SEXP, type_: nchar_type, allowNA: Rboolean,
                   keepNA: Rboolean, msg_name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn Rf_pmatch(arg1: SEXP, arg2: SEXP, arg3: Rboolean) -> Rboolean;
    pub fn Rf_psmatch(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char, arg3: Rboolean)
     -> Rboolean;
    pub fn Rf_PrintValue(arg1: SEXP);
    pub fn Rf_readS3VarsFromFrame(arg1: SEXP, arg2: *mut SEXP,
                                  arg3: *mut SEXP, arg4: *mut SEXP,
                                  arg5: *mut SEXP, arg6: *mut SEXP,
                                  arg7: *mut SEXP);
    pub fn Rf_setAttrib(arg1: SEXP, arg2: SEXP, arg3: SEXP) -> SEXP;
    pub fn Rf_setSVector(arg1: *mut SEXP, arg2: ::std::os::raw::c_int,
                         arg3: SEXP);
    pub fn Rf_setVar(arg1: SEXP, arg2: SEXP, arg3: SEXP);
    pub fn Rf_stringSuffix(arg1: SEXP, arg2: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_str2type(arg1: *const ::std::os::raw::c_char) -> SEXPTYPE;
    pub fn Rf_StringBlank(arg1: SEXP) -> Rboolean;
    pub fn Rf_substitute(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_translateChar(arg1: SEXP) -> *const ::std::os::raw::c_char;
    pub fn Rf_translateChar0(arg1: SEXP) -> *const ::std::os::raw::c_char;
    pub fn Rf_translateCharUTF8(arg1: SEXP) -> *const ::std::os::raw::c_char;
    pub fn Rf_type2char(arg1: SEXPTYPE) -> *const ::std::os::raw::c_char;
    pub fn Rf_type2rstr(arg1: SEXPTYPE) -> SEXP;
    pub fn Rf_type2str(arg1: SEXPTYPE) -> SEXP;
    pub fn Rf_type2str_nowarn(arg1: SEXPTYPE) -> SEXP;
    pub fn Rf_unprotect_ptr(arg1: SEXP);
    pub fn R_signal_protect_error();
    pub fn R_signal_unprotect_error();
    pub fn R_signal_reprotect_error(i: PROTECT_INDEX);
    pub fn R_tryEval(arg1: SEXP, arg2: SEXP, arg3: *mut ::std::os::raw::c_int)
     -> SEXP;
    pub fn R_tryEvalSilent(arg1: SEXP, arg2: SEXP,
                           arg3: *mut ::std::os::raw::c_int) -> SEXP;
    pub fn R_curErrorBuf() -> *const ::std::os::raw::c_char;
    pub fn Rf_isS4(arg1: SEXP) -> Rboolean;
    pub fn Rf_asS4(arg1: SEXP, arg2: Rboolean, arg3: ::std::os::raw::c_int)
     -> SEXP;
    pub fn Rf_S3Class(arg1: SEXP) -> SEXP;
    pub fn Rf_isBasicClass(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn R_cycle_detected(s: SEXP, child: SEXP) -> Rboolean;
    pub fn Rf_getCharCE(arg1: SEXP) -> cetype_t;
    pub fn Rf_mkCharCE(arg1: *const ::std::os::raw::c_char, arg2: cetype_t)
     -> SEXP;
    pub fn Rf_mkCharLenCE(arg1: *const ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int, arg3: cetype_t)
     -> SEXP;
    pub fn Rf_reEnc(x: *const ::std::os::raw::c_char, ce_in: cetype_t,
                    ce_out: cetype_t, subst: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn R_forceAndCall(e: SEXP, n: ::std::os::raw::c_int, rho: SEXP)
     -> SEXP;
    pub fn R_MakeExternalPtr(p: *mut ::std::os::raw::c_void, tag: SEXP,
                             prot: SEXP) -> SEXP;
    pub fn R_ExternalPtrAddr(s: SEXP) -> *mut ::std::os::raw::c_void;
    pub fn R_ExternalPtrTag(s: SEXP) -> SEXP;
    pub fn R_ExternalPtrProtected(s: SEXP) -> SEXP;
    pub fn R_ClearExternalPtr(s: SEXP);
    pub fn R_SetExternalPtrAddr(s: SEXP, p: *mut ::std::os::raw::c_void);
    pub fn R_SetExternalPtrTag(s: SEXP, tag: SEXP);
    pub fn R_SetExternalPtrProtected(s: SEXP, p: SEXP);
    pub fn R_RegisterFinalizer(s: SEXP, fun: SEXP);
    pub fn R_RegisterCFinalizer(s: SEXP, fun: R_CFinalizer_t);
    pub fn R_RegisterFinalizerEx(s: SEXP, fun: SEXP, onexit: Rboolean);
    pub fn R_RegisterCFinalizerEx(s: SEXP, fun: R_CFinalizer_t,
                                  onexit: Rboolean);
    pub fn R_RunPendingFinalizers();
    pub fn R_MakeWeakRef(key: SEXP, val: SEXP, fin: SEXP, onexit: Rboolean)
     -> SEXP;
    pub fn R_MakeWeakRefC(key: SEXP, val: SEXP, fin: R_CFinalizer_t,
                          onexit: Rboolean) -> SEXP;
    pub fn R_WeakRefKey(w: SEXP) -> SEXP;
    pub fn R_WeakRefValue(w: SEXP) -> SEXP;
    pub fn R_RunWeakRefFinalizer(w: SEXP);
    pub fn R_PromiseExpr(arg1: SEXP) -> SEXP;
    pub fn R_ClosureExpr(arg1: SEXP) -> SEXP;
    pub fn R_initialize_bcode();
    pub fn R_bcEncode(arg1: SEXP) -> SEXP;
    pub fn R_bcDecode(arg1: SEXP) -> SEXP;
    pub fn R_ToplevelExec(fun:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut ::std::os::raw::c_void)>,
                          data: *mut ::std::os::raw::c_void) -> Rboolean;
    pub fn R_ExecWithCleanup(fun:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut ::std::os::raw::c_void)
                                                           -> SEXP>,
                             data: *mut ::std::os::raw::c_void,
                             cleanfun:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut ::std::os::raw::c_void)>,
                             cleandata: *mut ::std::os::raw::c_void) -> SEXP;
    pub fn R_RestoreHashCount(rho: SEXP);
    pub fn R_IsPackageEnv(rho: SEXP) -> Rboolean;
    pub fn R_PackageEnvName(rho: SEXP) -> SEXP;
    pub fn R_FindPackageEnv(info: SEXP) -> SEXP;
    pub fn R_IsNamespaceEnv(rho: SEXP) -> Rboolean;
    pub fn R_NamespaceEnvSpec(rho: SEXP) -> SEXP;
    pub fn R_FindNamespace(info: SEXP) -> SEXP;
    pub fn R_LockEnvironment(env: SEXP, bindings: Rboolean);
    pub fn R_EnvironmentIsLocked(env: SEXP) -> Rboolean;
    pub fn R_LockBinding(sym: SEXP, env: SEXP);
    pub fn R_unLockBinding(sym: SEXP, env: SEXP);
    pub fn R_MakeActiveBinding(sym: SEXP, fun: SEXP, env: SEXP);
    pub fn R_BindingIsLocked(sym: SEXP, env: SEXP) -> Rboolean;
    pub fn R_BindingIsActive(sym: SEXP, env: SEXP) -> Rboolean;
    pub fn R_HasFancyBindings(rho: SEXP) -> Rboolean;
    pub fn Rf_errorcall(arg1: SEXP, arg2: *const ::std::os::raw::c_char, ...);
    pub fn Rf_warningcall(arg1: SEXP,
                          arg2: *const ::std::os::raw::c_char, ...);
    pub fn Rf_warningcall_immediate(arg1: SEXP,
                                    arg2: *const ::std::os::raw::c_char, ...);
    pub fn R_XDREncodeDouble(d: ::std::os::raw::c_double,
                             buf: *mut ::std::os::raw::c_void);
    pub fn R_XDRDecodeDouble(buf: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_double;
    pub fn R_XDREncodeInteger(i: ::std::os::raw::c_int,
                              buf: *mut ::std::os::raw::c_void);
    pub fn R_XDRDecodeInteger(buf: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn R_InitInPStream(stream: R_inpstream_t, data: R_pstream_data_t,
                           _type: R_pstream_format_t,
                           inchar:
                               ::std::option::Option<extern "C" fn(arg1:
                                                                       R_inpstream_t)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           inbytes:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              R_inpstream_t,
                                                                          arg2:
                                                                              *mut ::std::os::raw::c_void,
                                                                          arg3:
                                                                              ::std::os::raw::c_int)>,
                           phook:
                               ::std::option::Option<extern "C" fn(arg1: SEXP,
                                                                   arg2: SEXP)
                                                         -> SEXP>,
                           pdata: SEXP);
    pub fn R_InitOutPStream(stream: R_outpstream_t, data: R_pstream_data_t,
                            _type: R_pstream_format_t,
                            version: ::std::os::raw::c_int,
                            outchar:
                                ::std::option::Option<extern "C" fn(arg1:
                                                                        R_outpstream_t,
                                                                    arg2:
                                                                        ::std::os::raw::c_int)>,
                            outbytes:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               R_outpstream_t,
                                                                           arg2:
                                                                               *mut ::std::os::raw::c_void,
                                                                           arg3:
                                                                               ::std::os::raw::c_int)>,
                            phook:
                                ::std::option::Option<extern "C" fn(arg1:
                                                                        SEXP,
                                                                    arg2:
                                                                        SEXP)
                                                          -> SEXP>,
                            pdata: SEXP);
    pub fn R_InitFileInPStream(stream: R_inpstream_t, fp: *mut FILE,
                               _type: R_pstream_format_t,
                               phook:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           SEXP,
                                                                       arg2:
                                                                           SEXP)
                                                             -> SEXP>,
                               pdata: SEXP);
    pub fn R_InitFileOutPStream(stream: R_outpstream_t, fp: *mut FILE,
                                _type: R_pstream_format_t,
                                version: ::std::os::raw::c_int,
                                phook:
                                    ::std::option::Option<extern "C" fn(arg1:
                                                                            SEXP,
                                                                        arg2:
                                                                            SEXP)
                                                              -> SEXP>,
                                pdata: SEXP);
    pub fn R_Serialize(s: SEXP, ops: R_outpstream_t);
    pub fn R_Unserialize(ips: R_inpstream_t) -> SEXP;
    pub fn R_do_slot(obj: SEXP, name: SEXP) -> SEXP;
    pub fn R_do_slot_assign(obj: SEXP, name: SEXP, value: SEXP) -> SEXP;
    pub fn R_has_slot(obj: SEXP, name: SEXP) -> ::std::os::raw::c_int;
    pub fn R_S4_extends(klass: SEXP, useTable: SEXP) -> SEXP;
    pub fn R_do_MAKE_CLASS(what: *const ::std::os::raw::c_char) -> SEXP;
    pub fn R_getClassDef(what: *const ::std::os::raw::c_char) -> SEXP;
    pub fn R_getClassDef_R(what: SEXP) -> SEXP;
    pub fn R_has_methods_attached() -> Rboolean;
    pub fn R_isVirtualClass(class_def: SEXP, env: SEXP) -> Rboolean;
    pub fn R_extends(class1: SEXP, class2: SEXP, env: SEXP) -> Rboolean;
    pub fn R_do_new_object(class_def: SEXP) -> SEXP;
    pub fn R_check_class_and_super(x: SEXP,
                                   valid: *mut *const ::std::os::raw::c_char,
                                   rho: SEXP) -> ::std::os::raw::c_int;
    pub fn R_check_class_etc(x: SEXP,
                             valid: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn R_PreserveObject(arg1: SEXP);
    pub fn R_ReleaseObject(arg1: SEXP);
    pub fn R_dot_Last();
    pub fn R_RunExitFinalizers();
    pub fn R_system(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn R_compute_identical(arg1: SEXP, arg2: SEXP,
                               arg3: ::std::os::raw::c_int) -> Rboolean;
    pub fn R_orderVector(indx: *mut ::std::os::raw::c_int,
                         n: ::std::os::raw::c_int, arglist: SEXP,
                         nalast: Rboolean, decreasing: Rboolean);
    pub fn R_orderVector1(indx: *mut ::std::os::raw::c_int,
                          n: ::std::os::raw::c_int, x: SEXP, nalast: Rboolean,
                          decreasing: Rboolean);
    pub fn Rf_allocVector(arg1: SEXPTYPE, arg2: R_xlen_t) -> SEXP;
    pub fn Rf_conformable(arg1: SEXP, arg2: SEXP) -> Rboolean;
    pub fn Rf_elt(arg1: SEXP, arg2: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_inherits(arg1: SEXP, arg2: *const ::std::os::raw::c_char)
     -> Rboolean;
    pub fn Rf_isArray(arg1: SEXP) -> Rboolean;
    pub fn Rf_isFactor(arg1: SEXP) -> Rboolean;
    pub fn Rf_isFrame(arg1: SEXP) -> Rboolean;
    pub fn Rf_isFunction(arg1: SEXP) -> Rboolean;
    pub fn Rf_isInteger(arg1: SEXP) -> Rboolean;
    pub fn Rf_isLanguage(arg1: SEXP) -> Rboolean;
    pub fn Rf_isList(arg1: SEXP) -> Rboolean;
    pub fn Rf_isMatrix(arg1: SEXP) -> Rboolean;
    pub fn Rf_isNewList(arg1: SEXP) -> Rboolean;
    pub fn Rf_isNumber(arg1: SEXP) -> Rboolean;
    pub fn Rf_isNumeric(arg1: SEXP) -> Rboolean;
    pub fn Rf_isPairList(arg1: SEXP) -> Rboolean;
    pub fn Rf_isPrimitive(arg1: SEXP) -> Rboolean;
    pub fn Rf_isTs(arg1: SEXP) -> Rboolean;
    pub fn Rf_isUserBinop(arg1: SEXP) -> Rboolean;
    pub fn Rf_isValidString(arg1: SEXP) -> Rboolean;
    pub fn Rf_isValidStringF(arg1: SEXP) -> Rboolean;
    pub fn Rf_isVector(arg1: SEXP) -> Rboolean;
    pub fn Rf_isVectorAtomic(arg1: SEXP) -> Rboolean;
    pub fn Rf_isVectorList(arg1: SEXP) -> Rboolean;
    pub fn Rf_isVectorizable(arg1: SEXP) -> Rboolean;
    pub fn Rf_lang1(arg1: SEXP) -> SEXP;
    pub fn Rf_lang2(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_lang3(arg1: SEXP, arg2: SEXP, arg3: SEXP) -> SEXP;
    pub fn Rf_lang4(arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP) -> SEXP;
    pub fn Rf_lang5(arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP,
                    arg5: SEXP) -> SEXP;
    pub fn Rf_lang6(arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP,
                    arg5: SEXP, arg6: SEXP) -> SEXP;
    pub fn Rf_lastElt(arg1: SEXP) -> SEXP;
    pub fn Rf_lcons(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_length(arg1: SEXP) -> R_len_t;
    pub fn Rf_list1(arg1: SEXP) -> SEXP;
    pub fn Rf_list2(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_list3(arg1: SEXP, arg2: SEXP, arg3: SEXP) -> SEXP;
    pub fn Rf_list4(arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP) -> SEXP;
    pub fn Rf_list5(arg1: SEXP, arg2: SEXP, arg3: SEXP, arg4: SEXP,
                    arg5: SEXP) -> SEXP;
    pub fn Rf_listAppend(arg1: SEXP, arg2: SEXP) -> SEXP;
    pub fn Rf_mkNamed(arg1: SEXPTYPE,
                      arg2: *mut *const ::std::os::raw::c_char) -> SEXP;
    pub fn Rf_mkString(arg1: *const ::std::os::raw::c_char) -> SEXP;
    pub fn Rf_nlevels(arg1: SEXP) -> ::std::os::raw::c_int;
    pub fn Rf_stringPositionTr(arg1: SEXP,
                               arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn Rf_ScalarComplex(arg1: Rcomplex) -> SEXP;
    pub fn Rf_ScalarInteger(arg1: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_ScalarLogical(arg1: ::std::os::raw::c_int) -> SEXP;
    pub fn Rf_ScalarRaw(arg1: Rbyte) -> SEXP;
    pub fn Rf_ScalarReal(arg1: ::std::os::raw::c_double) -> SEXP;
    pub fn Rf_ScalarString(arg1: SEXP) -> SEXP;
    pub fn Rf_xlength(arg1: SEXP) -> R_xlen_t;
    pub fn Rf_protect(arg1: SEXP) -> SEXP;
    pub fn Rf_unprotect(arg1: ::std::os::raw::c_int);
    pub fn R_ProtectWithIndex(arg1: SEXP, arg2: *mut PROTECT_INDEX);
    pub fn R_Reprotect(arg1: SEXP, arg2: PROTECT_INDEX);
    pub fn R_FixupRHS(x: SEXP, y: SEXP) -> SEXP;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint,
                     __buf: *mut Struct_random_data) -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut Struct_random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut Struct_random_data)
     -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn GetRNGstate();
    pub fn PutRNGstate();
    pub fn unif_rand() -> ::std::os::raw::c_double;
    pub fn norm_rand() -> ::std::os::raw::c_double;
    pub fn exp_rand() -> ::std::os::raw::c_double;
    pub fn user_unif_rand() -> *mut ::std::os::raw::c_double;
    pub fn user_unif_init(arg1: Int32);
    pub fn user_unif_nseed() -> *mut ::std::os::raw::c_int;
    pub fn user_unif_seedloc() -> *mut ::std::os::raw::c_int;
    pub fn user_norm_rand() -> *mut ::std::os::raw::c_double;
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> size_t;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char) -> size_t;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char) -> size_t;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> size_t;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn R_chk_calloc(arg1: size_t, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn R_chk_realloc(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn R_chk_free(arg1: *mut ::std::os::raw::c_void);
    pub fn call_R(arg1: *mut ::std::os::raw::c_char,
                  arg2: ::std::os::raw::c_long,
                  arg3: *mut *mut ::std::os::raw::c_void,
                  arg4: *mut *mut ::std::os::raw::c_char,
                  arg5: *mut ::std::os::raw::c_long,
                  arg6: *mut *mut ::std::os::raw::c_char,
                  arg7: ::std::os::raw::c_long,
                  arg8: *mut *mut ::std::os::raw::c_char);
    pub fn R_FlushConsole();
    pub fn R_ProcessEvents();
    pub fn R_ParseVector(arg1: SEXP, arg2: ::std::os::raw::c_int,
                         arg3: *mut ParseStatus, arg4: SEXP) -> SEXP;
    pub fn R_registerRoutines(info: *mut DllInfo,
                              croutines: *const R_CMethodDef,
                              callRoutines: *const R_CallMethodDef,
                              fortranRoutines: *const R_FortranMethodDef,
                              externalRoutines: *const R_ExternalMethodDef)
     -> ::std::os::raw::c_int;
    pub fn R_useDynamicSymbols(info: *mut DllInfo, value: Rboolean)
     -> Rboolean;
    pub fn R_forceSymbols(info: *mut DllInfo, value: Rboolean) -> Rboolean;
    pub fn R_getDllInfo(name: *const ::std::os::raw::c_char) -> *mut DllInfo;
    pub fn R_getEmbeddingDllInfo() -> *mut DllInfo;
    pub fn R_FindSymbol(arg1: *const ::std::os::raw::c_char,
                        arg2: *const ::std::os::raw::c_char,
                        symbol: *mut R_RegisteredNativeSymbol) -> DL_FUNC;
    pub fn R_RegisterCCallable(package: *const ::std::os::raw::c_char,
                               name: *const ::std::os::raw::c_char,
                               fptr: DL_FUNC);
    pub fn R_GetCCallable(package: *const ::std::os::raw::c_char,
                          name: *const ::std::os::raw::c_char) -> DL_FUNC;
    pub fn GA_initapp(arg1: ::std::os::raw::c_int,
                      arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_exitapp();
    pub fn GA_drawall();
    pub fn GA_peekevent() -> ::std::os::raw::c_int;
    pub fn GA_waitevent();
    pub fn GA_doevent() -> ::std::os::raw::c_int;
    pub fn mainloop();
    pub fn GA_execapp(cmd: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_newpoint(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int)
     -> point;
    pub fn GA_newrect(left: ::std::os::raw::c_int, top: ::std::os::raw::c_int,
                      width: ::std::os::raw::c_int,
                      height: ::std::os::raw::c_int) -> rect;
    pub fn GA_rpt(min: point, max: point) -> rect;
    pub fn GA_topleft(r: rect) -> point;
    pub fn GA_bottomright(r: rect) -> point;
    pub fn GA_topright(r: rect) -> point;
    pub fn GA_bottomleft(r: rect) -> point;
    pub fn GA_addpt(p1: point, p2: point) -> point;
    pub fn GA_subpt(p1: point, p2: point) -> point;
    pub fn GA_midpt(p1: point, p2: point) -> point;
    pub fn GA_mulpt(p1: point, i: ::std::os::raw::c_int) -> point;
    pub fn GA_divpt(p1: point, i: ::std::os::raw::c_int) -> point;
    pub fn GA_rmove(r: rect, p: point) -> rect;
    pub fn GA_raddpt(r: rect, p: point) -> rect;
    pub fn GA_rsubpt(r: rect, p: point) -> rect;
    pub fn GA_rmul(r: rect, i: ::std::os::raw::c_int) -> rect;
    pub fn GA_rdiv(r: rect, i: ::std::os::raw::c_int) -> rect;
    pub fn GA_growr(r: rect, w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int) -> rect;
    pub fn GA_insetr(r: rect, i: ::std::os::raw::c_int) -> rect;
    pub fn GA_rcenter(r1: rect, r2: rect) -> rect;
    pub fn GA_ptinr(p: point, r: rect) -> ::std::os::raw::c_int;
    pub fn GA_rinr(r1: rect, r2: rect) -> ::std::os::raw::c_int;
    pub fn GA_rxr(r1: rect, r2: rect) -> ::std::os::raw::c_int;
    pub fn GA_equalpt(p1: point, p2: point) -> ::std::os::raw::c_int;
    pub fn GA_equalr(r1: rect, r2: rect) -> ::std::os::raw::c_int;
    pub fn GA_clipr(r1: rect, r2: rect) -> rect;
    pub fn GA_rcanon(r: rect) -> rect;
    pub fn GA_setrgb(c: rgb);
    pub fn GA_addto(dest: control);
    pub fn GA_drawto(dest: drawing);
    pub fn GA_setlinewidth(width: ::std::os::raw::c_int);
    pub fn GA_setdrawmode(mode: ::std::os::raw::c_int);
    pub fn GA_bitblt(dest: drawing, src: drawing, dp: point, sr: rect,
                     mode: ::std::os::raw::c_int);
    pub fn GA_scrollrect(dp: point, sr: rect);
    pub fn GA_copyrect(src: drawing, dp: point, sr: rect);
    pub fn GA_texturerect(src: drawing, r: rect);
    pub fn GA_invertrect(r: rect);
    pub fn GA_getpixel(p: point) -> rgb;
    pub fn GA_setpixel(p: point, c: rgb);
    pub fn GA_moveto(p: point);
    pub fn GA_lineto(p: point);
    pub fn GA_drawpoint(p: point);
    pub fn GA_drawline(p1: point, p2: point);
    pub fn GA_drawrect(r: rect);
    pub fn GA_fillrect(r: rect);
    pub fn GA_drawarc(r: rect, start_angle: ::std::os::raw::c_int,
                      end_angle: ::std::os::raw::c_int);
    pub fn GA_fillarc(r: rect, start_angle: ::std::os::raw::c_int,
                      end_angle: ::std::os::raw::c_int);
    pub fn GA_drawellipse(r: rect);
    pub fn GA_fillellipse(r: rect);
    pub fn GA_drawroundrect(r: rect);
    pub fn GA_fillroundrect(r: rect);
    pub fn GA_drawpolygon(p: *mut point, n: ::std::os::raw::c_int);
    pub fn GA_fillpolygon(p: *mut point, n: ::std::os::raw::c_int);
    pub fn GA_newfont(name: *const ::std::os::raw::c_char,
                      style: ::std::os::raw::c_int,
                      size: ::std::os::raw::c_int) -> font;
    pub fn GA_setfont(f: font);
    pub fn GA_fontwidth(f: font) -> ::std::os::raw::c_int;
    pub fn GA_fontheight(f: font) -> ::std::os::raw::c_int;
    pub fn GA_fontascent(f: font) -> ::std::os::raw::c_int;
    pub fn GA_fontdescent(f: font) -> ::std::os::raw::c_int;
    pub fn GA_strwidth(f: font, s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_strsize(f: font, s: *const ::std::os::raw::c_char) -> point;
    pub fn GA_strrect(f: font, s: *const ::std::os::raw::c_char) -> rect;
    pub fn GA_drawstr(p: point, str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_textheight(width: ::std::os::raw::c_int,
                         text: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_drawtext(r: rect, alignment: ::std::os::raw::c_int,
                       text: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn GA_gprintf(fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn GA_currentdrawing() -> drawing;
    pub fn GA_currentrgb() -> rgb;
    pub fn GA_currentmode() -> ::std::os::raw::c_int;
    pub fn GA_currentpoint() -> point;
    pub fn GA_currentlinewidth() -> ::std::os::raw::c_int;
    pub fn GA_currentfont() -> font;
    pub fn GA_currentcursor() -> cursor;
    pub fn GA_getkeystate() -> ::std::os::raw::c_int;
    pub fn GA_newbitmap(width: ::std::os::raw::c_int,
                        height: ::std::os::raw::c_int,
                        depth: ::std::os::raw::c_int) -> bitmap;
    pub fn GA_loadbitmap(name: *const ::std::os::raw::c_char) -> bitmap;
    pub fn GA_imagetobitmap(img: image) -> bitmap;
    pub fn GA_createbitmap(width: ::std::os::raw::c_int,
                           height: ::std::os::raw::c_int,
                           depth: ::std::os::raw::c_int, data: *mut GAbyte)
     -> bitmap;
    pub fn GA_setbitmapdata(b: bitmap, data: *mut GAbyte);
    pub fn GA_getbitmapdata(b: bitmap, data: *mut GAbyte);
    pub fn GA_getbitmapdata2(b: bitmap, data: *mut *mut GAbyte);
    pub fn GA_newimage(width: ::std::os::raw::c_int,
                       height: ::std::os::raw::c_int,
                       depth: ::std::os::raw::c_int) -> image;
    pub fn GA_copyimage(img: image) -> image;
    pub fn GA_delimage(img: image);
    pub fn GA_imagedepth(img: image) -> ::std::os::raw::c_int;
    pub fn GA_imagewidth(img: image) -> ::std::os::raw::c_int;
    pub fn GA_imageheight(img: image) -> ::std::os::raw::c_int;
    pub fn GA_setpixels(img: image, pixels: *mut GAbyte);
    pub fn GA_getpixels(img: image) -> *mut GAbyte;
    pub fn GA_setpalette(img: image, length: ::std::os::raw::c_int,
                         cmap: *mut rgb);
    pub fn GA_getpalette(img: image) -> *mut rgb;
    pub fn GA_getpalettesize(img: image) -> ::std::os::raw::c_int;
    pub fn GA_scaleimage(src: image, dr: rect, sr: rect) -> image;
    pub fn GA_convert32to8(img: image) -> image;
    pub fn GA_convert8to32(img: image) -> image;
    pub fn GA_sortpalette(img: image);
    pub fn GA_loadimage(filename: *const ::std::os::raw::c_char) -> image;
    pub fn GA_saveimage(img: image, filename: *const ::std::os::raw::c_char);
    pub fn GA_drawimage(img: image, dr: rect, sr: rect);
    pub fn GA_drawmonochrome(img: image, dr: rect, sr: rect);
    pub fn GA_drawgreyscale(img: image, dr: rect, sr: rect);
    pub fn GA_drawdarker(img: image, dr: rect, sr: rect);
    pub fn GA_drawbrighter(img: image, dr: rect, sr: rect);
    pub fn GA_newwindow(name: *const ::std::os::raw::c_char, r: rect,
                        flags: ::std::os::raw::c_long) -> window;
    pub fn GA_show(c: control);
    pub fn GA_hide(c: control);
    pub fn GA_GetCurrentWinPos(obj: window) -> rect;
    pub fn GA_objdepth(obj: objptr) -> ::std::os::raw::c_int;
    pub fn GA_objrect(obj: objptr) -> rect;
    pub fn GA_objwidth(obj: objptr) -> ::std::os::raw::c_int;
    pub fn GA_objheight(obj: objptr) -> ::std::os::raw::c_int;
    pub fn GA_delobj(obj: objptr);
    pub fn GA_setaction(c: control, _fn: actionfn);
    pub fn GA_sethit(c: control, _fn: intfn);
    pub fn GA_setdel(c: control, _fn: actionfn);
    pub fn GA_setclose(c: control, _fn: actionfn);
    pub fn GA_setredraw(c: control, _fn: drawfn);
    pub fn GA_setresize(c: control, _fn: drawfn);
    pub fn GA_setkeydown(c: control, _fn: keyfn);
    pub fn GA_setkeyaction(c: control, _fn: keyfn);
    pub fn GA_setmousedown(c: control, _fn: mousefn);
    pub fn GA_setmousedrag(c: control, _fn: mousefn);
    pub fn GA_setmouseup(c: control, _fn: mousefn);
    pub fn GA_setmousemove(c: control, _fn: mousefn);
    pub fn GA_setmouserepeat(c: control, _fn: mousefn);
    pub fn GA_setdrop(c: control, _fn: dropfn);
    pub fn GA_setonfocus(c: control, _fn: actionfn);
    pub fn GA_setim(c: control, _fn: imfn);
    pub fn GA_clear(c: control);
    pub fn GA_draw(c: control);
    pub fn GA_redraw(c: control);
    pub fn GA_resize(c: control, r: rect);
    pub fn GA_isvisible(c: control) -> ::std::os::raw::c_int;
    pub fn GA_enable(c: control);
    pub fn GA_disable(c: control);
    pub fn GA_isenabled(c: control) -> ::std::os::raw::c_int;
    pub fn GA_check(c: control);
    pub fn GA_uncheck(c: control);
    pub fn GA_ischecked(c: control) -> ::std::os::raw::c_int;
    pub fn GA_highlight(c: control);
    pub fn GA_unhighlight(c: control);
    pub fn GA_ishighlighted(c: control) -> ::std::os::raw::c_int;
    pub fn GA_flashcontrol(c: control);
    pub fn GA_activatecontrol(c: control);
    pub fn GA_settext(c: control, newtext: *const ::std::os::raw::c_char);
    pub fn GA_gettext(c: control) -> *mut ::std::os::raw::c_char;
    pub fn GA_settextfont(c: control, f: font);
    pub fn GA_gettextfont(c: control) -> font;
    pub fn GA_setforeground(c: control, fg: rgb);
    pub fn GA_getforeground(c: control) -> rgb;
    pub fn GA_setbackground(c: control, bg: rgb);
    pub fn GA_getbackground(c: control) -> rgb;
    pub fn GA_setvalue(c: control, value: ::std::os::raw::c_int);
    pub fn GA_getvalue(c: control) -> ::std::os::raw::c_int;
    pub fn GA_setdata(c: control, data: *mut ::std::os::raw::c_void);
    pub fn GA_getdata(c: control) -> *mut ::std::os::raw::c_void;
    pub fn GA_parentwindow(c: control) -> window;
    pub fn GA_newcontrol(text: *const ::std::os::raw::c_char, r: rect)
     -> control;
    pub fn GA_newdrawing(r: rect, _fn: drawfn) -> drawing;
    pub fn GA_newpicture(img: image, r: rect) -> drawing;
    pub fn GA_newbutton(text: *const ::std::os::raw::c_char, r: rect,
                        _fn: actionfn) -> button;
    pub fn GA_newimagebutton(img: image, r: rect, _fn: actionfn) -> button;
    pub fn GA_setimage(c: control, img: image);
    pub fn GA_newcheckbox(text: *const ::std::os::raw::c_char, r: rect,
                          _fn: actionfn) -> checkbox;
    pub fn GA_newimagecheckbox(img: image, r: rect, _fn: actionfn)
     -> checkbox;
    pub fn GA_newradiobutton(text: *const ::std::os::raw::c_char, r: rect,
                             _fn: actionfn) -> radiobutton;
    pub fn GA_newradiogroup() -> radiogroup;
    pub fn GA_newscrollbar(r: rect, max: ::std::os::raw::c_int,
                           pagesize: ::std::os::raw::c_int, _fn: scrollfn)
     -> scrollbar;
    pub fn GA_changescrollbar(s: scrollbar, _where: ::std::os::raw::c_int,
                              max: ::std::os::raw::c_int,
                              size: ::std::os::raw::c_int);
    pub fn GA_newlabel(text: *const ::std::os::raw::c_char, r: rect,
                       alignment: ::std::os::raw::c_int) -> label;
    pub fn GA_newfield(text: *const ::std::os::raw::c_char, r: rect) -> field;
    pub fn GA_newpassword(text: *const ::std::os::raw::c_char, r: rect)
     -> field;
    pub fn GA_newtextbox(text: *const ::std::os::raw::c_char, r: rect)
     -> textbox;
    pub fn GA_newtextarea(text: *const ::std::os::raw::c_char, r: rect)
     -> textbox;
    pub fn GA_newrichtextarea(text: *const ::std::os::raw::c_char, r: rect)
     -> textbox;
    pub fn GA_newlistbox(list: *mut *const ::std::os::raw::c_char, r: rect,
                         _fn: scrollfn, dble: actionfn) -> listbox;
    pub fn GA_newdroplist(list: *mut *const ::std::os::raw::c_char, r: rect,
                          _fn: scrollfn) -> listbox;
    pub fn GA_newdropfield(list: *mut *const ::std::os::raw::c_char, r: rect,
                           _fn: scrollfn) -> listbox;
    pub fn GA_newmultilist(list: *mut *const ::std::os::raw::c_char, r: rect,
                           _fn: scrollfn, dble: actionfn) -> listbox;
    pub fn GA_isselected(b: listbox, index: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn GA_setlistitem(b: listbox, index: ::std::os::raw::c_int);
    pub fn GA_getlistitem(b: listbox) -> ::std::os::raw::c_int;
    pub fn GA_changelistbox(b: listbox,
                            new_list: *mut *const ::std::os::raw::c_char);
    pub fn GA_newprogressbar(r: rect, pmin: ::std::os::raw::c_int,
                             pmax: ::std::os::raw::c_int,
                             incr: ::std::os::raw::c_int,
                             smooth: ::std::os::raw::c_int) -> progressbar;
    pub fn GA_setprogressbar(obj: progressbar, n: ::std::os::raw::c_int);
    pub fn GA_stepprogressbar(obj: progressbar, n: ::std::os::raw::c_int);
    pub fn GA_setprogressbarrange(obj: progressbar,
                                  pbmin: ::std::os::raw::c_int,
                                  pbmax: ::std::os::raw::c_int);
    pub fn GA_newmenubar(adjust_menus: actionfn) -> menubar;
    pub fn GA_newsubmenu(parent: menu, name: *const ::std::os::raw::c_char)
     -> menu;
    pub fn GA_newmenu(name: *const ::std::os::raw::c_char) -> menu;
    pub fn GA_newmenuitem(name: *const ::std::os::raw::c_char,
                          key: ::std::os::raw::c_int, _fn: menufn)
     -> menuitem;
    pub fn GA_undotext(t: textbox);
    pub fn GA_cuttext(t: textbox);
    pub fn GA_copytext(t: textbox);
    pub fn GA_cleartext(t: textbox);
    pub fn GA_pastetext(t: textbox);
    pub fn GA_inserttext(t: textbox, text: *const ::std::os::raw::c_char);
    pub fn GA_selecttext(t: textbox, start: ::std::os::raw::c_long,
                         end: ::std::os::raw::c_long);
    pub fn GA_textselection(t: textbox, start: *mut ::std::os::raw::c_long,
                            end: *mut ::std::os::raw::c_long);
    pub fn GA_apperror(errstr: *const ::std::os::raw::c_char);
    pub fn GA_askok(info: *const ::std::os::raw::c_char);
    pub fn GA_askokcancel(question: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_askyesno(question: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_askyesnocancel(question: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_askstring(question: *const ::std::os::raw::c_char,
                        default_string: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_askpassword(question: *const ::std::os::raw::c_char,
                          default_string: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_askfilename(title: *const ::std::os::raw::c_char,
                          default_name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_askfilenamewithdir(title: *const ::std::os::raw::c_char,
                                 default_name: *const ::std::os::raw::c_char,
                                 dir: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_askfilesave(title: *const ::std::os::raw::c_char,
                          default_name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_askUserPass(title: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_settimer(millisec: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn GA_settimerfn(timeout: timerfn, data: *mut ::std::os::raw::c_void);
    pub fn GA_setmousetimer(millisec: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn GA_delay(millisec: ::std::os::raw::c_uint);
    pub fn GA_currenttime() -> ::std::os::raw::c_long;
    pub fn GA_newcursor(hotspot: point, img: image) -> cursor;
    pub fn GA_createcursor(offset: point, white_mask: *mut GAbyte,
                           black_shape: *mut GAbyte) -> cursor;
    pub fn GA_loadcursor(name: *const ::std::os::raw::c_char) -> cursor;
    pub fn GA_setcursor(c: cursor);
    pub fn GA_copydrawstate() -> drawstate;
    pub fn GA_setdrawstate(saved_state: drawstate);
    pub fn GA_restoredrawstate(saved_state: drawstate);
    pub fn GA_resetdrawstate();
    pub fn GA_setcaret(c: control, x: ::std::os::raw::c_int,
                       y: ::std::os::raw::c_int, width: ::std::os::raw::c_int,
                       height: ::std::os::raw::c_int);
    pub fn GA_showcaret(c: control, showing: ::std::os::raw::c_int);
    pub fn GA_gamainloop();
    pub fn GA_gabeep();
    pub fn GA_appcleanup();
    pub fn GA_ismdi() -> ::std::os::raw::c_int;
    pub fn GA_isUnicodeWindow(c: control) -> ::std::os::raw::c_int;
    pub fn GA_isiconic(w: window) -> ::std::os::raw::c_int;
    pub fn GA_screen_coords(c: control) -> rect;
    pub fn GA_newmdimenu() -> menu;
    pub fn GA_newpopup(_fn: actionfn) -> popup;
    pub fn GA_gmenubar(_fn: actionfn, arg1: *mut MenuItem) -> menubar;
    pub fn GA_gpopup(_fn: actionfn, arg1: *mut MenuItem) -> popup;
    pub fn GA_gchangepopup(w: window, p: popup);
    pub fn GA_gchangemenubar(mb: menubar);
    pub fn GA_addtooltip(c: control, tp: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_addstatusbar() -> ::std::os::raw::c_int;
    pub fn GA_delstatusbar() -> ::std::os::raw::c_int;
    pub fn GA_setstatus(text: *const ::std::os::raw::c_char);
    pub fn GA_setuserfilter(arg1: *const ::std::os::raw::c_char);
    pub fn GA_askchangedir();
    pub fn GA_askcdstring(question: *const ::std::os::raw::c_char,
                          default_string: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_askfilesavewithdir(title: *const ::std::os::raw::c_char,
                                 default_name: *const ::std::os::raw::c_char,
                                 dir: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_askfilenames(title: *const ::std::os::raw::c_char,
                           default_name: *const ::std::os::raw::c_char,
                           multi: ::std::os::raw::c_int,
                           filters: *const ::std::os::raw::c_char,
                           filterindex: ::std::os::raw::c_int,
                           strbuf: *mut ::std::os::raw::c_char,
                           bufsize: ::std::os::raw::c_int,
                           dir: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn GA_countFilenames(strbuf: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setuserfilterW(arg1: *const wchar_t);
    pub fn askfilenameW(title: *const ::std::os::raw::c_char,
                        default_name: *const ::std::os::raw::c_char)
     -> *mut wchar_t;
    pub fn askfilenamesW(title: *const wchar_t, default_name: *const wchar_t,
                         multi: ::std::os::raw::c_int,
                         filters: *const wchar_t,
                         filterindex: ::std::os::raw::c_int,
                         dir: *const wchar_t) -> *mut wchar_t;
    pub fn askfilesaveW(title: *const ::std::os::raw::c_char,
                        default_name: *const ::std::os::raw::c_char)
     -> *mut wchar_t;
    pub fn GA_nametorgb(colourname: *const ::std::os::raw::c_char) -> rgb;
    pub fn GA_rgbtoname(_in: rgb) -> *const ::std::os::raw::c_char;
    pub fn GA_rgbtonum(_in: rgb) -> ::std::os::raw::c_int;
    pub fn GA_myGetSysColor(arg1: ::std::os::raw::c_int) -> rgb;
    pub fn GA_dialog_bg() -> rgb;
    pub fn GA_copytoclipboard(src: drawing);
    pub fn GA_copystringtoclipboard(str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_getstringfromclipboard(str: *mut ::std::os::raw::c_char,
                                     n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn GA_clipboardhastext() -> ::std::os::raw::c_int;
    pub fn GA_bitmaptoimage(bm: bitmap) -> image;
    pub fn GA_newprinter(w: ::std::os::raw::c_double,
                         h: ::std::os::raw::c_double,
                         name: *const ::std::os::raw::c_char) -> printer;
    pub fn GA_nextpage(p: printer);
    pub fn GA_newmetafile(name: *const ::std::os::raw::c_char,
                          width: ::std::os::raw::c_double,
                          height: ::std::os::raw::c_double) -> metafile;
    pub fn GA_ggetcliprect(d: drawing) -> rect;
    pub fn GA_gsetcliprect(d: drawing, r: rect);
    pub fn GA_gbitblt(db: bitmap, sb: bitmap, p: point, r: rect);
    pub fn GA_gscroll(d: drawing, dp: point, r: rect);
    pub fn GA_ginvert(d: drawing, r: rect);
    pub fn GA_ggetpixel(d: drawing, p: point) -> rgb;
    pub fn GA_gsetpixel(d: drawing, p: point, c: rgb);
    pub fn GA_gdrawline(d: drawing, width: ::std::os::raw::c_int,
                        style: ::std::os::raw::c_int, c: rgb, p1: point,
                        p2: point, fast: ::std::os::raw::c_int,
                        lend: ::std::os::raw::c_int,
                        ljoin: ::std::os::raw::c_int,
                        lmitre: ::std::os::raw::c_float);
    pub fn GA_gdrawrect(d: drawing, width: ::std::os::raw::c_int,
                        style: ::std::os::raw::c_int, c: rgb, r: rect,
                        fast: ::std::os::raw::c_int,
                        lend: ::std::os::raw::c_int,
                        ljoin: ::std::os::raw::c_int,
                        lmitre: ::std::os::raw::c_float);
    pub fn GA_gfillrect(d: drawing, fill: rgb, r: rect);
    pub fn GA_gcopy(d: drawing, d2: drawing, r: rect);
    pub fn GA_gcopyalpha(d: drawing, d2: drawing, r: rect,
                         alpha: ::std::os::raw::c_int);
    pub fn gcopyalpha2(d: drawing, src: image, r: rect);
    pub fn GA_gdrawellipse(d: drawing, width: ::std::os::raw::c_int,
                           border: rgb, r: rect, fast: ::std::os::raw::c_int,
                           lend: ::std::os::raw::c_int,
                           ljoin: ::std::os::raw::c_int,
                           lmitre: ::std::os::raw::c_float);
    pub fn GA_gfillellipse(d: drawing, fill: rgb, r: rect);
    pub fn GA_gdrawpolyline(d: drawing, width: ::std::os::raw::c_int,
                            style: ::std::os::raw::c_int, c: rgb,
                            p: *mut point, n: ::std::os::raw::c_int,
                            closepath: ::std::os::raw::c_int,
                            fast: ::std::os::raw::c_int,
                            lend: ::std::os::raw::c_int,
                            ljoin: ::std::os::raw::c_int,
                            lmitre: ::std::os::raw::c_float);
    pub fn GA_gsetpolyfillmode(d: drawing, oddeven: ::std::os::raw::c_int);
    pub fn GA_gfillpolygon(d: drawing, fill: rgb, p: *mut point,
                           n: ::std::os::raw::c_int);
    pub fn gfillpolypolygon(d: drawing, fill: rgb, p: *mut point,
                            npoly: ::std::os::raw::c_int,
                            nper: *mut ::std::os::raw::c_int);
    pub fn gdrawimage(d: drawing, img: image, dr: rect, sr: rect);
    pub fn gmaskimage(d: drawing, img: image, dr: rect, sr: rect,
                      mask: image);
    pub fn GA_gdrawstr(d: drawing, f: font, c: rgb, p: point,
                       s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_gdrawstr1(d: drawing, f: font, c: rgb, p: point,
                        s: *const ::std::os::raw::c_char,
                        hadj: ::std::os::raw::c_double);
    pub fn GA_gstrrect(d: drawing, f: font, s: *const ::std::os::raw::c_char)
     -> rect;
    pub fn GA_gstrsize(d: drawing, f: font, s: *const ::std::os::raw::c_char)
     -> point;
    pub fn GA_gstrwidth(d: drawing, f: font, s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn GA_gcharmetric(d: drawing, f: font, c: ::std::os::raw::c_int,
                          ascent: *mut ::std::os::raw::c_int,
                          descent: *mut ::std::os::raw::c_int,
                          width: *mut ::std::os::raw::c_int);
    pub fn GA_gnewfont(d: drawing, face: *const ::std::os::raw::c_char,
                       style: ::std::os::raw::c_int,
                       size: ::std::os::raw::c_int,
                       rot: ::std::os::raw::c_double,
                       usePoints: ::std::os::raw::c_int) -> font;
    pub fn GA_gnewfont2(d: drawing, face: *const ::std::os::raw::c_char,
                        style: ::std::os::raw::c_int,
                        size: ::std::os::raw::c_int,
                        rot: ::std::os::raw::c_double,
                        usePoints: ::std::os::raw::c_int,
                        quality: ::std::os::raw::c_int) -> font;
    pub fn GA_ghasfixedwidth(f: font) -> ::std::os::raw::c_int;
    pub fn GA_newfield_no_border(text: *const ::std::os::raw::c_char, r: rect)
     -> field;
    pub fn GA_gdrawwcs(d: drawing, f: font, c: rgb, p: point,
                       s: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn GA_gwcswidth(d: drawing, f: font, s: *const wchar_t)
     -> ::std::os::raw::c_int;
    pub fn GA_gwcharmetric(d: drawing, f: font, c: ::std::os::raw::c_int,
                           ascent: *mut ::std::os::raw::c_int,
                           descent: *mut ::std::os::raw::c_int,
                           width: *mut ::std::os::raw::c_int);
    pub fn GA_gwdrawstr1(d: drawing, f: font, c: rgb, p: point,
                         s: *const wchar_t, cnt: ::std::os::raw::c_int,
                         hadj: ::std::os::raw::c_double);
    pub fn gstrwidth1(d: drawing, f: font, s: *const ::std::os::raw::c_char,
                      enc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn GA_devicewidth(dev: drawing) -> ::std::os::raw::c_int;
    pub fn GA_deviceheight(dev: drawing) -> ::std::os::raw::c_int;
    pub fn GA_devicewidthmm(dev: drawing) -> ::std::os::raw::c_int;
    pub fn GA_deviceheightmm(dev: drawing) -> ::std::os::raw::c_int;
    pub fn GA_devicepixelsx(dev: drawing) -> ::std::os::raw::c_int;
    pub fn GA_devicepixelsy(dev: drawing) -> ::std::os::raw::c_int;
    pub fn GA_isTopmost(w: window) -> ::std::os::raw::c_int;
    pub fn GA_BringToTop(w: window, stay: ::std::os::raw::c_int);
    pub fn GA_getHandle(w: window) -> *mut ::std::os::raw::c_void;
    pub fn GA_msgWindow(c: window, _type: ::std::os::raw::c_int);
    pub fn GA_gchangescrollbar(sb: scrollbar, which: ::std::os::raw::c_int,
                               _where: ::std::os::raw::c_int,
                               max: ::std::os::raw::c_int,
                               pagesize: ::std::os::raw::c_int,
                               disablenoscroll: ::std::os::raw::c_int);
    pub fn GA_gsetcursor(d: drawing, c: cursor);
    pub fn GA_newtoolbar(height: ::std::os::raw::c_int) -> control;
    pub fn GA_newtoolbutton(img: image, r: rect, _fn: actionfn) -> button;
    pub fn GA_scrolltext(c: textbox, lines: ::std::os::raw::c_int);
    pub fn GA_ggetkeystate() -> ::std::os::raw::c_int;
    pub fn GA_scrollcaret(c: textbox, lines: ::std::os::raw::c_int);
    pub fn GA_gsetmodified(c: textbox, modified: ::std::os::raw::c_int);
    pub fn GA_ggetmodified(c: textbox) -> ::std::os::raw::c_int;
    pub fn GA_getlinelength(c: textbox) -> ::std::os::raw::c_int;
    pub fn GA_getcurrentline(c: textbox, line: *mut ::std::os::raw::c_char,
                             length: ::std::os::raw::c_int);
    pub fn GA_getseltext(c: textbox, text: *mut ::std::os::raw::c_char);
    pub fn GA_setlimittext(t: textbox, limit: ::std::os::raw::c_long);
    pub fn GA_getlimittext(t: textbox) -> ::std::os::raw::c_long;
    pub fn GA_checklimittext(t: textbox, n: ::std::os::raw::c_long);
    pub fn GA_getpastelength() -> ::std::os::raw::c_long;
    pub fn GA_textselectionex(obj: control,
                              start: *mut ::std::os::raw::c_long,
                              end: *mut ::std::os::raw::c_long);
    pub fn GA_selecttextex(obj: control, start: ::std::os::raw::c_long,
                           end: ::std::os::raw::c_long);
    pub fn GA_finddialog(t: textbox);
    pub fn GA_replacedialog(t: textbox);
    pub fn GA_modeless_active() -> ::std::os::raw::c_int;
    pub fn GA_remove_menu_item(obj: menuitem);
    pub fn GA_toolbar_show();
    pub fn GA_toolbar_hide();
    pub fn libiconv_open(tocode: *const ::std::os::raw::c_char,
                         fromcode: *const ::std::os::raw::c_char)
     -> libiconv_t;
    pub fn libiconv(cd: libiconv_t, inbuf: *mut *const ::std::os::raw::c_char,
                    inbytesleft: *mut size_t,
                    outbuf: *mut *mut ::std::os::raw::c_char,
                    outbytesleft: *mut size_t) -> size_t;
    pub fn libiconv_close(cd: libiconv_t) -> ::std::os::raw::c_int;
    pub fn libiconvlist(do_one:
                            ::std::option::Option<unsafe extern "C" fn(namescount:
                                                                           ::std::os::raw::c_uint,
                                                                       names:
                                                                           *const *const ::std::os::raw::c_char,
                                                                       data:
                                                                           *mut ::std::os::raw::c_void)
                                                      ->
                                                          ::std::os::raw::c_int>,
                        daXta: *mut ::std::os::raw::c_void);
    pub fn setlocale(__category: ::std::os::raw::c_int,
                     __locale: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn localeconv() -> *mut Struct_lconv;
    pub fn newlocale(__category_mask: ::std::os::raw::c_int,
                     __locale: *const ::std::os::raw::c_char,
                     __base: __locale_t) -> __locale_t;
    pub fn duplocale(__dataset: __locale_t) -> __locale_t;
    pub fn freelocale(__dataset: __locale_t);
    pub fn uselocale(__dataset: __locale_t) -> __locale_t;
    pub fn gettext(__msgid: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn dgettext(__domainname: *const ::std::os::raw::c_char,
                    __msgid: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn dcgettext(__domainname: *const ::std::os::raw::c_char,
                     __msgid: *const ::std::os::raw::c_char,
                     __category: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn ngettext(__msgid1: *const ::std::os::raw::c_char,
                    __msgid2: *const ::std::os::raw::c_char,
                    __n: ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_char;
    pub fn dngettext(__domainname: *const ::std::os::raw::c_char,
                     __msgid1: *const ::std::os::raw::c_char,
                     __msgid2: *const ::std::os::raw::c_char,
                     __n: ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_char;
    pub fn dcngettext(__domainname: *const ::std::os::raw::c_char,
                      __msgid1: *const ::std::os::raw::c_char,
                      __msgid2: *const ::std::os::raw::c_char,
                      __n: ::std::os::raw::c_ulong,
                      __category: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn textdomain(__domainname: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bindtextdomain(__domainname: *const ::std::os::raw::c_char,
                          __dirname: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bind_textdomain_codeset(__domainname:
                                       *const ::std::os::raw::c_char,
                                   __codeset: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn libintl_set_relocation_prefix(orig_prefix:
                                             *const ::std::os::raw::c_char,
                                         curr_prefix:
                                             *const ::std::os::raw::c_char);
    pub fn Rf_initEmbeddedR(argc: ::std::os::raw::c_int,
                            argv: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn Rf_endEmbeddedR(fatal: ::std::os::raw::c_int);
    pub fn Rf_initialize_R(ac: ::std::os::raw::c_int,
                           av: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setup_Rmainloop();
    pub fn R_ReplDLLinit();
    pub fn R_ReplDLLdo1() -> ::std::os::raw::c_int;
    pub fn R_setStartTime();
    pub fn CleanEd();
    pub fn Rf_KillAllDevices();
    pub fn R_CleanTempDir();
    pub fn R_SaveGlobalEnv();
    pub fn getDLLVersion() -> *mut ::std::os::raw::c_char;
    pub fn getRUser() -> *mut ::std::os::raw::c_char;
    pub fn get_R_HOME() -> *mut ::std::os::raw::c_char;
    pub fn setup_term_ui();
    pub fn editorcleanall();
    pub fn readconsolecfg();
    pub fn R_pow(x: ::std::os::raw::c_double, y: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn R_pow_di(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_dnorm4(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_pnorm5(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qnorm5(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rnorm(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_pnorm_both(arg1: ::std::os::raw::c_double,
                         arg2: *mut ::std::os::raw::c_double,
                         arg3: *mut ::std::os::raw::c_double,
                         arg4: ::std::os::raw::c_int,
                         arg5: ::std::os::raw::c_int);
    pub fn Rf_dunif(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_double,
                    arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_punif(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_double,
                    arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qunif(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_double,
                    arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_runif(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dgamma(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_pgamma(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qgamma(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rgamma(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_log1pmx(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_log1pexp(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_lgamma1p(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_logspace_add(logx: ::std::os::raw::c_double,
                           logy: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_logspace_sub(logx: ::std::os::raw::c_double,
                           logy: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_logspace_sum(arg1: *const ::std::os::raw::c_double,
                           arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_dbeta(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_double,
                    arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_pbeta(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_double,
                    arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qbeta(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_double,
                    arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rbeta(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dlnorm(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_plnorm(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qlnorm(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rlnorm(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dchisq(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_pchisq(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qchisq(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rchisq(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dnchisq(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pnchisq(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int,
                      arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qnchisq(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int,
                      arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rnchisq(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_df(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double,
                 arg3: ::std::os::raw::c_double, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pf(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double,
                 arg3: ::std::os::raw::c_double, arg4: ::std::os::raw::c_int,
                 arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_qf(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double,
                 arg3: ::std::os::raw::c_double, arg4: ::std::os::raw::c_int,
                 arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_rf(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn Rf_dt(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pt(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double, arg3: ::std::os::raw::c_int,
                 arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_qt(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double, arg3: ::std::os::raw::c_int,
                 arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_rt(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn Rf_dbinom_raw(x: ::std::os::raw::c_double,
                         n: ::std::os::raw::c_double,
                         p: ::std::os::raw::c_double,
                         q: ::std::os::raw::c_double,
                         give_log: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_dbinom(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_pbinom(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qbinom(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rbinom(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_rmultinom(arg1: ::std::os::raw::c_int,
                        arg2: *mut ::std::os::raw::c_double,
                        arg3: ::std::os::raw::c_int,
                        arg4: *mut ::std::os::raw::c_int);
    pub fn Rf_dcauchy(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pcauchy(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int,
                      arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qcauchy(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int,
                      arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rcauchy(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dexp(arg1: ::std::os::raw::c_double,
                   arg2: ::std::os::raw::c_double,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_pexp(arg1: ::std::os::raw::c_double,
                   arg2: ::std::os::raw::c_double,
                   arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qexp(arg1: ::std::os::raw::c_double,
                   arg2: ::std::os::raw::c_double,
                   arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rexp(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dgeom(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_pgeom(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qgeom(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rgeom(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dhyper(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_double,
                     arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_phyper(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_double,
                     arg5: ::std::os::raw::c_int, arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qhyper(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_double,
                     arg5: ::std::os::raw::c_int, arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rhyper(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dnbinom(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pnbinom(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int,
                      arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qnbinom(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int,
                      arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rnbinom(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dnbinom_mu(arg1: ::std::os::raw::c_double,
                         arg2: ::std::os::raw::c_double,
                         arg3: ::std::os::raw::c_double,
                         arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pnbinom_mu(arg1: ::std::os::raw::c_double,
                         arg2: ::std::os::raw::c_double,
                         arg3: ::std::os::raw::c_double,
                         arg4: ::std::os::raw::c_int,
                         arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qnbinom_mu(arg1: ::std::os::raw::c_double,
                         arg2: ::std::os::raw::c_double,
                         arg3: ::std::os::raw::c_double,
                         arg4: ::std::os::raw::c_int,
                         arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rnbinom_mu(arg1: ::std::os::raw::c_double,
                         arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dpois_raw(arg1: ::std::os::raw::c_double,
                        arg2: ::std::os::raw::c_double,
                        arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_dpois(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_ppois(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qpois(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rpois(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dweibull(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double,
                       arg3: ::std::os::raw::c_double,
                       arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pweibull(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double,
                       arg3: ::std::os::raw::c_double,
                       arg4: ::std::os::raw::c_int,
                       arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qweibull(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double,
                       arg3: ::std::os::raw::c_double,
                       arg4: ::std::os::raw::c_int,
                       arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rweibull(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dlogis(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_plogis(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qlogis(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_int, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rlogis(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dnbeta(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_double,
                     arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_pnbeta(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_double,
                     arg5: ::std::os::raw::c_int, arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qnbeta(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_double,
                     arg5: ::std::os::raw::c_int, arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rnbeta(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dnf(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double,
                  arg3: ::std::os::raw::c_double,
                  arg4: ::std::os::raw::c_double, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pnf(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double,
                  arg3: ::std::os::raw::c_double,
                  arg4: ::std::os::raw::c_double, arg5: ::std::os::raw::c_int,
                  arg6: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_qnf(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double,
                  arg3: ::std::os::raw::c_double,
                  arg4: ::std::os::raw::c_double, arg5: ::std::os::raw::c_int,
                  arg6: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_dnt(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double,
                  arg3: ::std::os::raw::c_double, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pnt(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double,
                  arg3: ::std::os::raw::c_double, arg4: ::std::os::raw::c_int,
                  arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_qnt(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double,
                  arg3: ::std::os::raw::c_double, arg4: ::std::os::raw::c_int,
                  arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn Rf_ptukey(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_double,
                     arg5: ::std::os::raw::c_int, arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qtukey(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double,
                     arg3: ::std::os::raw::c_double,
                     arg4: ::std::os::raw::c_double,
                     arg5: ::std::os::raw::c_int, arg6: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_dwilcox(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_pwilcox(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int,
                      arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qwilcox(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double,
                      arg3: ::std::os::raw::c_double,
                      arg4: ::std::os::raw::c_int,
                      arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rwilcox(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_dsignrank(arg1: ::std::os::raw::c_double,
                        arg2: ::std::os::raw::c_double,
                        arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_psignrank(arg1: ::std::os::raw::c_double,
                        arg2: ::std::os::raw::c_double,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_qsignrank(arg1: ::std::os::raw::c_double,
                        arg2: ::std::os::raw::c_double,
                        arg3: ::std::os::raw::c_int,
                        arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_rsignrank(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_gammafn(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_lgammafn(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_lgammafn_sign(arg1: ::std::os::raw::c_double,
                            arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn Rf_dpsifn(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int,
                     arg4: ::std::os::raw::c_int,
                     arg5: *mut ::std::os::raw::c_double,
                     arg6: *mut ::std::os::raw::c_int,
                     arg7: *mut ::std::os::raw::c_int);
    pub fn Rf_psigamma(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_digamma(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_trigamma(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_tetragamma(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_pentagamma(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_beta(arg1: ::std::os::raw::c_double,
                   arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_lbeta(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_choose(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_lchoose(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_bessel_i(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double,
                       arg3: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_bessel_j(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_bessel_k(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double,
                       arg3: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_bessel_y(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_bessel_i_ex(arg1: ::std::os::raw::c_double,
                          arg2: ::std::os::raw::c_double,
                          arg3: ::std::os::raw::c_double,
                          arg4: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_bessel_j_ex(arg1: ::std::os::raw::c_double,
                          arg2: ::std::os::raw::c_double,
                          arg3: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_bessel_k_ex(arg1: ::std::os::raw::c_double,
                          arg2: ::std::os::raw::c_double,
                          arg3: ::std::os::raw::c_double,
                          arg4: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_bessel_y_ex(arg1: ::std::os::raw::c_double,
                          arg2: ::std::os::raw::c_double,
                          arg3: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_pythag(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_imax2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn Rf_imin2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn Rf_fmax2(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_fmin2(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_sign(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_fprec(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_fround(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_fsign(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn Rf_ftrunc(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn cospi(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinpi(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanpi(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn dasum_(n: *const ::std::os::raw::c_int,
                  dx: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn daxpy_(n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  dx: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  dy: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int);
    pub fn dcopy_(n: *const ::std::os::raw::c_int,
                  dx: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  dy: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int);
    pub fn ddot_(n: *const ::std::os::raw::c_int,
                 dx: *const ::std::os::raw::c_double,
                 incx: *const ::std::os::raw::c_int,
                 dy: *const ::std::os::raw::c_double,
                 incy: *const ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn dnrm2_(n: *const ::std::os::raw::c_int,
                  dx: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn drot_(n: *const ::std::os::raw::c_int,
                 dx: *mut ::std::os::raw::c_double,
                 incx: *const ::std::os::raw::c_int,
                 dy: *mut ::std::os::raw::c_double,
                 incy: *const ::std::os::raw::c_int,
                 c: *const ::std::os::raw::c_double,
                 s: *const ::std::os::raw::c_double);
    pub fn drotg_(a: *const ::std::os::raw::c_double,
                  b: *const ::std::os::raw::c_double,
                  c: *mut ::std::os::raw::c_double,
                  s: *mut ::std::os::raw::c_double);
    pub fn drotm_(n: *const ::std::os::raw::c_int,
                  dx: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  dy: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int,
                  dparam: *const ::std::os::raw::c_double);
    pub fn drotmg_(dd1: *const ::std::os::raw::c_double,
                   dd2: *const ::std::os::raw::c_double,
                   dx1: *const ::std::os::raw::c_double,
                   dy1: *const ::std::os::raw::c_double,
                   param: *mut ::std::os::raw::c_double);
    pub fn dscal_(n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  dx: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int);
    pub fn dswap_(n: *const ::std::os::raw::c_int,
                  dx: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  dy: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int);
    pub fn idamax_(n: *const ::std::os::raw::c_int,
                   dx: *const ::std::os::raw::c_double,
                   incx: *const ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dgbmv_(trans: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  kl: *const ::std::os::raw::c_int,
                  ku: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  x: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  Rf_beta: *const ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int);
    pub fn dgemv_(trans: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  x: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  Rf_beta: *const ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int);
    pub fn dsbmv_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  k: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  x: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  Rf_beta: *const ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int);
    pub fn dspmv_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  ap: *const ::std::os::raw::c_double,
                  x: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  Rf_beta: *const ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int);
    pub fn dsymv_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  x: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  Rf_beta: *const ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int);
    pub fn dtbmv_(uplo: *const ::std::os::raw::c_char,
                  trans: *const ::std::os::raw::c_char,
                  diag: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  k: *const ::std::os::raw::c_int,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  x: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int);
    pub fn dtpmv_(uplo: *const ::std::os::raw::c_char,
                  trans: *const ::std::os::raw::c_char,
                  diag: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  ap: *const ::std::os::raw::c_double,
                  x: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int);
    pub fn dtrmv_(uplo: *const ::std::os::raw::c_char,
                  trans: *const ::std::os::raw::c_char,
                  diag: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  x: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int);
    pub fn dtbsv_(uplo: *const ::std::os::raw::c_char,
                  trans: *const ::std::os::raw::c_char,
                  diag: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  k: *const ::std::os::raw::c_int,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  x: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int);
    pub fn dtpsv_(uplo: *const ::std::os::raw::c_char,
                  trans: *const ::std::os::raw::c_char,
                  diag: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  ap: *const ::std::os::raw::c_double,
                  x: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int);
    pub fn dtrsv_(uplo: *const ::std::os::raw::c_char,
                  trans: *const ::std::os::raw::c_char,
                  diag: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  x: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int);
    pub fn dger_(m: *const ::std::os::raw::c_int,
                 n: *const ::std::os::raw::c_int,
                 alpha: *const ::std::os::raw::c_double,
                 x: *const ::std::os::raw::c_double,
                 incx: *const ::std::os::raw::c_int,
                 y: *const ::std::os::raw::c_double,
                 incy: *const ::std::os::raw::c_int,
                 a: *mut ::std::os::raw::c_double,
                 lda: *const ::std::os::raw::c_int);
    pub fn dsyr_(uplo: *const ::std::os::raw::c_char,
                 n: *const ::std::os::raw::c_int,
                 alpha: *const ::std::os::raw::c_double,
                 x: *const ::std::os::raw::c_double,
                 incx: *const ::std::os::raw::c_int,
                 a: *mut ::std::os::raw::c_double,
                 lda: *const ::std::os::raw::c_int);
    pub fn dspr_(uplo: *const ::std::os::raw::c_char,
                 n: *const ::std::os::raw::c_int,
                 alpha: *const ::std::os::raw::c_double,
                 x: *const ::std::os::raw::c_double,
                 incx: *const ::std::os::raw::c_int,
                 ap: *mut ::std::os::raw::c_double);
    pub fn dsyr2_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  x: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  y: *const ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int);
    pub fn dspr2_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  x: *const ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int,
                  y: *const ::std::os::raw::c_double,
                  incy: *const ::std::os::raw::c_int,
                  ap: *mut ::std::os::raw::c_double);
    pub fn dgemm_(transa: *const ::std::os::raw::c_char,
                  transb: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  k: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *const ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  Rf_beta: *const ::std::os::raw::c_double,
                  c: *mut ::std::os::raw::c_double,
                  ldc: *const ::std::os::raw::c_int);
    pub fn dtrsm_(side: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  transa: *const ::std::os::raw::c_char,
                  diag: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int);
    pub fn dtrmm_(side: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  transa: *const ::std::os::raw::c_char,
                  diag: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int);
    pub fn dsymm_(side: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *const ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  Rf_beta: *const ::std::os::raw::c_double,
                  c: *mut ::std::os::raw::c_double,
                  ldc: *const ::std::os::raw::c_int);
    pub fn dsyrk_(uplo: *const ::std::os::raw::c_char,
                  trans: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  k: *const ::std::os::raw::c_int,
                  alpha: *const ::std::os::raw::c_double,
                  a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  Rf_beta: *const ::std::os::raw::c_double,
                  c: *mut ::std::os::raw::c_double,
                  ldc: *const ::std::os::raw::c_int);
    pub fn dsyr2k_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   alpha: *const ::std::os::raw::c_double,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   Rf_beta: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int);
    pub fn dcabs1_(z: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dzasum_(n: *mut ::std::os::raw::c_int, zx: *mut Rcomplex,
                   incx: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn dznrm2_(n: *mut ::std::os::raw::c_int, x: *mut Rcomplex,
                   incx: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn izamax_(n: *mut ::std::os::raw::c_int, zx: *mut Rcomplex,
                   incx: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn zaxpy_(n: *mut ::std::os::raw::c_int, za: *mut Rcomplex,
                  zx: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  zy: *mut Rcomplex, incy: *mut ::std::os::raw::c_int);
    pub fn zcopy_(n: *mut ::std::os::raw::c_int, zx: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int, zy: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int);
    pub fn zdotc_(n: *mut ::std::os::raw::c_int, zx: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int, zy: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int) -> Rcomplex;
    pub fn zdotu_(n: *mut ::std::os::raw::c_int, zx: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int, zy: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int) -> Rcomplex;
    pub fn zdrot_(n: *mut ::std::os::raw::c_int, cx: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int, cy: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int,
                  c: *mut ::std::os::raw::c_double,
                  s: *mut ::std::os::raw::c_double);
    pub fn zdscal_(n: *mut ::std::os::raw::c_int,
                   da: *mut ::std::os::raw::c_double, zx: *mut Rcomplex,
                   incx: *mut ::std::os::raw::c_int);
    pub fn zgbmv_(trans: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int,
                  kl: *mut ::std::os::raw::c_int,
                  ku: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  Rf_beta: *mut Rcomplex, y: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int);
    pub fn zgemm_(transa: *const ::std::os::raw::c_char,
                  transb: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  k: *const ::std::os::raw::c_int, alpha: *const Rcomplex,
                  a: *const Rcomplex, lda: *const ::std::os::raw::c_int,
                  b: *const Rcomplex, ldb: *const ::std::os::raw::c_int,
                  Rf_beta: *const Rcomplex, c: *mut Rcomplex,
                  ldc: *const ::std::os::raw::c_int);
    pub fn zgemv_(trans: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  Rf_beta: *mut Rcomplex, y: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int);
    pub fn zgerc_(m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  y: *mut Rcomplex, incy: *mut ::std::os::raw::c_int,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int);
    pub fn zgeru_(m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  y: *mut Rcomplex, incy: *mut ::std::os::raw::c_int,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int);
    pub fn zhbmv_(uplo: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int,
                  k: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  Rf_beta: *mut Rcomplex, y: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int);
    pub fn zhemm_(side: *mut ::std::os::raw::c_char,
                  uplo: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  b: *mut Rcomplex, ldb: *mut ::std::os::raw::c_int,
                  Rf_beta: *mut Rcomplex, c: *mut Rcomplex,
                  ldc: *mut ::std::os::raw::c_int);
    pub fn zhemv_(uplo: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  Rf_beta: *mut Rcomplex, y: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int);
    pub fn zher_(uplo: *mut ::std::os::raw::c_char,
                 n: *mut ::std::os::raw::c_int,
                 alpha: *mut ::std::os::raw::c_double, x: *mut Rcomplex,
                 incx: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                 lda: *mut ::std::os::raw::c_int);
    pub fn zher2_(uplo: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  y: *mut Rcomplex, incy: *mut ::std::os::raw::c_int,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int);
    pub fn zher2k_(uplo: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                   a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                   b: *mut Rcomplex, ldb: *mut ::std::os::raw::c_int,
                   Rf_beta: *mut ::std::os::raw::c_double, c: *mut Rcomplex,
                   ldc: *mut ::std::os::raw::c_int);
    pub fn zherk_(uplo: *mut ::std::os::raw::c_char,
                  trans: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int,
                  k: *mut ::std::os::raw::c_int,
                  alpha: *mut ::std::os::raw::c_double, a: *mut Rcomplex,
                  lda: *mut ::std::os::raw::c_int,
                  Rf_beta: *mut ::std::os::raw::c_double, c: *mut Rcomplex,
                  ldc: *mut ::std::os::raw::c_int);
    pub fn zhpmv_(uplo: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  ap: *mut Rcomplex, x: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int, Rf_beta: *mut Rcomplex,
                  y: *mut Rcomplex, incy: *mut ::std::os::raw::c_int);
    pub fn zhpr_(uplo: *mut ::std::os::raw::c_char,
                 n: *mut ::std::os::raw::c_int,
                 alpha: *mut ::std::os::raw::c_double, x: *mut Rcomplex,
                 incx: *mut ::std::os::raw::c_int, ap: *mut Rcomplex);
    pub fn zhpr2_(uplo: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                  y: *mut Rcomplex, incy: *mut ::std::os::raw::c_int,
                  ap: *mut Rcomplex);
    pub fn zrotg_(ca: *mut Rcomplex, cb: *mut Rcomplex,
                  c: *mut ::std::os::raw::c_double, s: *mut Rcomplex);
    pub fn zscal_(n: *mut ::std::os::raw::c_int, za: *mut Rcomplex,
                  zx: *mut Rcomplex, incx: *mut ::std::os::raw::c_int);
    pub fn zswap_(n: *mut ::std::os::raw::c_int, zx: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int, zy: *mut Rcomplex,
                  incy: *mut ::std::os::raw::c_int);
    pub fn zsymm_(side: *mut ::std::os::raw::c_char,
                  uplo: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  b: *mut Rcomplex, ldb: *mut ::std::os::raw::c_int,
                  Rf_beta: *mut Rcomplex, c: *mut Rcomplex,
                  ldc: *mut ::std::os::raw::c_int);
    pub fn zsyr2k_(uplo: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                   a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                   b: *mut Rcomplex, ldb: *mut ::std::os::raw::c_int,
                   Rf_beta: *mut Rcomplex, c: *mut Rcomplex,
                   ldc: *mut ::std::os::raw::c_int);
    pub fn zsyrk_(uplo: *mut ::std::os::raw::c_char,
                  trans: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int,
                  k: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  Rf_beta: *mut Rcomplex, c: *mut Rcomplex,
                  ldc: *mut ::std::os::raw::c_int);
    pub fn ztbmv_(uplo: *mut ::std::os::raw::c_char,
                  trans: *mut ::std::os::raw::c_char,
                  diag: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int,
                  k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                  lda: *mut ::std::os::raw::c_int, x: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int);
    pub fn ztbsv_(uplo: *mut ::std::os::raw::c_char,
                  trans: *mut ::std::os::raw::c_char,
                  diag: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int,
                  k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                  lda: *mut ::std::os::raw::c_int, x: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int);
    pub fn ztpmv_(uplo: *mut ::std::os::raw::c_char,
                  trans: *mut ::std::os::raw::c_char,
                  diag: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int, ap: *mut Rcomplex,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int);
    pub fn ztpsv_(uplo: *mut ::std::os::raw::c_char,
                  trans: *mut ::std::os::raw::c_char,
                  diag: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int, ap: *mut Rcomplex,
                  x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int);
    pub fn ztrmm_(side: *mut ::std::os::raw::c_char,
                  uplo: *mut ::std::os::raw::c_char,
                  transa: *mut ::std::os::raw::c_char,
                  diag: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  b: *mut Rcomplex, ldb: *mut ::std::os::raw::c_int);
    pub fn ztrmv_(uplo: *mut ::std::os::raw::c_char,
                  trans: *mut ::std::os::raw::c_char,
                  diag: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                  lda: *mut ::std::os::raw::c_int, x: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int);
    pub fn ztrsm_(side: *mut ::std::os::raw::c_char,
                  uplo: *mut ::std::os::raw::c_char,
                  transa: *mut ::std::os::raw::c_char,
                  diag: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                  a: *mut Rcomplex, lda: *mut ::std::os::raw::c_int,
                  b: *mut Rcomplex, ldb: *mut ::std::os::raw::c_int);
    pub fn ztrsv_(uplo: *mut ::std::os::raw::c_char,
                  trans: *mut ::std::os::raw::c_char,
                  diag: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                  lda: *mut ::std::os::raw::c_int, x: *mut Rcomplex,
                  incx: *mut ::std::os::raw::c_int);
    pub fn Rdqags(f: integr_fn, ex: *mut ::std::os::raw::c_void,
                  a: *mut ::std::os::raw::c_double,
                  b: *mut ::std::os::raw::c_double,
                  epsabs: *mut ::std::os::raw::c_double,
                  epsrel: *mut ::std::os::raw::c_double,
                  result: *mut ::std::os::raw::c_double,
                  abserr: *mut ::std::os::raw::c_double,
                  neval: *mut ::std::os::raw::c_int,
                  ier: *mut ::std::os::raw::c_int,
                  limit: *mut ::std::os::raw::c_int,
                  lenw: *mut ::std::os::raw::c_int,
                  last: *mut ::std::os::raw::c_int,
                  iwork: *mut ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double);
    pub fn Rdqagi(f: integr_fn, ex: *mut ::std::os::raw::c_void,
                  bound: *mut ::std::os::raw::c_double,
                  inf: *mut ::std::os::raw::c_int,
                  epsabs: *mut ::std::os::raw::c_double,
                  epsrel: *mut ::std::os::raw::c_double,
                  result: *mut ::std::os::raw::c_double,
                  abserr: *mut ::std::os::raw::c_double,
                  neval: *mut ::std::os::raw::c_int,
                  ier: *mut ::std::os::raw::c_int,
                  limit: *mut ::std::os::raw::c_int,
                  lenw: *mut ::std::os::raw::c_int,
                  last: *mut ::std::os::raw::c_int,
                  iwork: *mut ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double);
    pub fn vmmin(n: ::std::os::raw::c_int, b: *mut ::std::os::raw::c_double,
                 Fmin: *mut ::std::os::raw::c_double, _fn: optimfn,
                 gr: optimgr, maxit: ::std::os::raw::c_int,
                 trace: ::std::os::raw::c_int,
                 mask: *mut ::std::os::raw::c_int,
                 abstol: ::std::os::raw::c_double,
                 reltol: ::std::os::raw::c_double,
                 nREPORT: ::std::os::raw::c_int,
                 ex: *mut ::std::os::raw::c_void,
                 fncount: *mut ::std::os::raw::c_int,
                 grcount: *mut ::std::os::raw::c_int,
                 fail: *mut ::std::os::raw::c_int);
    pub fn nmmin(n: ::std::os::raw::c_int,
                 Bvec: *mut ::std::os::raw::c_double,
                 X: *mut ::std::os::raw::c_double,
                 Fmin: *mut ::std::os::raw::c_double, _fn: optimfn,
                 fail: *mut ::std::os::raw::c_int,
                 abstol: ::std::os::raw::c_double,
                 intol: ::std::os::raw::c_double,
                 ex: *mut ::std::os::raw::c_void,
                 alpha: ::std::os::raw::c_double,
                 bet: ::std::os::raw::c_double,
                 gamm: ::std::os::raw::c_double, trace: ::std::os::raw::c_int,
                 fncount: *mut ::std::os::raw::c_int,
                 maxit: ::std::os::raw::c_int);
    pub fn cgmin(n: ::std::os::raw::c_int,
                 Bvec: *mut ::std::os::raw::c_double,
                 X: *mut ::std::os::raw::c_double,
                 Fmin: *mut ::std::os::raw::c_double, _fn: optimfn,
                 gr: optimgr, fail: *mut ::std::os::raw::c_int,
                 abstol: ::std::os::raw::c_double,
                 intol: ::std::os::raw::c_double,
                 ex: *mut ::std::os::raw::c_void,
                 _type: ::std::os::raw::c_int, trace: ::std::os::raw::c_int,
                 fncount: *mut ::std::os::raw::c_int,
                 grcount: *mut ::std::os::raw::c_int,
                 maxit: ::std::os::raw::c_int);
    pub fn lbfgsb(n: ::std::os::raw::c_int, m: ::std::os::raw::c_int,
                  x: *mut ::std::os::raw::c_double,
                  l: *mut ::std::os::raw::c_double,
                  u: *mut ::std::os::raw::c_double,
                  nbd: *mut ::std::os::raw::c_int,
                  Fmin: *mut ::std::os::raw::c_double, _fn: optimfn,
                  gr: optimgr, fail: *mut ::std::os::raw::c_int,
                  ex: *mut ::std::os::raw::c_void,
                  factr: ::std::os::raw::c_double,
                  pgtol: ::std::os::raw::c_double,
                  fncount: *mut ::std::os::raw::c_int,
                  grcount: *mut ::std::os::raw::c_int,
                  maxit: ::std::os::raw::c_int,
                  msg: *mut ::std::os::raw::c_char,
                  trace: ::std::os::raw::c_int,
                  nREPORT: ::std::os::raw::c_int);
    pub fn samin(n: ::std::os::raw::c_int, pb: *mut ::std::os::raw::c_double,
                 yb: *mut ::std::os::raw::c_double, _fn: optimfn,
                 maxit: ::std::os::raw::c_int, tmax: ::std::os::raw::c_int,
                 ti: ::std::os::raw::c_double, trace: ::std::os::raw::c_int,
                 ex: *mut ::std::os::raw::c_void);
    pub fn dqrqty_(x: *mut ::std::os::raw::c_double,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   qraux: *mut ::std::os::raw::c_double,
                   y: *mut ::std::os::raw::c_double,
                   ny: *mut ::std::os::raw::c_int,
                   qty: *mut ::std::os::raw::c_double);
    pub fn dqrqy_(x: *mut ::std::os::raw::c_double,
                  n: *mut ::std::os::raw::c_int,
                  k: *mut ::std::os::raw::c_int,
                  qraux: *mut ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  ny: *mut ::std::os::raw::c_int,
                  qy: *mut ::std::os::raw::c_double);
    pub fn dqrcf_(x: *mut ::std::os::raw::c_double,
                  n: *mut ::std::os::raw::c_int,
                  k: *mut ::std::os::raw::c_int,
                  qraux: *mut ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  ny: *mut ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  info: *mut ::std::os::raw::c_int);
    pub fn dqrrsd_(x: *mut ::std::os::raw::c_double,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   qraux: *mut ::std::os::raw::c_double,
                   y: *mut ::std::os::raw::c_double,
                   ny: *mut ::std::os::raw::c_int,
                   rsd: *mut ::std::os::raw::c_double);
    pub fn dqrxb_(x: *mut ::std::os::raw::c_double,
                  n: *mut ::std::os::raw::c_int,
                  k: *mut ::std::os::raw::c_int,
                  qraux: *mut ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  ny: *mut ::std::os::raw::c_int,
                  xb: *mut ::std::os::raw::c_double);
    pub fn R_pretty(lo: *mut ::std::os::raw::c_double,
                    up: *mut ::std::os::raw::c_double,
                    ndiv: *mut ::std::os::raw::c_int,
                    min_n: ::std::os::raw::c_int,
                    shrink_sml: ::std::os::raw::c_double,
                    high_u_fact: *mut ::std::os::raw::c_double,
                    eps_correction: ::std::os::raw::c_int,
                    return_bounds: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn fdhess(n: ::std::os::raw::c_int, x: *mut ::std::os::raw::c_double,
                  fval: ::std::os::raw::c_double, fun: fcn_p,
                  state: *mut ::std::os::raw::c_void,
                  h: *mut ::std::os::raw::c_double,
                  nfd: ::std::os::raw::c_int,
                  step: *mut ::std::os::raw::c_double,
                  f: *mut ::std::os::raw::c_double,
                  ndigit: ::std::os::raw::c_int,
                  typx: *mut ::std::os::raw::c_double);
    pub fn optif9(nr: ::std::os::raw::c_int, n: ::std::os::raw::c_int,
                  x: *mut ::std::os::raw::c_double, fcn: fcn_p, d1fcn: fcn_p,
                  d2fcn: d2fcn_p, state: *mut ::std::os::raw::c_void,
                  typsiz: *mut ::std::os::raw::c_double,
                  fscale: ::std::os::raw::c_double,
                  method: ::std::os::raw::c_int, iexp: ::std::os::raw::c_int,
                  msg: *mut ::std::os::raw::c_int,
                  ndigit: ::std::os::raw::c_int,
                  itnlim: ::std::os::raw::c_int,
                  iagflg: ::std::os::raw::c_int,
                  iahflg: ::std::os::raw::c_int,
                  dlt: ::std::os::raw::c_double,
                  gradtl: ::std::os::raw::c_double,
                  stepmx: ::std::os::raw::c_double,
                  steptl: ::std::os::raw::c_double,
                  xpls: *mut ::std::os::raw::c_double,
                  fpls: *mut ::std::os::raw::c_double,
                  gpls: *mut ::std::os::raw::c_double,
                  itrmcd: *mut ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  wrk: *mut ::std::os::raw::c_double,
                  itncnt: *mut ::std::os::raw::c_int);
    pub fn dqrdc2_(x: *mut ::std::os::raw::c_double,
                   ldx: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   p: *mut ::std::os::raw::c_int,
                   tol: *mut ::std::os::raw::c_double,
                   rank: *mut ::std::os::raw::c_int,
                   qraux: *mut ::std::os::raw::c_double,
                   pivot: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double);
    pub fn dqrls_(x: *mut ::std::os::raw::c_double,
                  n: *mut ::std::os::raw::c_int,
                  p: *mut ::std::os::raw::c_int,
                  y: *mut ::std::os::raw::c_double,
                  ny: *mut ::std::os::raw::c_int,
                  tol: *mut ::std::os::raw::c_double,
                  b: *mut ::std::os::raw::c_double,
                  rsd: *mut ::std::os::raw::c_double,
                  qty: *mut ::std::os::raw::c_double,
                  k: *mut ::std::os::raw::c_int,
                  jpvt: *mut ::std::os::raw::c_int,
                  qraux: *mut ::std::os::raw::c_double,
                  work: *mut ::std::os::raw::c_double);
    pub fn Rf_removeTaskCallbackByIndex(id: ::std::os::raw::c_int)
     -> Rboolean;
    pub fn Rf_removeTaskCallbackByName(name: *const ::std::os::raw::c_char)
     -> Rboolean;
    pub fn R_removeTaskCallback(which: SEXP) -> SEXP;
    pub fn Rf_addTaskCallback(cb: R_ToplevelCallback,
                              data: *mut ::std::os::raw::c_void,
                              finalizer:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>,
                              name: *const ::std::os::raw::c_char,
                              pos: *mut ::std::os::raw::c_int)
     -> *mut R_ToplevelCallbackEl;
    pub fn R_new_custom_connection(description: *const ::std::os::raw::c_char,
                                   mode: *const ::std::os::raw::c_char,
                                   class_name: *const ::std::os::raw::c_char,
                                   ptr: *mut Rconnection) -> SEXP;
    pub fn R_ReadConnection(con: Rconnection,
                            buf: *mut ::std::os::raw::c_void, n: size_t)
     -> size_t;
    pub fn R_WriteConnection(con: Rconnection,
                             buf: *mut ::std::os::raw::c_void, n: size_t)
     -> size_t;
    pub fn initStdinHandler() -> *mut InputHandler;
    pub fn consoleInputHandler(buf: *mut ::std::os::raw::c_uchar,
                               len: ::std::os::raw::c_int);
    pub fn addInputHandler(handlers: *mut InputHandler,
                           fd: ::std::os::raw::c_int,
                           handler: InputHandlerProc,
                           activity: ::std::os::raw::c_int)
     -> *mut InputHandler;
    pub fn getInputHandler(handlers: *mut InputHandler,
                           fd: ::std::os::raw::c_int) -> *mut InputHandler;
    pub fn removeInputHandler(handlers: *mut *mut InputHandler,
                              it: *mut InputHandler) -> ::std::os::raw::c_int;
    pub fn getSelectedHandler(handlers: *mut InputHandler, mask: *mut fd_set)
     -> *mut InputHandler;
    pub fn R_checkActivity(usec: ::std::os::raw::c_int,
                           ignore_stdin: ::std::os::raw::c_int)
     -> *mut fd_set;
    pub fn R_checkActivityEx(usec: ::std::os::raw::c_int,
                             ignore_stdin: ::std::os::raw::c_int,
                             intr: ::std::option::Option<extern "C" fn()>)
     -> *mut fd_set;
    pub fn R_runHandlers(handlers: *mut InputHandler, mask: *mut fd_set);
    pub fn R_SelectEx(n: ::std::os::raw::c_int, readfds: *mut fd_set,
                      writefds: *mut fd_set, exceptfds: *mut fd_set,
                      timeout: *mut Struct_timeval,
                      intr: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn R_GetX11Image(d: ::std::os::raw::c_int,
                         pximage: *mut ::std::os::raw::c_void,
                         pwidth: *mut ::std::os::raw::c_int,
                         pheight: *mut ::std::os::raw::c_int) -> Rboolean;
    pub fn R_GE_getVersion() -> ::std::os::raw::c_int;
    pub fn R_GE_checkVersionOrDie(version: ::std::os::raw::c_int);
    pub fn Rf_ndevNumber(arg1: pDevDesc) -> ::std::os::raw::c_int;
    pub fn Rf_NumDevices() -> ::std::os::raw::c_int;
    pub fn R_CheckDeviceAvailable();
    pub fn R_CheckDeviceAvailableBool() -> Rboolean;
    pub fn Rf_curDevice() -> ::std::os::raw::c_int;
    pub fn Rf_nextDevice(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn Rf_prevDevice(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn Rf_selectDevice(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn Rf_killDevice(arg1: ::std::os::raw::c_int);
    pub fn Rf_NoDevices() -> ::std::os::raw::c_int;
    pub fn Rf_NewFrameConfirm(arg1: pDevDesc);
    pub fn Rf_doMouseEvent(dd: pDevDesc, event: R_MouseEvent,
                           buttons: ::std::os::raw::c_int,
                           x: ::std::os::raw::c_double,
                           y: ::std::os::raw::c_double);
    pub fn Rf_doKeybd(dd: pDevDesc, rkey: R_KeyName,
                      keyname: *const ::std::os::raw::c_char);
    pub fn Rf_onintr();
    pub fn Rf_AdobeSymbol2utf8(out: *mut ::std::os::raw::c_char,
                               _in: *const ::std::os::raw::c_char,
                               nwork: size_t) -> *mut ::std::os::raw::c_void;
    pub fn Rf_ucstoutf8(s: *mut ::std::os::raw::c_char,
                        c: ::std::os::raw::c_uint) -> size_t;
    pub fn Rf_desc2GEDesc(dd: pDevDesc) -> pGEDevDesc;
    pub fn GEdeviceNumber(arg1: pGEDevDesc) -> ::std::os::raw::c_int;
    pub fn GEgetDevice(arg1: ::std::os::raw::c_int) -> pGEDevDesc;
    pub fn GEaddDevice(arg1: pGEDevDesc);
    pub fn GEaddDevice2(arg1: pGEDevDesc,
                        arg2: *const ::std::os::raw::c_char);
    pub fn GEaddDevice2f(arg1: pGEDevDesc,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *const ::std::os::raw::c_char);
    pub fn GEkillDevice(arg1: pGEDevDesc);
    pub fn GEcreateDevDesc(dev: pDevDesc) -> pGEDevDesc;
    pub fn GEdestroyDevDesc(dd: pGEDevDesc);
    pub fn GEsystemState(dd: pGEDevDesc, index: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn GEregisterWithDevice(dd: pGEDevDesc);
    pub fn GEregisterSystem(callback: GEcallback,
                            systemRegisterIndex: *mut ::std::os::raw::c_int);
    pub fn GEunregisterSystem(registerIndex: ::std::os::raw::c_int);
    pub fn GEhandleEvent(event: GEevent, dev: pDevDesc, data: SEXP) -> SEXP;
    pub fn GEfromDeviceX(value: ::std::os::raw::c_double, to: GEUnit,
                         dd: pGEDevDesc) -> ::std::os::raw::c_double;
    pub fn GEtoDeviceX(value: ::std::os::raw::c_double, from: GEUnit,
                       dd: pGEDevDesc) -> ::std::os::raw::c_double;
    pub fn GEfromDeviceY(value: ::std::os::raw::c_double, to: GEUnit,
                         dd: pGEDevDesc) -> ::std::os::raw::c_double;
    pub fn GEtoDeviceY(value: ::std::os::raw::c_double, from: GEUnit,
                       dd: pGEDevDesc) -> ::std::os::raw::c_double;
    pub fn GEfromDeviceWidth(value: ::std::os::raw::c_double, to: GEUnit,
                             dd: pGEDevDesc) -> ::std::os::raw::c_double;
    pub fn GEtoDeviceWidth(value: ::std::os::raw::c_double, from: GEUnit,
                           dd: pGEDevDesc) -> ::std::os::raw::c_double;
    pub fn GEfromDeviceHeight(value: ::std::os::raw::c_double, to: GEUnit,
                              dd: pGEDevDesc) -> ::std::os::raw::c_double;
    pub fn GEtoDeviceHeight(value: ::std::os::raw::c_double, from: GEUnit,
                            dd: pGEDevDesc) -> ::std::os::raw::c_double;
    pub fn Rf_RGBpar(arg1: SEXP, arg2: ::std::os::raw::c_int) -> rcolor;
    pub fn Rf_RGBpar3(arg1: SEXP, arg2: ::std::os::raw::c_int, arg3: rcolor)
     -> rcolor;
    pub fn Rf_col2name(col: rcolor) -> *const ::std::os::raw::c_char;
    pub fn R_GE_str2col(s: *const ::std::os::raw::c_char) -> rcolor;
    pub fn GE_LENDpar(value: SEXP, ind: ::std::os::raw::c_int)
     -> R_GE_lineend;
    pub fn GE_LENDget(lend: R_GE_lineend) -> SEXP;
    pub fn GE_LJOINpar(value: SEXP, ind: ::std::os::raw::c_int)
     -> R_GE_linejoin;
    pub fn GE_LJOINget(ljoin: R_GE_linejoin) -> SEXP;
    pub fn GESetClip(x1: ::std::os::raw::c_double,
                     y1: ::std::os::raw::c_double,
                     x2: ::std::os::raw::c_double,
                     y2: ::std::os::raw::c_double, dd: pGEDevDesc);
    pub fn GENewPage(gc: pGEcontext, dd: pGEDevDesc);
    pub fn GELine(x1: ::std::os::raw::c_double, y1: ::std::os::raw::c_double,
                  x2: ::std::os::raw::c_double, y2: ::std::os::raw::c_double,
                  gc: pGEcontext, dd: pGEDevDesc);
    pub fn GEPolyline(n: ::std::os::raw::c_int,
                      x: *mut ::std::os::raw::c_double,
                      y: *mut ::std::os::raw::c_double, gc: pGEcontext,
                      dd: pGEDevDesc);
    pub fn GEPolygon(n: ::std::os::raw::c_int,
                     x: *mut ::std::os::raw::c_double,
                     y: *mut ::std::os::raw::c_double, gc: pGEcontext,
                     dd: pGEDevDesc);
    pub fn GEXspline(n: ::std::os::raw::c_int,
                     x: *mut ::std::os::raw::c_double,
                     y: *mut ::std::os::raw::c_double,
                     s: *mut ::std::os::raw::c_double, open: Rboolean,
                     repEnds: Rboolean, GA_draw: Rboolean, gc: pGEcontext,
                     dd: pGEDevDesc) -> SEXP;
    pub fn GECircle(x: ::std::os::raw::c_double, y: ::std::os::raw::c_double,
                    radius: ::std::os::raw::c_double, gc: pGEcontext,
                    dd: pGEDevDesc);
    pub fn GERect(x0: ::std::os::raw::c_double, y0: ::std::os::raw::c_double,
                  x1: ::std::os::raw::c_double, y1: ::std::os::raw::c_double,
                  gc: pGEcontext, dd: pGEDevDesc);
    pub fn GEPath(x: *mut ::std::os::raw::c_double,
                  y: *mut ::std::os::raw::c_double,
                  npoly: ::std::os::raw::c_int,
                  nper: *mut ::std::os::raw::c_int, winding: Rboolean,
                  gc: pGEcontext, dd: pGEDevDesc);
    pub fn GERaster(raster: *mut ::std::os::raw::c_uint,
                    w: ::std::os::raw::c_int, h: ::std::os::raw::c_int,
                    x: ::std::os::raw::c_double, y: ::std::os::raw::c_double,
                    width: ::std::os::raw::c_double,
                    height: ::std::os::raw::c_double,
                    angle: ::std::os::raw::c_double, interpolate: Rboolean,
                    gc: pGEcontext, dd: pGEDevDesc);
    pub fn GECap(dd: pGEDevDesc) -> SEXP;
    pub fn GEText(x: ::std::os::raw::c_double, y: ::std::os::raw::c_double,
                  str: *const ::std::os::raw::c_char, enc: cetype_t,
                  xc: ::std::os::raw::c_double, yc: ::std::os::raw::c_double,
                  rot: ::std::os::raw::c_double, gc: pGEcontext,
                  dd: pGEDevDesc);
    pub fn GEMode(mode: ::std::os::raw::c_int, dd: pGEDevDesc);
    pub fn GESymbol(x: ::std::os::raw::c_double, y: ::std::os::raw::c_double,
                    pch: ::std::os::raw::c_int,
                    size: ::std::os::raw::c_double, gc: pGEcontext,
                    dd: pGEDevDesc);
    pub fn GEPretty(lo: *mut ::std::os::raw::c_double,
                    up: *mut ::std::os::raw::c_double,
                    ndiv: *mut ::std::os::raw::c_int);
    pub fn GEMetricInfo(c: ::std::os::raw::c_int, gc: pGEcontext,
                        ascent: *mut ::std::os::raw::c_double,
                        descent: *mut ::std::os::raw::c_double,
                        width: *mut ::std::os::raw::c_double, dd: pGEDevDesc);
    pub fn GEStrWidth(str: *const ::std::os::raw::c_char, enc: cetype_t,
                      gc: pGEcontext, dd: pGEDevDesc)
     -> ::std::os::raw::c_double;
    pub fn GEStrHeight(str: *const ::std::os::raw::c_char, enc: cetype_t,
                       gc: pGEcontext, dd: pGEDevDesc)
     -> ::std::os::raw::c_double;
    pub fn GEStrMetric(str: *const ::std::os::raw::c_char, enc: cetype_t,
                       gc: pGEcontext, ascent: *mut ::std::os::raw::c_double,
                       descent: *mut ::std::os::raw::c_double,
                       width: *mut ::std::os::raw::c_double, dd: pGEDevDesc);
    pub fn GEstring_to_pch(pch: SEXP) -> ::std::os::raw::c_int;
    pub fn GE_LTYpar(arg1: SEXP, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_uint;
    pub fn GE_LTYget(arg1: ::std::os::raw::c_uint) -> SEXP;
    pub fn R_GE_rasterScale(sraster: *mut ::std::os::raw::c_uint,
                            sw: ::std::os::raw::c_int,
                            sh: ::std::os::raw::c_int,
                            draster: *mut ::std::os::raw::c_uint,
                            dw: ::std::os::raw::c_int,
                            dh: ::std::os::raw::c_int);
    pub fn R_GE_rasterInterpolate(sraster: *mut ::std::os::raw::c_uint,
                                  sw: ::std::os::raw::c_int,
                                  sh: ::std::os::raw::c_int,
                                  draster: *mut ::std::os::raw::c_uint,
                                  dw: ::std::os::raw::c_int,
                                  dh: ::std::os::raw::c_int);
    pub fn R_GE_rasterRotatedSize(w: ::std::os::raw::c_int,
                                  h: ::std::os::raw::c_int,
                                  angle: ::std::os::raw::c_double,
                                  wnew: *mut ::std::os::raw::c_int,
                                  hnew: *mut ::std::os::raw::c_int);
    pub fn R_GE_rasterRotatedOffset(w: ::std::os::raw::c_int,
                                    h: ::std::os::raw::c_int,
                                    angle: ::std::os::raw::c_double,
                                    botleft: ::std::os::raw::c_int,
                                    xoff: *mut ::std::os::raw::c_double,
                                    yoff: *mut ::std::os::raw::c_double);
    pub fn R_GE_rasterResizeForRotation(sraster: *mut ::std::os::raw::c_uint,
                                        w: ::std::os::raw::c_int,
                                        h: ::std::os::raw::c_int,
                                        newRaster:
                                            *mut ::std::os::raw::c_uint,
                                        wnew: ::std::os::raw::c_int,
                                        hnew: ::std::os::raw::c_int,
                                        gc: pGEcontext);
    pub fn R_GE_rasterRotate(sraster: *mut ::std::os::raw::c_uint,
                             w: ::std::os::raw::c_int,
                             h: ::std::os::raw::c_int,
                             angle: ::std::os::raw::c_double,
                             draster: *mut ::std::os::raw::c_uint,
                             gc: pGEcontext, perPixelAlpha: Rboolean);
    pub fn GEExpressionWidth(expr: SEXP, gc: pGEcontext, dd: pGEDevDesc)
     -> ::std::os::raw::c_double;
    pub fn GEExpressionHeight(expr: SEXP, gc: pGEcontext, dd: pGEDevDesc)
     -> ::std::os::raw::c_double;
    pub fn GEExpressionMetric(expr: SEXP, gc: pGEcontext,
                              ascent: *mut ::std::os::raw::c_double,
                              descent: *mut ::std::os::raw::c_double,
                              width: *mut ::std::os::raw::c_double,
                              dd: pGEDevDesc);
    pub fn GEMathText(x: ::std::os::raw::c_double,
                      y: ::std::os::raw::c_double, expr: SEXP,
                      xc: ::std::os::raw::c_double,
                      yc: ::std::os::raw::c_double,
                      rot: ::std::os::raw::c_double, gc: pGEcontext,
                      dd: pGEDevDesc);
    pub fn GEcontourLines(x: *mut ::std::os::raw::c_double,
                          nx: ::std::os::raw::c_int,
                          y: *mut ::std::os::raw::c_double,
                          ny: ::std::os::raw::c_int,
                          z: *mut ::std::os::raw::c_double,
                          levels: *mut ::std::os::raw::c_double,
                          nl: ::std::os::raw::c_int) -> SEXP;
    pub fn R_GE_VStrWidth(s: *const ::std::os::raw::c_char, enc: cetype_t,
                          gc: pGEcontext, dd: pGEDevDesc)
     -> ::std::os::raw::c_double;
    pub fn R_GE_VStrHeight(s: *const ::std::os::raw::c_char, enc: cetype_t,
                           gc: pGEcontext, dd: pGEDevDesc)
     -> ::std::os::raw::c_double;
    pub fn R_GE_VText(x: ::std::os::raw::c_double,
                      y: ::std::os::raw::c_double,
                      s: *const ::std::os::raw::c_char, enc: cetype_t,
                      x_justify: ::std::os::raw::c_double,
                      y_justify: ::std::os::raw::c_double,
                      rotation: ::std::os::raw::c_double, gc: pGEcontext,
                      dd: pGEDevDesc);
    pub fn GEcurrentDevice() -> pGEDevDesc;
    pub fn GEdeviceDirty(dd: pGEDevDesc) -> Rboolean;
    pub fn GEdirtyDevice(dd: pGEDevDesc);
    pub fn GEcheckState(dd: pGEDevDesc) -> Rboolean;
    pub fn GErecording(call: SEXP, dd: pGEDevDesc) -> Rboolean;
    pub fn GErecordGraphicOperation(op: SEXP, args: SEXP, dd: pGEDevDesc);
    pub fn GEinitDisplayList(dd: pGEDevDesc);
    pub fn GEplayDisplayList(dd: pGEDevDesc);
    pub fn GEcopyDisplayList(fromDevice: ::std::os::raw::c_int);
    pub fn GEcreateSnapshot(dd: pGEDevDesc) -> SEXP;
    pub fn GEplaySnapshot(snapshot: SEXP, dd: pGEDevDesc);
    pub fn GEonExit();
    pub fn GEnullDevice();
    pub fn Rf_CreateAtVector(arg1: *mut ::std::os::raw::c_double,
                             arg2: *mut ::std::os::raw::c_double,
                             arg3: ::std::os::raw::c_int, arg4: Rboolean)
     -> SEXP;
    pub fn Rf_GAxisPars(min: *mut ::std::os::raw::c_double,
                        max: *mut ::std::os::raw::c_double,
                        n: *mut ::std::os::raw::c_int, log: Rboolean,
                        axis: ::std::os::raw::c_int);
    pub fn ilaver_(major: *mut ::std::os::raw::c_int,
                   minor: *mut ::std::os::raw::c_int,
                   patch: *mut ::std::os::raw::c_int);
    pub fn dbdsqr_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ncvt: *const ::std::os::raw::c_int,
                   nru: *const ::std::os::raw::c_int,
                   ncc: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *const ::std::os::raw::c_int,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *const ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn ddisna_(job: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   sep: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgbbrd_(vect: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   ncc: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   Rf_pt: *mut ::std::os::raw::c_double,
                   ldpt: *const ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgbcon_(norm: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgbequ_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   r: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   rowcnd: *mut ::std::os::raw::c_double,
                   colcnd: *mut ::std::os::raw::c_double,
                   amax: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgbrfs_(trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   afb: *mut ::std::os::raw::c_double,
                   ldafb: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgbsv_(n: *const ::std::os::raw::c_int,
                  kl: *const ::std::os::raw::c_int,
                  ku: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  ab: *mut ::std::os::raw::c_double,
                  ldab: *const ::std::os::raw::c_int,
                  ipiv: *mut ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dgbsvx_(fact: *const ::std::os::raw::c_int,
                   trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   afb: *mut ::std::os::raw::c_double,
                   ldafb: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   equed: *const ::std::os::raw::c_char,
                   r: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgbtf2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgbtrf_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgbtrs_(trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   ipiv: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgebak_(job: *const ::std::os::raw::c_char,
                   side: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   m: *const ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   ldv: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgebal_(job: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgebd2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   tauq: *mut ::std::os::raw::c_double,
                   taup: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgebrd_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   tauq: *mut ::std::os::raw::c_double,
                   taup: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgecon_(norm: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgeequ_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   r: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   rowcnd: *mut ::std::os::raw::c_double,
                   colcnd: *mut ::std::os::raw::c_double,
                   amax: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgees_(jobvs: *const ::std::os::raw::c_char,
                  sort: *const ::std::os::raw::c_char,
                  select:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *const ::std::os::raw::c_double,
                                                                 arg2:
                                                                     *const ::std::os::raw::c_double)
                                                -> ::std::os::raw::c_int>,
                  n: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  sdim: *mut ::std::os::raw::c_int,
                  wr: *mut ::std::os::raw::c_double,
                  wi: *mut ::std::os::raw::c_double,
                  vs: *mut ::std::os::raw::c_double,
                  ldvs: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *const ::std::os::raw::c_int,
                  bwork: *mut ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dgeesx_(jobvs: *const ::std::os::raw::c_char,
                   sort: *const ::std::os::raw::c_char,
                   select:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_double,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_double)
                                                 -> ::std::os::raw::c_int>,
                   sense: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   sdim: *mut ::std::os::raw::c_int,
                   wr: *mut ::std::os::raw::c_double,
                   wi: *mut ::std::os::raw::c_double,
                   vs: *mut ::std::os::raw::c_double,
                   ldvs: *const ::std::os::raw::c_int,
                   rconde: *mut ::std::os::raw::c_double,
                   rcondv: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *const ::std::os::raw::c_int,
                   bwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgeev_(jobvl: *const ::std::os::raw::c_char,
                  jobvr: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  wr: *mut ::std::os::raw::c_double,
                  wi: *mut ::std::os::raw::c_double,
                  vl: *mut ::std::os::raw::c_double,
                  ldvl: *const ::std::os::raw::c_int,
                  vr: *mut ::std::os::raw::c_double,
                  ldvr: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dgeevx_(balanc: *const ::std::os::raw::c_char,
                   jobvl: *const ::std::os::raw::c_char,
                   jobvr: *const ::std::os::raw::c_char,
                   sense: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   wr: *mut ::std::os::raw::c_double,
                   wi: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   ldvl: *const ::std::os::raw::c_int,
                   vr: *mut ::std::os::raw::c_double,
                   ldvr: *const ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   abnrm: *mut ::std::os::raw::c_double,
                   rconde: *mut ::std::os::raw::c_double,
                   rcondv: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgehd2_(n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgehrd_(n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgelq2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgelqf_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgels_(trans: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dgelss_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   rank: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgelsy_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int,
                   rcond: *const ::std::os::raw::c_double,
                   rank: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgeql2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgeqlf_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgeqp3_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgeqr2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgeqrf_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgerfs_(trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   af: *mut ::std::os::raw::c_double,
                   ldaf: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgerq2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgerqf_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgesv_(n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  ipiv: *mut ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dgesvd_(jobu: *const ::std::os::raw::c_char,
                   jobvt: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *const ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgesvx_(fact: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   af: *mut ::std::os::raw::c_double,
                   ldaf: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   equed: *mut ::std::os::raw::c_char,
                   r: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgetf2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgetrf_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgetri_(n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgetrs_(trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dggbak_(job: *const ::std::os::raw::c_char,
                   side: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   lscale: *mut ::std::os::raw::c_double,
                   rscale: *mut ::std::os::raw::c_double,
                   m: *const ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   ldv: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dggbal_(job: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int,
                   lscale: *mut ::std::os::raw::c_double,
                   rscale: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgges_(jobvsl: *const ::std::os::raw::c_char,
                  jobvsr: *const ::std::os::raw::c_char,
                  sort: *const ::std::os::raw::c_char,
                  delztg:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut ::std::os::raw::c_double,
                                                                 arg2:
                                                                     *mut ::std::os::raw::c_double,
                                                                 arg3:
                                                                     *mut ::std::os::raw::c_double)
                                                -> ::std::os::raw::c_int>,
                  n: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  alphar: *mut ::std::os::raw::c_double,
                  alphai: *mut ::std::os::raw::c_double,
                  Rf_beta: *const ::std::os::raw::c_double,
                  vsl: *mut ::std::os::raw::c_double,
                  ldvsl: *const ::std::os::raw::c_int,
                  vsr: *mut ::std::os::raw::c_double,
                  ldvsr: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *const ::std::os::raw::c_int,
                  bwork: *mut ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dggglm_(n: *const ::std::os::raw::c_int,
                   m: *const ::std::os::raw::c_int,
                   p: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   y: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgghrd_(compq: *const ::std::os::raw::c_char,
                   compz: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgglse_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   p: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dggqrf_(n: *const ::std::os::raw::c_int,
                   m: *const ::std::os::raw::c_int,
                   p: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   taua: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   taub: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dggrqf_(m: *const ::std::os::raw::c_int,
                   p: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   taua: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   taub: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgtcon_(norm: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   dl: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   du: *mut ::std::os::raw::c_double,
                   du2: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgtrfs_(trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   dl: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   du: *mut ::std::os::raw::c_double,
                   dlf: *mut ::std::os::raw::c_double,
                   Rf_df: *mut ::std::os::raw::c_double,
                   duf: *mut ::std::os::raw::c_double,
                   du2: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgtsv_(n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  dl: *mut ::std::os::raw::c_double,
                  d: *mut ::std::os::raw::c_double,
                  du: *mut ::std::os::raw::c_double,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dgtsvx_(fact: *const ::std::os::raw::c_int,
                   trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   dl: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   du: *mut ::std::os::raw::c_double,
                   dlf: *mut ::std::os::raw::c_double,
                   Rf_df: *mut ::std::os::raw::c_double,
                   duf: *mut ::std::os::raw::c_double,
                   du2: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgttrf_(n: *const ::std::os::raw::c_int,
                   dl: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   du: *mut ::std::os::raw::c_double,
                   du2: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgttrs_(trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   dl: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   du: *mut ::std::os::raw::c_double,
                   du2: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dopgtr_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   tau: *const ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dopmtr_(side: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorg2l_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorg2r_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorgbr_(vect: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorghr_(n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorgl2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorglq_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorgql_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorgqr_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorgr2_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorgrq_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorgtr_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorm2l_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorm2r_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormbr_(vect: *const ::std::os::raw::c_char,
                   side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormhr_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dorml2_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormlq_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormql_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormqr_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormr2_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormrq_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormtr_(side: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpbcon_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpbequ_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   scond: *mut ::std::os::raw::c_double,
                   amax: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpbrfs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   afb: *const ::std::os::raw::c_double,
                   ldafb: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpbstf_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpbsv_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  kd: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  ab: *mut ::std::os::raw::c_double,
                  ldab: *const ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dpbsvx_(fact: *const ::std::os::raw::c_int,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   afb: *mut ::std::os::raw::c_double,
                   ldafb: *const ::std::os::raw::c_int,
                   equed: *mut ::std::os::raw::c_char,
                   s: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpbtf2_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpbtrf_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpbtrs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpocon_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpoequ_(n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   scond: *mut ::std::os::raw::c_double,
                   amax: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dporfs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   af: *const ::std::os::raw::c_double,
                   ldaf: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dposv_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dposvx_(fact: *const ::std::os::raw::c_int,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   af: *mut ::std::os::raw::c_double,
                   ldaf: *const ::std::os::raw::c_int,
                   equed: *mut ::std::os::raw::c_char,
                   s: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpotf2_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpotrf_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpotri_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpotrs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dppcon_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dppequ_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   scond: *mut ::std::os::raw::c_double,
                   amax: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpprfs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   afp: *const ::std::os::raw::c_double,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dppsv_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  ap: *const ::std::os::raw::c_double,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dppsvx_(fact: *const ::std::os::raw::c_int,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   afp: *mut ::std::os::raw::c_double,
                   equed: *mut ::std::os::raw::c_char,
                   s: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpptrf_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpptri_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpptrs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dptcon_(n: *const ::std::os::raw::c_int,
                   d: *const ::std::os::raw::c_double,
                   e: *const ::std::os::raw::c_double,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpteqr_(compz: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dptrfs_(n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   d: *const ::std::os::raw::c_double,
                   e: *const ::std::os::raw::c_double,
                   Rf_df: *const ::std::os::raw::c_double,
                   ef: *const ::std::os::raw::c_double,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dptsv_(n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  d: *mut ::std::os::raw::c_double,
                  e: *mut ::std::os::raw::c_double,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dptsvx_(fact: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   d: *const ::std::os::raw::c_double,
                   e: *const ::std::os::raw::c_double,
                   Rf_df: *mut ::std::os::raw::c_double,
                   ef: *mut ::std::os::raw::c_double,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpttrf_(n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpttrs_(n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   d: *const ::std::os::raw::c_double,
                   e: *const ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn drscl_(n: *const ::std::os::raw::c_int,
                  da: *const ::std::os::raw::c_double,
                  x: *mut ::std::os::raw::c_double,
                  incx: *const ::std::os::raw::c_int);
    pub fn dsbev_(jobz: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  kd: *const ::std::os::raw::c_int,
                  ab: *mut ::std::os::raw::c_double,
                  ldab: *const ::std::os::raw::c_int,
                  w: *mut ::std::os::raw::c_double,
                  z: *mut ::std::os::raw::c_double,
                  ldz: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  info: *mut ::std::os::raw::c_int);
    pub fn dsbevd_(jobz: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsbevx_(jobz: *const ::std::os::raw::c_char,
                   range: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   vl: *const ::std::os::raw::c_double,
                   vu: *const ::std::os::raw::c_double,
                   il: *const ::std::os::raw::c_int,
                   iu: *const ::std::os::raw::c_int,
                   abstol: *const ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   ifail: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsbgst_(vect: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ka: *const ::std::os::raw::c_int,
                   kb: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   bb: *mut ::std::os::raw::c_double,
                   ldbb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsbgv_(jobz: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  ka: *const ::std::os::raw::c_int,
                  kb: *const ::std::os::raw::c_int,
                  ab: *mut ::std::os::raw::c_double,
                  ldab: *const ::std::os::raw::c_int,
                  bb: *mut ::std::os::raw::c_double,
                  ldbb: *const ::std::os::raw::c_int,
                  w: *mut ::std::os::raw::c_double,
                  z: *mut ::std::os::raw::c_double,
                  ldz: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  info: *mut ::std::os::raw::c_int);
    pub fn dsbtrd_(vect: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dspcon_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   ipiv: *const ::std::os::raw::c_int,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dspev_(jobz: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  ap: *mut ::std::os::raw::c_double,
                  w: *mut ::std::os::raw::c_double,
                  z: *mut ::std::os::raw::c_double,
                  ldz: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  info: *mut ::std::os::raw::c_int);
    pub fn dspevd_(jobz: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dspevx_(jobz: *const ::std::os::raw::c_char,
                   range: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   vl: *const ::std::os::raw::c_double,
                   vu: *const ::std::os::raw::c_double,
                   il: *const ::std::os::raw::c_int,
                   iu: *const ::std::os::raw::c_int,
                   abstol: *const ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   ifail: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dspgst_(itype: *const ::std::os::raw::c_int,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   bp: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dspgv_(itype: *const ::std::os::raw::c_int,
                  jobz: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  ap: *mut ::std::os::raw::c_double,
                  bp: *mut ::std::os::raw::c_double,
                  w: *mut ::std::os::raw::c_double,
                  z: *mut ::std::os::raw::c_double,
                  ldz: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  info: *mut ::std::os::raw::c_int);
    pub fn dsprfs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   afp: *const ::std::os::raw::c_double,
                   ipiv: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dspsv_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  ap: *mut ::std::os::raw::c_double,
                  ipiv: *mut ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dspsvx_(fact: *const ::std::os::raw::c_int,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   afp: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsptrd_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   tau: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsptrf_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsptri_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   ipiv: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsptrs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   ipiv: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dstebz_(range: *const ::std::os::raw::c_char,
                   order: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   vl: *const ::std::os::raw::c_double,
                   vu: *const ::std::os::raw::c_double,
                   il: *const ::std::os::raw::c_int,
                   iu: *const ::std::os::raw::c_int,
                   abstol: *const ::std::os::raw::c_double,
                   d: *const ::std::os::raw::c_double,
                   e: *const ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   nsplit: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   iblock: *mut ::std::os::raw::c_int,
                   isplit: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dstedc_(compz: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dstein_(n: *const ::std::os::raw::c_int,
                   d: *const ::std::os::raw::c_double,
                   e: *const ::std::os::raw::c_double,
                   m: *const ::std::os::raw::c_int,
                   w: *const ::std::os::raw::c_double,
                   iblock: *const ::std::os::raw::c_int,
                   isplit: *const ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   ifail: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsteqr_(compz: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsterf_(n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dstev_(jobz: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  d: *mut ::std::os::raw::c_double,
                  e: *mut ::std::os::raw::c_double,
                  z: *mut ::std::os::raw::c_double,
                  ldz: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  info: *mut ::std::os::raw::c_int);
    pub fn dstevd_(jobz: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dstevx_(jobz: *const ::std::os::raw::c_char,
                   range: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   vl: *const ::std::os::raw::c_double,
                   vu: *const ::std::os::raw::c_double,
                   il: *const ::std::os::raw::c_int,
                   iu: *const ::std::os::raw::c_int,
                   abstol: *const ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   ifail: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsycon_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *const ::std::os::raw::c_int,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsyev_(jobz: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  w: *mut ::std::os::raw::c_double,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dsyevd_(jobz: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsyevx_(jobz: *const ::std::os::raw::c_char,
                   range: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   vl: *const ::std::os::raw::c_double,
                   vu: *const ::std::os::raw::c_double,
                   il: *const ::std::os::raw::c_int,
                   iu: *const ::std::os::raw::c_int,
                   abstol: *const ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   ifail: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsyevr_(jobz: *const ::std::os::raw::c_char,
                   range: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   vl: *const ::std::os::raw::c_double,
                   vu: *const ::std::os::raw::c_double,
                   il: *const ::std::os::raw::c_int,
                   iu: *const ::std::os::raw::c_int,
                   abstol: *const ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   isuppz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsygs2_(itype: *const ::std::os::raw::c_int,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsygst_(itype: *const ::std::os::raw::c_int,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsygv_(itype: *const ::std::os::raw::c_int,
                  jobz: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  w: *mut ::std::os::raw::c_double,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dsyrfs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   af: *const ::std::os::raw::c_double,
                   ldaf: *const ::std::os::raw::c_int,
                   ipiv: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsysv_(uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  ipiv: *mut ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dsysvx_(fact: *const ::std::os::raw::c_int,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   af: *mut ::std::os::raw::c_double,
                   ldaf: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsytd2_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   tau: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsytf2_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsytrd_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsytrf_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsytri_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsytrs_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtbcon_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtbrfs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtbtrs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtgevc_(side: *const ::std::os::raw::c_char,
                   howmny: *const ::std::os::raw::c_char,
                   select: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   vl: *mut ::std::os::raw::c_double,
                   ldvl: *const ::std::os::raw::c_int,
                   vr: *mut ::std::os::raw::c_double,
                   ldvr: *const ::std::os::raw::c_int,
                   mm: *const ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtgsja_(jobu: *const ::std::os::raw::c_char,
                   jobv: *const ::std::os::raw::c_char,
                   jobq: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   p: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   l: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   tola: *const ::std::os::raw::c_double,
                   tolb: *const ::std::os::raw::c_double,
                   alpha: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *const ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   ldv: *const ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   ncycle: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtpcon_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtprfs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtptri_(uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtptrs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrcon_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrevc_(side: *const ::std::os::raw::c_char,
                   howmny: *const ::std::os::raw::c_char,
                   select: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   t: *const ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int,
                   vl: *mut ::std::os::raw::c_double,
                   ldvl: *const ::std::os::raw::c_int,
                   vr: *mut ::std::os::raw::c_double,
                   ldvr: *const ::std::os::raw::c_int,
                   mm: *const ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrexc_(compq: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   t: *mut ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   ifst: *mut ::std::os::raw::c_int,
                   ILST: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrrfs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   ferr: *mut ::std::os::raw::c_double,
                   berr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrsen_(job: *const ::std::os::raw::c_char,
                   compq: *const ::std::os::raw::c_char,
                   select: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   t: *mut ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   wr: *mut ::std::os::raw::c_double,
                   wi: *mut ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   sep: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrsna_(job: *const ::std::os::raw::c_char,
                   howmny: *const ::std::os::raw::c_char,
                   select: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   t: *const ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int,
                   vl: *const ::std::os::raw::c_double,
                   ldvl: *const ::std::os::raw::c_int,
                   vr: *const ::std::os::raw::c_double,
                   ldvr: *const ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   sep: *mut ::std::os::raw::c_double,
                   mm: *const ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrsyl_(trana: *const ::std::os::raw::c_char,
                   tranb: *const ::std::os::raw::c_char,
                   isgn: *const ::std::os::raw::c_int,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrti2_(uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrtri_(uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtrtrs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dhgeqz_(job: *const ::std::os::raw::c_char,
                   compq: *const ::std::os::raw::c_char,
                   compz: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ILO: *const ::std::os::raw::c_int,
                   IHI: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   alphar: *mut ::std::os::raw::c_double,
                   alphai: *mut ::std::os::raw::c_double,
                   Rf_beta: *const ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dhsein_(side: *const ::std::os::raw::c_char,
                   eigsrc: *const ::std::os::raw::c_char,
                   initv: *const ::std::os::raw::c_char,
                   select: *mut ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   h: *mut ::std::os::raw::c_double,
                   ldh: *const ::std::os::raw::c_int,
                   wr: *mut ::std::os::raw::c_double,
                   wi: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   ldvl: *const ::std::os::raw::c_int,
                   vr: *mut ::std::os::raw::c_double,
                   ldvr: *const ::std::os::raw::c_int,
                   mm: *const ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   ifaill: *mut ::std::os::raw::c_int,
                   ifailr: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dhseqr_(job: *const ::std::os::raw::c_char,
                   compz: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   h: *mut ::std::os::raw::c_double,
                   ldh: *const ::std::os::raw::c_int,
                   wr: *mut ::std::os::raw::c_double,
                   wi: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlabad_(small: *mut ::std::os::raw::c_double,
                   large: *mut ::std::os::raw::c_double);
    pub fn dlabrd_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   nb: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   tauq: *mut ::std::os::raw::c_double,
                   taup: *mut ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   y: *mut ::std::os::raw::c_double,
                   ldy: *const ::std::os::raw::c_int);
    pub fn dlacon_(n: *const ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   isgn: *mut ::std::os::raw::c_int,
                   est: *mut ::std::os::raw::c_double,
                   kase: *mut ::std::os::raw::c_int);
    pub fn dlacpy_(uplo: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int);
    pub fn dladiv_(a: *const ::std::os::raw::c_double,
                   b: *const ::std::os::raw::c_double,
                   c: *const ::std::os::raw::c_double,
                   d: *const ::std::os::raw::c_double,
                   p: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double);
    pub fn dlae2_(a: *const ::std::os::raw::c_double,
                  b: *const ::std::os::raw::c_double,
                  c: *const ::std::os::raw::c_double,
                  rt1: *mut ::std::os::raw::c_double,
                  rt2: *mut ::std::os::raw::c_double);
    pub fn dlaebz_(ijob: *const ::std::os::raw::c_int,
                   nitmax: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   mmax: *const ::std::os::raw::c_int,
                   minp: *const ::std::os::raw::c_int,
                   nbmin: *const ::std::os::raw::c_int,
                   abstol: *const ::std::os::raw::c_double,
                   reltol: *const ::std::os::raw::c_double,
                   pivmin: *const ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   e2: *mut ::std::os::raw::c_double,
                   nval: *mut ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   mout: *mut ::std::os::raw::c_int,
                   nab: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed0_(icompq: *const ::std::os::raw::c_int,
                   qsiz: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   qstore: *mut ::std::os::raw::c_double,
                   ldqs: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed1_(n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   indxq: *mut ::std::os::raw::c_int,
                   rho: *const ::std::os::raw::c_double,
                   cutpnt: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed2_(k: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   indxq: *mut ::std::os::raw::c_int,
                   rho: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   dlamda: *mut ::std::os::raw::c_double,
                   w: *mut ::std::os::raw::c_double,
                   q2: *mut ::std::os::raw::c_double,
                   indx: *mut ::std::os::raw::c_int,
                   indxc: *mut ::std::os::raw::c_int,
                   indxp: *mut ::std::os::raw::c_int,
                   coltyp: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed3_(k: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   n1: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   rho: *const ::std::os::raw::c_double,
                   dlamda: *mut ::std::os::raw::c_double,
                   q2: *mut ::std::os::raw::c_double,
                   indx: *mut ::std::os::raw::c_int,
                   ctot: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed4_(n: *const ::std::os::raw::c_int,
                   i: *const ::std::os::raw::c_int,
                   d: *const ::std::os::raw::c_double,
                   z: *const ::std::os::raw::c_double,
                   delta: *const ::std::os::raw::c_double,
                   rho: *const ::std::os::raw::c_double,
                   dlam: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed5_(i: *const ::std::os::raw::c_int,
                   d: *const ::std::os::raw::c_double,
                   z: *const ::std::os::raw::c_double,
                   delta: *mut ::std::os::raw::c_double,
                   rho: *const ::std::os::raw::c_double,
                   dlam: *mut ::std::os::raw::c_double);
    pub fn dlaed6_(kniter: *const ::std::os::raw::c_int,
                   orgati: *const ::std::os::raw::c_int,
                   rho: *const ::std::os::raw::c_double,
                   d: *const ::std::os::raw::c_double,
                   z: *const ::std::os::raw::c_double,
                   finit: *const ::std::os::raw::c_double,
                   tau: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed7_(icompq: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   qsiz: *const ::std::os::raw::c_int,
                   tlvls: *const ::std::os::raw::c_int,
                   curlvl: *const ::std::os::raw::c_int,
                   curpbm: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   indxq: *mut ::std::os::raw::c_int,
                   rho: *const ::std::os::raw::c_double,
                   cutpnt: *const ::std::os::raw::c_int,
                   qstore: *mut ::std::os::raw::c_double,
                   qptr: *mut ::std::os::raw::c_double,
                   prmptr: *const ::std::os::raw::c_int,
                   perm: *const ::std::os::raw::c_int,
                   givptr: *const ::std::os::raw::c_int,
                   givcol: *const ::std::os::raw::c_int,
                   givnum: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed8_(icompq: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   qsiz: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   indxq: *const ::std::os::raw::c_int,
                   rho: *mut ::std::os::raw::c_double,
                   cutpnt: *const ::std::os::raw::c_int,
                   z: *const ::std::os::raw::c_double,
                   dlamda: *mut ::std::os::raw::c_double,
                   q2: *mut ::std::os::raw::c_double,
                   ldq2: *const ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   perm: *mut ::std::os::raw::c_int,
                   givptr: *mut ::std::os::raw::c_int,
                   givcol: *mut ::std::os::raw::c_int,
                   givnum: *mut ::std::os::raw::c_double,
                   indxp: *mut ::std::os::raw::c_int,
                   indx: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaed9_(k: *const ::std::os::raw::c_int,
                   kstart: *const ::std::os::raw::c_int,
                   kstop: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   rho: *const ::std::os::raw::c_double,
                   dlamda: *const ::std::os::raw::c_double,
                   w: *const ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   lds: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaeda_(n: *const ::std::os::raw::c_int,
                   tlvls: *const ::std::os::raw::c_int,
                   curlvl: *const ::std::os::raw::c_int,
                   curpbm: *const ::std::os::raw::c_int,
                   prmptr: *const ::std::os::raw::c_int,
                   perm: *const ::std::os::raw::c_int,
                   givptr: *const ::std::os::raw::c_int,
                   givcol: *const ::std::os::raw::c_int,
                   givnum: *const ::std::os::raw::c_double,
                   q: *const ::std::os::raw::c_double,
                   qptr: *const ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ztemp: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaein_(rightv: *const ::std::os::raw::c_int,
                   noinit: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   h: *const ::std::os::raw::c_double,
                   ldh: *const ::std::os::raw::c_int,
                   wr: *const ::std::os::raw::c_double,
                   wi: *const ::std::os::raw::c_double,
                   vr: *mut ::std::os::raw::c_double,
                   vi: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   eps3: *const ::std::os::raw::c_double,
                   smlnum: *const ::std::os::raw::c_double,
                   bignum: *const ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaev2_(a: *const ::std::os::raw::c_double,
                   b: *const ::std::os::raw::c_double,
                   c: *const ::std::os::raw::c_double,
                   rt1: *mut ::std::os::raw::c_double,
                   rt2: *mut ::std::os::raw::c_double,
                   cs1: *mut ::std::os::raw::c_double,
                   sn1: *mut ::std::os::raw::c_double);
    pub fn dlaexc_(wantq: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   t: *mut ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   j1: *const ::std::os::raw::c_int,
                   n1: *const ::std::os::raw::c_int,
                   n2: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlag2_(a: *const ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *const ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  safmin: *const ::std::os::raw::c_double,
                  scale1: *mut ::std::os::raw::c_double,
                  scale2: *mut ::std::os::raw::c_double,
                  wr1: *mut ::std::os::raw::c_double,
                  wr2: *mut ::std::os::raw::c_double,
                  wi: *mut ::std::os::raw::c_double);
    pub fn dlags2_(upper: *const ::std::os::raw::c_int,
                   a1: *const ::std::os::raw::c_double,
                   a2: *const ::std::os::raw::c_double,
                   a3: *const ::std::os::raw::c_double,
                   b1: *const ::std::os::raw::c_double,
                   b2: *const ::std::os::raw::c_double,
                   b3: *const ::std::os::raw::c_double,
                   csu: *mut ::std::os::raw::c_double,
                   snu: *mut ::std::os::raw::c_double,
                   csv: *mut ::std::os::raw::c_double,
                   snv: *mut ::std::os::raw::c_double,
                   csq: *mut ::std::os::raw::c_double,
                   snq: *mut ::std::os::raw::c_double);
    pub fn dlagtf_(n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lambda: *const ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   tol: *const ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   _in: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlagtm_(trans: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int,
                   alpha: *const ::std::os::raw::c_double,
                   dl: *const ::std::os::raw::c_double,
                   d: *const ::std::os::raw::c_double,
                   du: *const ::std::os::raw::c_double,
                   x: *const ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   Rf_beta: *const ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int);
    pub fn dlagts_(job: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   b: *const ::std::os::raw::c_double,
                   c: *const ::std::os::raw::c_double,
                   d: *const ::std::os::raw::c_double,
                   _in: *const ::std::os::raw::c_int,
                   y: *mut ::std::os::raw::c_double,
                   tol: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlahqr_(wantt: *const ::std::os::raw::c_int,
                   wantz: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   ilo: *const ::std::os::raw::c_int,
                   ihi: *const ::std::os::raw::c_int,
                   H: *mut ::std::os::raw::c_double,
                   ldh: *const ::std::os::raw::c_int,
                   wr: *mut ::std::os::raw::c_double,
                   wi: *mut ::std::os::raw::c_double,
                   iloz: *const ::std::os::raw::c_int,
                   ihiz: *const ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaic1_(job: *const ::std::os::raw::c_int,
                   j: *const ::std::os::raw::c_int,
                   x: *const ::std::os::raw::c_double,
                   sest: *const ::std::os::raw::c_double,
                   w: *const ::std::os::raw::c_double,
                   gamma: *const ::std::os::raw::c_double,
                   sestpr: *mut ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double);
    pub fn dlaln2_(ltrans: *const ::std::os::raw::c_int,
                   na: *const ::std::os::raw::c_int,
                   nw: *const ::std::os::raw::c_int,
                   smin: *const ::std::os::raw::c_double,
                   ca: *const ::std::os::raw::c_double,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   d1: *const ::std::os::raw::c_double,
                   d2: *const ::std::os::raw::c_double,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   wr: *const ::std::os::raw::c_double,
                   wi: *const ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   xnorm: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlamch_(cmach: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn dlamrg_(n1: *const ::std::os::raw::c_int,
                   n2: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   dtrd1: *const ::std::os::raw::c_int,
                   dtrd2: *const ::std::os::raw::c_int,
                   index: *mut ::std::os::raw::c_int);
    pub fn dlangb_(norm: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlange_(norm: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlangt_(norm: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   dl: *const ::std::os::raw::c_double,
                   d: *const ::std::os::raw::c_double,
                   du: *const ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlanhs_(norm: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlansb_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlansp_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlanst_(norm: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   d: *const ::std::os::raw::c_double,
                   e: *const ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlansy_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlantb_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlantp_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlantr_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlanv2_(a: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   rt1r: *mut ::std::os::raw::c_double,
                   rt1i: *mut ::std::os::raw::c_double,
                   rt2r: *mut ::std::os::raw::c_double,
                   rt2i: *mut ::std::os::raw::c_double,
                   cs: *mut ::std::os::raw::c_double,
                   sn: *mut ::std::os::raw::c_double);
    pub fn dlapll_(n: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   incx: *const ::std::os::raw::c_int,
                   y: *mut ::std::os::raw::c_double,
                   incy: *const ::std::os::raw::c_int,
                   ssmin: *mut ::std::os::raw::c_double);
    pub fn dlapmt_(forwrd: *const ::std::os::raw::c_int,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int);
    pub fn dlapy2_(x: *const ::std::os::raw::c_double,
                   y: *const ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlapy3_(x: *const ::std::os::raw::c_double,
                   y: *const ::std::os::raw::c_double,
                   z: *const ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlaqgb_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   r: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   rowcnd: *mut ::std::os::raw::c_double,
                   colcnd: *mut ::std::os::raw::c_double,
                   amax: *const ::std::os::raw::c_double,
                   equed: *mut ::std::os::raw::c_char);
    pub fn dlaqge_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   r: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   rowcnd: *mut ::std::os::raw::c_double,
                   colcnd: *mut ::std::os::raw::c_double,
                   amax: *const ::std::os::raw::c_double,
                   equed: *mut ::std::os::raw::c_char);
    pub fn dlaqsb_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   s: *const ::std::os::raw::c_double,
                   scond: *const ::std::os::raw::c_double,
                   amax: *const ::std::os::raw::c_double,
                   equed: *mut ::std::os::raw::c_char);
    pub fn dlaqsp_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   s: *const ::std::os::raw::c_double,
                   scond: *const ::std::os::raw::c_double,
                   amax: *const ::std::os::raw::c_double,
                   equed: *mut ::std::os::raw::c_int);
    pub fn dlaqsy_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   s: *const ::std::os::raw::c_double,
                   scond: *const ::std::os::raw::c_double,
                   amax: *const ::std::os::raw::c_double,
                   equed: *mut ::std::os::raw::c_int);
    pub fn dlaqtr_(ltran: *const ::std::os::raw::c_int,
                   lreal: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   t: *const ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   w: *const ::std::os::raw::c_double,
                   scale: *mut ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlar2v_(n: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   y: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   incx: *const ::std::os::raw::c_int,
                   c: *const ::std::os::raw::c_double,
                   s: *const ::std::os::raw::c_double,
                   incc: *const ::std::os::raw::c_int);
    pub fn dlarf_(side: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  v: *const ::std::os::raw::c_double,
                  incv: *const ::std::os::raw::c_int,
                  tau: *const ::std::os::raw::c_double,
                  c: *mut ::std::os::raw::c_double,
                  ldc: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double);
    pub fn dlarfb_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   direct: *const ::std::os::raw::c_char,
                   storev: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   v: *const ::std::os::raw::c_double,
                   ldv: *const ::std::os::raw::c_int,
                   t: *const ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int);
    pub fn dlarfg_(n: *const ::std::os::raw::c_int,
                   alpha: *const ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   incx: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double);
    pub fn dlarft_(direct: *const ::std::os::raw::c_char,
                   storev: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   ldv: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   t: *mut ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int);
    pub fn dlarfx_(side: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   v: *const ::std::os::raw::c_double,
                   tau: *const ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double);
    pub fn dlargv_(n: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   incx: *const ::std::os::raw::c_int,
                   y: *mut ::std::os::raw::c_double,
                   incy: *const ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   incc: *const ::std::os::raw::c_int);
    pub fn dlarnv_(idist: *const ::std::os::raw::c_int,
                   iseed: *mut ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double);
    pub fn dlartg_(f: *const ::std::os::raw::c_double,
                   g: *const ::std::os::raw::c_double,
                   cs: *mut ::std::os::raw::c_double,
                   sn: *mut ::std::os::raw::c_double,
                   r: *mut ::std::os::raw::c_double);
    pub fn dlartv_(n: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   incx: *const ::std::os::raw::c_int,
                   y: *mut ::std::os::raw::c_double,
                   incy: *const ::std::os::raw::c_int,
                   c: *const ::std::os::raw::c_double,
                   s: *const ::std::os::raw::c_double,
                   incc: *const ::std::os::raw::c_int);
    pub fn dlaruv_(iseed: *mut ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double);
    pub fn dlas2_(f: *const ::std::os::raw::c_double,
                  g: *const ::std::os::raw::c_double,
                  h: *const ::std::os::raw::c_double,
                  ssmin: *mut ::std::os::raw::c_double,
                  ssmax: *mut ::std::os::raw::c_double);
    pub fn dlascl_(_type: *const ::std::os::raw::c_char,
                   kl: *const ::std::os::raw::c_int,
                   ku: *const ::std::os::raw::c_int,
                   cfrom: *mut ::std::os::raw::c_double,
                   cto: *mut ::std::os::raw::c_double,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlaset_(uplo: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   alpha: *const ::std::os::raw::c_double,
                   Rf_beta: *const ::std::os::raw::c_double,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int);
    pub fn dlasq1_(n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasq2_(m: *const ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   qq: *mut ::std::os::raw::c_double,
                   ee: *mut ::std::os::raw::c_double,
                   eps: *const ::std::os::raw::c_double,
                   tol2: *const ::std::os::raw::c_double,
                   small2: *const ::std::os::raw::c_double,
                   sup: *mut ::std::os::raw::c_double,
                   kend: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasq3_(n: *mut ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   qq: *mut ::std::os::raw::c_double,
                   ee: *mut ::std::os::raw::c_double,
                   sup: *mut ::std::os::raw::c_double,
                   sigma: *mut ::std::os::raw::c_double,
                   kend: *mut ::std::os::raw::c_int,
                   off: *mut ::std::os::raw::c_int,
                   iphase: *mut ::std::os::raw::c_int,
                   libiconv: *const ::std::os::raw::c_int,
                   eps: *const ::std::os::raw::c_double,
                   tol2: *const ::std::os::raw::c_double,
                   small2: *const ::std::os::raw::c_double);
    pub fn dlasq4_(n: *const ::std::os::raw::c_int,
                   q: *const ::std::os::raw::c_double,
                   e: *const ::std::os::raw::c_double,
                   tau: *mut ::std::os::raw::c_double,
                   sup: *mut ::std::os::raw::c_double);
    pub fn dlasr_(side: *const ::std::os::raw::c_char,
                  pivot: *const ::std::os::raw::c_char,
                  direct: *const ::std::os::raw::c_char,
                  m: *const ::std::os::raw::c_int,
                  n: *const ::std::os::raw::c_int,
                  c: *const ::std::os::raw::c_double,
                  s: *const ::std::os::raw::c_double,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int);
    pub fn dlasrt_(id: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlassq_(n: *const ::std::os::raw::c_int,
                   x: *const ::std::os::raw::c_double,
                   incx: *const ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   sumsq: *mut ::std::os::raw::c_double);
    pub fn dlasv2_(f: *const ::std::os::raw::c_double,
                   g: *const ::std::os::raw::c_double,
                   h: *const ::std::os::raw::c_double,
                   ssmin: *mut ::std::os::raw::c_double,
                   ssmax: *mut ::std::os::raw::c_double,
                   snr: *mut ::std::os::raw::c_double,
                   csr: *mut ::std::os::raw::c_double,
                   snl: *mut ::std::os::raw::c_double,
                   csl: *mut ::std::os::raw::c_double);
    pub fn dlaswp_(n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   k1: *const ::std::os::raw::c_int,
                   k2: *const ::std::os::raw::c_int,
                   ipiv: *const ::std::os::raw::c_int,
                   incx: *const ::std::os::raw::c_int);
    pub fn dlasy2_(ltranl: *const ::std::os::raw::c_int,
                   ltranr: *const ::std::os::raw::c_int,
                   isgn: *const ::std::os::raw::c_int,
                   n1: *const ::std::os::raw::c_int,
                   n2: *const ::std::os::raw::c_int,
                   tl: *const ::std::os::raw::c_double,
                   ldtl: *const ::std::os::raw::c_int,
                   tr: *const ::std::os::raw::c_double,
                   ldtr: *const ::std::os::raw::c_int,
                   b: *const ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   ldx: *const ::std::os::raw::c_int,
                   xnorm: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasyf_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nb: *const ::std::os::raw::c_int,
                   kb: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   ldw: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlatbs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   normin: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   kd: *const ::std::os::raw::c_int,
                   ab: *const ::std::os::raw::c_double,
                   ldab: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   scale: *mut ::std::os::raw::c_double,
                   cnorm: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlatps_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   normin: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   ap: *const ::std::os::raw::c_double,
                   x: *mut ::std::os::raw::c_double,
                   scale: *mut ::std::os::raw::c_double,
                   cnorm: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlatrd_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nb: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   e: *mut ::std::os::raw::c_double,
                   tau: *mut ::std::os::raw::c_double,
                   w: *mut ::std::os::raw::c_double,
                   ldw: *const ::std::os::raw::c_int);
    pub fn dlatrs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   normin: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *const ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   x: *mut ::std::os::raw::c_double,
                   scale: *mut ::std::os::raw::c_double,
                   cnorm: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlauu2_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlauum_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn izmax1_(n: *const ::std::os::raw::c_int, cx: *mut Rcomplex,
                   incx: *const ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zgecon_(norm: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int, a: *const Rcomplex,
                   lda: *const ::std::os::raw::c_int,
                   anorm: *const ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double, work: *mut Rcomplex,
                   rwork: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgesv_(n: *const ::std::os::raw::c_int,
                  nrhs: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                  lda: *const ::std::os::raw::c_int,
                  ipiv: *mut ::std::os::raw::c_int, b: *mut Rcomplex,
                  ldb: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn zgeqp3_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *const ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *const ::std::os::raw::c_int,
                   rwork: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn zunmqr_(side: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *const ::std::os::raw::c_int, tau: *mut Rcomplex,
                   c: *mut Rcomplex, ldc: *const ::std::os::raw::c_int,
                   work: *mut Rcomplex, lwork: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn ztrtrs_(uplo: *const ::std::os::raw::c_char,
                   trans: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   nrhs: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *const ::std::os::raw::c_int, b: *mut Rcomplex,
                   ldb: *const ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgesvd_(jobu: *const ::std::os::raw::c_char,
                   jobvt: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *const ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double, u: *mut Rcomplex,
                   ldu: *const ::std::os::raw::c_int, vt: *mut Rcomplex,
                   ldvt: *const ::std::os::raw::c_int, work: *mut Rcomplex,
                   lwork: *const ::std::os::raw::c_int,
                   rwork: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn zheev_(jobz: *const ::std::os::raw::c_char,
                  uplo: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                  lda: *const ::std::os::raw::c_int,
                  w: *mut ::std::os::raw::c_double, work: *mut Rcomplex,
                  lwork: *const ::std::os::raw::c_int,
                  rwork: *mut ::std::os::raw::c_double,
                  info: *mut ::std::os::raw::c_int);
    pub fn zgeev_(jobvl: *const ::std::os::raw::c_char,
                  jobvr: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                  lda: *const ::std::os::raw::c_int, wr: *mut Rcomplex,
                  vl: *mut Rcomplex, ldvl: *const ::std::os::raw::c_int,
                  vr: *mut Rcomplex, ldvr: *const ::std::os::raw::c_int,
                  work: *mut Rcomplex, lwork: *const ::std::os::raw::c_int,
                  rwork: *mut ::std::os::raw::c_double,
                  info: *mut ::std::os::raw::c_int);
    pub fn dzsum1_(n: *const ::std::os::raw::c_int, CX: *mut Rcomplex,
                   incx: *const ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn zlacn2_(n: *const ::std::os::raw::c_int, v: *mut Rcomplex,
                   x: *mut Rcomplex, est: *mut ::std::os::raw::c_double,
                   kase: *mut ::std::os::raw::c_int,
                   isave: *mut ::std::os::raw::c_int);
    pub fn zlantr_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dbdsdc_(uplo: *mut ::std::os::raw::c_char,
                   compq: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *mut ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   iq: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgelsd_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   rank: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgesc2_(n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   rhs: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   jpiv: *mut ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double);
    pub fn dgesdd_(jobz: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *const ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *const ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgetc2_(n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   jpiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dggesx_(jobvsl: *mut ::std::os::raw::c_char,
                   jobvsr: *mut ::std::os::raw::c_char,
                   sort: *mut ::std::os::raw::c_char, delctg: L_fp,
                   sense: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   sdim: *mut ::std::os::raw::c_int,
                   alphar: *mut ::std::os::raw::c_double,
                   alphai: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   vsl: *mut ::std::os::raw::c_double,
                   ldvsl: *mut ::std::os::raw::c_int,
                   vsr: *mut ::std::os::raw::c_double,
                   ldvsr: *mut ::std::os::raw::c_int,
                   rconde: *mut ::std::os::raw::c_double,
                   rcondv: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *mut ::std::os::raw::c_int,
                   bwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dggev_(jobvl: *mut ::std::os::raw::c_char,
                  jobvr: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *mut ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *mut ::std::os::raw::c_int,
                  alphar: *mut ::std::os::raw::c_double,
                  alphai: *mut ::std::os::raw::c_double,
                  Rf_beta: *mut ::std::os::raw::c_double,
                  vl: *mut ::std::os::raw::c_double,
                  ldvl: *mut ::std::os::raw::c_int,
                  vr: *mut ::std::os::raw::c_double,
                  ldvr: *mut ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *mut ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dggevx_(balanc: *mut ::std::os::raw::c_char,
                   jobvl: *mut ::std::os::raw::c_char,
                   jobvr: *mut ::std::os::raw::c_char,
                   sense: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   alphar: *mut ::std::os::raw::c_double,
                   alphai: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   ldvl: *mut ::std::os::raw::c_int,
                   vr: *mut ::std::os::raw::c_double,
                   ldvr: *mut ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int,
                   lscale: *mut ::std::os::raw::c_double,
                   rscale: *mut ::std::os::raw::c_double,
                   abnrm: *mut ::std::os::raw::c_double,
                   bbnrm: *mut ::std::os::raw::c_double,
                   rconde: *mut ::std::os::raw::c_double,
                   rcondv: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   bwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgtts2_(itrans: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int,
                   dl: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   du: *mut ::std::os::raw::c_double,
                   du2: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int);
    pub fn dlagv2_(a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   alphar: *mut ::std::os::raw::c_double,
                   alphai: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   csl: *mut ::std::os::raw::c_double,
                   snl: *mut ::std::os::raw::c_double,
                   csr: *mut ::std::os::raw::c_double,
                   snr: *mut ::std::os::raw::c_double);
    pub fn dlals0_(icompq: *mut ::std::os::raw::c_int,
                   nl: *mut ::std::os::raw::c_int,
                   nr: *mut ::std::os::raw::c_int,
                   sqre: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   bx: *mut ::std::os::raw::c_double,
                   ldbx: *mut ::std::os::raw::c_int,
                   perm: *mut ::std::os::raw::c_int,
                   givptr: *mut ::std::os::raw::c_int,
                   givcol: *mut ::std::os::raw::c_int,
                   ldgcol: *mut ::std::os::raw::c_int,
                   givnum: *mut ::std::os::raw::c_double,
                   ldgnum: *mut ::std::os::raw::c_int,
                   poles: *mut ::std::os::raw::c_double,
                   difl: *mut ::std::os::raw::c_double,
                   difr: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   k: *mut ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlalsa_(icompq: *mut ::std::os::raw::c_int,
                   smlsiz: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   bx: *mut ::std::os::raw::c_double,
                   ldbx: *mut ::std::os::raw::c_int,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   k: *mut ::std::os::raw::c_int,
                   difl: *mut ::std::os::raw::c_double,
                   difr: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   poles: *mut ::std::os::raw::c_double,
                   givptr: *mut ::std::os::raw::c_int,
                   givcol: *mut ::std::os::raw::c_int,
                   ldgcol: *mut ::std::os::raw::c_int,
                   perm: *mut ::std::os::raw::c_int,
                   givnum: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlalsd_(uplo: *mut ::std::os::raw::c_char,
                   smlsiz: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   rank: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlamc1_(Rf_beta: *mut ::std::os::raw::c_int,
                   t: *mut ::std::os::raw::c_int,
                   rnd: *mut ::std::os::raw::c_int,
                   ieee1: *mut ::std::os::raw::c_int);
    pub fn dlamc2_(Rf_beta: *mut ::std::os::raw::c_int,
                   t: *mut ::std::os::raw::c_int,
                   rnd: *mut ::std::os::raw::c_int,
                   eps: *mut ::std::os::raw::c_double,
                   emin: *mut ::std::os::raw::c_int,
                   rmin: *mut ::std::os::raw::c_double,
                   emax: *mut ::std::os::raw::c_int,
                   rmax: *mut ::std::os::raw::c_double);
    pub fn dlamc3_(a: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn dlamc4_(emin: *mut ::std::os::raw::c_int,
                   start: *mut ::std::os::raw::c_double,
                   base: *mut ::std::os::raw::c_int);
    pub fn dlamc5_(Rf_beta: *mut ::std::os::raw::c_int,
                   p: *mut ::std::os::raw::c_int,
                   emin: *mut ::std::os::raw::c_int,
                   ieee: *mut ::std::os::raw::c_int,
                   emax: *mut ::std::os::raw::c_int,
                   rmax: *mut ::std::os::raw::c_double);
    pub fn dlaqp2_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   offset: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   vn1: *mut ::std::os::raw::c_double,
                   vn2: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double);
    pub fn dlaqps_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   offset: *mut ::std::os::raw::c_int,
                   nb: *mut ::std::os::raw::c_int,
                   kb: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   vn1: *mut ::std::os::raw::c_double,
                   vn2: *mut ::std::os::raw::c_double,
                   auxv: *mut ::std::os::raw::c_double,
                   f: *mut ::std::os::raw::c_double,
                   ldf: *mut ::std::os::raw::c_int);
    pub fn dlar1v_(n: *mut ::std::os::raw::c_int,
                   b1: *mut ::std::os::raw::c_int,
                   bn: *mut ::std::os::raw::c_int,
                   sigma: *mut ::std::os::raw::c_double,
                   d: *mut ::std::os::raw::c_double,
                   l: *mut ::std::os::raw::c_double,
                   ld: *mut ::std::os::raw::c_double,
                   lld: *mut ::std::os::raw::c_double,
                   gersch: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ztz: *mut ::std::os::raw::c_double,
                   mingma: *mut ::std::os::raw::c_double,
                   r: *mut ::std::os::raw::c_int,
                   isuppz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double);
    pub fn dlarrb_(n: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   l: *mut ::std::os::raw::c_double,
                   ld: *mut ::std::os::raw::c_double,
                   lld: *mut ::std::os::raw::c_double,
                   ifirst: *mut ::std::os::raw::c_int,
                   ilast: *mut ::std::os::raw::c_int,
                   sigma: *mut ::std::os::raw::c_double,
                   reltol: *mut ::std::os::raw::c_double,
                   w: *mut ::std::os::raw::c_double,
                   wgap: *mut ::std::os::raw::c_double,
                   werr: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlarre_(n: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   tol: *mut ::std::os::raw::c_double,
                   nsplit: *mut ::std::os::raw::c_int,
                   isplit: *mut ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   woff: *mut ::std::os::raw::c_double,
                   gersch: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlarrf_(n: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   l: *mut ::std::os::raw::c_double,
                   ld: *mut ::std::os::raw::c_double,
                   lld: *mut ::std::os::raw::c_double,
                   ifirst: *mut ::std::os::raw::c_int,
                   ilast: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   dplus: *mut ::std::os::raw::c_double,
                   lplus: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlarrv_(n: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   l: *mut ::std::os::raw::c_double,
                   isplit: *mut ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   iblock: *mut ::std::os::raw::c_int,
                   gersch: *mut ::std::os::raw::c_double,
                   tol: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   isuppz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlarz_(side: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int,
                  l: *mut ::std::os::raw::c_int,
                  v: *mut ::std::os::raw::c_double,
                  incv: *mut ::std::os::raw::c_int,
                  tau: *mut ::std::os::raw::c_double,
                  c: *mut ::std::os::raw::c_double,
                  ldc: *mut ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double);
    pub fn dlarzb_(side: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   direct: *mut ::std::os::raw::c_char,
                   storev: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   l: *mut ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   ldv: *mut ::std::os::raw::c_int,
                   t: *mut ::std::os::raw::c_double,
                   ldt: *mut ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   ldwork: *mut ::std::os::raw::c_int);
    pub fn dlarzt_(direct: *mut ::std::os::raw::c_char,
                   storev: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   ldv: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   t: *mut ::std::os::raw::c_double,
                   ldt: *mut ::std::os::raw::c_int);
    pub fn dlasd0_(n: *mut ::std::os::raw::c_int,
                   sqre: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *mut ::std::os::raw::c_int,
                   smlsiz: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasd1_(nl: *mut ::std::os::raw::c_int,
                   nr: *mut ::std::os::raw::c_int,
                   sqre: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   alpha: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *mut ::std::os::raw::c_int,
                   idxq: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasd2_(nl: *mut ::std::os::raw::c_int,
                   nr: *mut ::std::os::raw::c_int,
                   sqre: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   alpha: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *mut ::std::os::raw::c_int,
                   dsigma: *mut ::std::os::raw::c_double,
                   u2: *mut ::std::os::raw::c_double,
                   ldu2: *mut ::std::os::raw::c_int,
                   vt2: *mut ::std::os::raw::c_double,
                   ldvt2: *mut ::std::os::raw::c_int,
                   idxp: *mut ::std::os::raw::c_int,
                   idx: *mut ::std::os::raw::c_int,
                   idxc: *mut ::std::os::raw::c_int,
                   idxq: *mut ::std::os::raw::c_int,
                   coltyp: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasd3_(nl: *mut ::std::os::raw::c_int,
                   nr: *mut ::std::os::raw::c_int,
                   sqre: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *mut ::std::os::raw::c_int,
                   dsigma: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   u2: *mut ::std::os::raw::c_double,
                   ldu2: *mut ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *mut ::std::os::raw::c_int,
                   vt2: *mut ::std::os::raw::c_double,
                   ldvt2: *mut ::std::os::raw::c_int,
                   idxc: *mut ::std::os::raw::c_int,
                   ctot: *mut ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasd4_(n: *mut ::std::os::raw::c_int,
                   i: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   delta: *mut ::std::os::raw::c_double,
                   rho: *mut ::std::os::raw::c_double,
                   sigma: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasd5_(i: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   delta: *mut ::std::os::raw::c_double,
                   rho: *mut ::std::os::raw::c_double,
                   dsigma: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double);
    pub fn dlasd6_(icompq: *mut ::std::os::raw::c_int,
                   nl: *mut ::std::os::raw::c_int,
                   nr: *mut ::std::os::raw::c_int,
                   sqre: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   vf: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   alpha: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   idxq: *mut ::std::os::raw::c_int,
                   perm: *mut ::std::os::raw::c_int,
                   givptr: *mut ::std::os::raw::c_int,
                   givcol: *mut ::std::os::raw::c_int,
                   ldgcol: *mut ::std::os::raw::c_int,
                   givnum: *mut ::std::os::raw::c_double,
                   ldgnum: *mut ::std::os::raw::c_int,
                   poles: *mut ::std::os::raw::c_double,
                   difl: *mut ::std::os::raw::c_double,
                   difr: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   k: *mut ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasd7_(icompq: *mut ::std::os::raw::c_int,
                   nl: *mut ::std::os::raw::c_int,
                   nr: *mut ::std::os::raw::c_int,
                   sqre: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   zw: *mut ::std::os::raw::c_double,
                   vf: *mut ::std::os::raw::c_double,
                   vfw: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   vlw: *mut ::std::os::raw::c_double,
                   alpha: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   dsigma: *mut ::std::os::raw::c_double,
                   idx: *mut ::std::os::raw::c_int,
                   idxp: *mut ::std::os::raw::c_int,
                   idxq: *mut ::std::os::raw::c_int,
                   perm: *mut ::std::os::raw::c_int,
                   givptr: *mut ::std::os::raw::c_int,
                   givcol: *mut ::std::os::raw::c_int,
                   ldgcol: *mut ::std::os::raw::c_int,
                   givnum: *mut ::std::os::raw::c_double,
                   ldgnum: *mut ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasd8_(icompq: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   vf: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   difl: *mut ::std::os::raw::c_double,
                   difr: *mut ::std::os::raw::c_double,
                   lddifr: *mut ::std::os::raw::c_int,
                   dsigma: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasd9_(icompq: *mut ::std::os::raw::c_int,
                   ldu: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   vf: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   difl: *mut ::std::os::raw::c_double,
                   difr: *mut ::std::os::raw::c_double,
                   dsigma: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasda_(icompq: *mut ::std::os::raw::c_int,
                   smlsiz: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   sqre: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   vt: *mut ::std::os::raw::c_double,
                   k: *mut ::std::os::raw::c_int,
                   difl: *mut ::std::os::raw::c_double,
                   difr: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   poles: *mut ::std::os::raw::c_double,
                   givptr: *mut ::std::os::raw::c_int,
                   givcol: *mut ::std::os::raw::c_int,
                   ldgcol: *mut ::std::os::raw::c_int,
                   perm: *mut ::std::os::raw::c_int,
                   givnum: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   s: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasdq_(uplo: *mut ::std::os::raw::c_char,
                   sqre: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   ncvt: *mut ::std::os::raw::c_int,
                   nru: *mut ::std::os::raw::c_int,
                   ncc: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   vt: *mut ::std::os::raw::c_double,
                   ldvt: *mut ::std::os::raw::c_int,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlasdt_(n: *mut ::std::os::raw::c_int,
                   lvl: *mut ::std::os::raw::c_int,
                   nd: *mut ::std::os::raw::c_int,
                   inode: *mut ::std::os::raw::c_int,
                   ndiml: *mut ::std::os::raw::c_int,
                   ndimr: *mut ::std::os::raw::c_int,
                   msub: *mut ::std::os::raw::c_int);
    pub fn dlasq5_(i0: *mut ::std::os::raw::c_int,
                   n0: *mut ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   pp: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   dmin: *mut ::std::os::raw::c_double,
                   dmin1: *mut ::std::os::raw::c_double,
                   dmin2: *mut ::std::os::raw::c_double,
                   dn: *mut ::std::os::raw::c_double,
                   dnm1: *mut ::std::os::raw::c_double,
                   dnm2: *mut ::std::os::raw::c_double,
                   ieee: *mut ::std::os::raw::c_int);
    pub fn dlasq6_(i0: *mut ::std::os::raw::c_int,
                   n0: *mut ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   pp: *mut ::std::os::raw::c_int,
                   dmin: *mut ::std::os::raw::c_double,
                   dmin1: *mut ::std::os::raw::c_double,
                   dmin2: *mut ::std::os::raw::c_double,
                   dn: *mut ::std::os::raw::c_double,
                   dnm1: *mut ::std::os::raw::c_double,
                   dnm2: *mut ::std::os::raw::c_double);
    pub fn dlatdf_(ijob: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   rhs: *mut ::std::os::raw::c_double,
                   rdsum: *mut ::std::os::raw::c_double,
                   rdscal: *mut ::std::os::raw::c_double,
                   ipiv: *mut ::std::os::raw::c_int,
                   jpiv: *mut ::std::os::raw::c_int);
    pub fn dlatrz_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   l: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double);
    pub fn dormr3_(side: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   l: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dormrz_(side: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   l: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dptts2_(n: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int);
    pub fn dsbgvd_(jobz: *mut ::std::os::raw::c_char,
                   uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   ka: *mut ::std::os::raw::c_int,
                   kb: *mut ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *mut ::std::os::raw::c_int,
                   bb: *mut ::std::os::raw::c_double,
                   ldbb: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsbgvx_(jobz: *mut ::std::os::raw::c_char,
                   range: *mut ::std::os::raw::c_char,
                   uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   ka: *mut ::std::os::raw::c_int,
                   kb: *mut ::std::os::raw::c_int,
                   ab: *mut ::std::os::raw::c_double,
                   ldab: *mut ::std::os::raw::c_int,
                   bb: *mut ::std::os::raw::c_double,
                   ldbb: *mut ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *mut ::std::os::raw::c_int,
                   vl: *mut ::std::os::raw::c_double,
                   vu: *mut ::std::os::raw::c_double,
                   il: *mut ::std::os::raw::c_int,
                   iu: *mut ::std::os::raw::c_int,
                   abstol: *mut ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   ifail: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dspgvd_(itype: *mut ::std::os::raw::c_int,
                   jobz: *mut ::std::os::raw::c_char,
                   uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   bp: *mut ::std::os::raw::c_double,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dspgvx_(itype: *mut ::std::os::raw::c_int,
                   jobz: *mut ::std::os::raw::c_char,
                   range: *mut ::std::os::raw::c_char,
                   uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   ap: *mut ::std::os::raw::c_double,
                   bp: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   vu: *mut ::std::os::raw::c_double,
                   il: *mut ::std::os::raw::c_int,
                   iu: *mut ::std::os::raw::c_int,
                   abstol: *mut ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   ifail: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dstegr_(jobz: *mut ::std::os::raw::c_char,
                   range: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   vu: *mut ::std::os::raw::c_double,
                   il: *mut ::std::os::raw::c_int,
                   iu: *mut ::std::os::raw::c_int,
                   abstol: *mut ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   isuppz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dstevr_(jobz: *mut ::std::os::raw::c_char,
                   range: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double,
                   vl: *mut ::std::os::raw::c_double,
                   vu: *mut ::std::os::raw::c_double,
                   il: *mut ::std::os::raw::c_int,
                   iu: *mut ::std::os::raw::c_int,
                   abstol: *mut ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   isuppz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsygvd_(itype: *mut ::std::os::raw::c_int,
                   jobz: *mut ::std::os::raw::c_char,
                   uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dsygvx_(itype: *mut ::std::os::raw::c_int,
                   jobz: *mut ::std::os::raw::c_char,
                   range: *mut ::std::os::raw::c_char,
                   uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   vl: *mut ::std::os::raw::c_double,
                   vu: *mut ::std::os::raw::c_double,
                   il: *mut ::std::os::raw::c_int,
                   iu: *mut ::std::os::raw::c_int,
                   abstol: *mut ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   w: *mut ::std::os::raw::c_double,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   ifail: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtgex2_(wantq: *mut ::std::os::raw::c_int,
                   wantz: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *mut ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   j1: *mut ::std::os::raw::c_int,
                   n1: *mut ::std::os::raw::c_int,
                   n2: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtgexc_(wantq: *mut ::std::os::raw::c_int,
                   wantz: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *mut ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   ifst: *mut ::std::os::raw::c_int,
                   ilst: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtgsen_(ijob: *mut ::std::os::raw::c_int,
                   wantq: *mut ::std::os::raw::c_int,
                   wantz: *mut ::std::os::raw::c_int,
                   select: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   alphar: *mut ::std::os::raw::c_double,
                   alphai: *mut ::std::os::raw::c_double,
                   Rf_beta: *mut ::std::os::raw::c_double,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *mut ::std::os::raw::c_int,
                   z: *mut ::std::os::raw::c_double,
                   ldz: *mut ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   pl: *mut ::std::os::raw::c_double,
                   pr: *mut ::std::os::raw::c_double,
                   dif: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   liwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtgsna_(job: *mut ::std::os::raw::c_char,
                   howmny: *mut ::std::os::raw::c_char,
                   select: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   vl: *mut ::std::os::raw::c_double,
                   ldvl: *mut ::std::os::raw::c_int,
                   vr: *mut ::std::os::raw::c_double,
                   ldvr: *mut ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   dif: *mut ::std::os::raw::c_double,
                   mm: *mut ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtgsy2_(trans: *mut ::std::os::raw::c_char,
                   ijob: *mut ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   ldd: *mut ::std::os::raw::c_int,
                   e: *mut ::std::os::raw::c_double,
                   lde: *mut ::std::os::raw::c_int,
                   f: *mut ::std::os::raw::c_double,
                   ldf: *mut ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   rdsum: *mut ::std::os::raw::c_double,
                   rdscal: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   pq: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtgsyl_(trans: *mut ::std::os::raw::c_char,
                   ijob: *mut ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   c: *mut ::std::os::raw::c_double,
                   ldc: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   ldd: *mut ::std::os::raw::c_int,
                   e: *mut ::std::os::raw::c_double,
                   lde: *mut ::std::os::raw::c_int,
                   f: *mut ::std::os::raw::c_double,
                   ldf: *mut ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   dif: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtzrzf_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dpstrf_(uplo: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   piv: *mut ::std::os::raw::c_int,
                   rank: *mut ::std::os::raw::c_int,
                   tol: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn lsame_(ca: *mut ::std::os::raw::c_char,
                  cb: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn zbdsqr_(uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   ncvt: *mut ::std::os::raw::c_int,
                   nru: *mut ::std::os::raw::c_int,
                   ncc: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double, vt: *mut Rcomplex,
                   ldvt: *mut ::std::os::raw::c_int, u: *mut Rcomplex,
                   ldu: *mut ::std::os::raw::c_int, c: *mut Rcomplex,
                   ldc: *mut ::std::os::raw::c_int,
                   rwork: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgebak_(job: *mut ::std::os::raw::c_char,
                   side: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int, v: *mut Rcomplex,
                   ldv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgebal_(job: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgebd2_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double, tauq: *mut Rcomplex,
                   taup: *mut Rcomplex, work: *mut Rcomplex,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgebrd_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double, tauq: *mut Rcomplex,
                   taup: *mut Rcomplex, work: *mut Rcomplex,
                   lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgehd2_(n: *mut ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zgehrd_(n: *mut ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgelq2_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zgelqf_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgeqr2_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zgeqrf_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgetf2_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgetrf_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgetrs_(trans: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int, b: *mut Rcomplex,
                   ldb: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zhetd2_(uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double, tau: *mut Rcomplex,
                   info: *mut ::std::os::raw::c_int);
    pub fn zhetrd_(uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zhseqr_(job: *mut ::std::os::raw::c_char,
                   compz: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int, h: *mut Rcomplex,
                   ldh: *mut ::std::os::raw::c_int, w: *mut Rcomplex,
                   z: *mut Rcomplex, ldz: *mut ::std::os::raw::c_int,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zlabrd_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   nb: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double, tauq: *mut Rcomplex,
                   taup: *mut Rcomplex, x: *mut Rcomplex,
                   ldx: *mut ::std::os::raw::c_int, y: *mut Rcomplex,
                   ldy: *mut ::std::os::raw::c_int);
    pub fn zlacgv_(n: *mut ::std::os::raw::c_int, x: *mut Rcomplex,
                   incx: *mut ::std::os::raw::c_int);
    pub fn zlacpy_(uplo: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, b: *mut Rcomplex,
                   ldb: *mut ::std::os::raw::c_int);
    pub fn zlahqr_(wantt: *mut ::std::os::raw::c_int,
                   wantz: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int, h: *mut Rcomplex,
                   ldh: *mut ::std::os::raw::c_int, w: *mut Rcomplex,
                   iloz: *mut ::std::os::raw::c_int,
                   ihiz: *mut ::std::os::raw::c_int, z: *mut Rcomplex,
                   ldz: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zlange_(norm: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn zlanhe_(norm: *mut ::std::os::raw::c_char,
                   uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn zlanhs_(norm: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn zlaqp2_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   offset: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   vn1: *mut ::std::os::raw::c_double,
                   vn2: *mut ::std::os::raw::c_double, work: *mut Rcomplex);
    pub fn zlaqps_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   offset: *mut ::std::os::raw::c_int,
                   nb: *mut ::std::os::raw::c_int,
                   kb: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   vn1: *mut ::std::os::raw::c_double,
                   vn2: *mut ::std::os::raw::c_double, auxv: *mut Rcomplex,
                   f: *mut Rcomplex, ldf: *mut ::std::os::raw::c_int);
    pub fn zlarf_(side: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int, v: *mut Rcomplex,
                  incv: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                  c: *mut Rcomplex, ldc: *mut ::std::os::raw::c_int,
                  work: *mut Rcomplex);
    pub fn zlarfb_(side: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   direct: *mut ::std::os::raw::c_char,
                   storev: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, v: *mut Rcomplex,
                   ldv: *mut ::std::os::raw::c_int, t: *mut Rcomplex,
                   ldt: *mut ::std::os::raw::c_int, c: *mut Rcomplex,
                   ldc: *mut ::std::os::raw::c_int, work: *mut Rcomplex,
                   ldwork: *mut ::std::os::raw::c_int);
    pub fn zlarfg_(n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                   x: *mut Rcomplex, incx: *mut ::std::os::raw::c_int,
                   tau: *mut Rcomplex);
    pub fn zlarft_(direct: *mut ::std::os::raw::c_char,
                   storev: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, v: *mut Rcomplex,
                   ldv: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   t: *mut Rcomplex, ldt: *mut ::std::os::raw::c_int);
    pub fn zlarfx_(side: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, v: *mut Rcomplex,
                   tau: *mut Rcomplex, c: *mut Rcomplex,
                   ldc: *mut ::std::os::raw::c_int, work: *mut Rcomplex);
    pub fn zlascl_(_type: *mut ::std::os::raw::c_char,
                   kl: *mut ::std::os::raw::c_int,
                   ku: *mut ::std::os::raw::c_int,
                   cfrom: *mut ::std::os::raw::c_double,
                   cto: *mut ::std::os::raw::c_double,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zlaset_(uplo: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, alpha: *mut Rcomplex,
                   Rf_beta: *mut Rcomplex, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int);
    pub fn zlasr_(side: *mut ::std::os::raw::c_char,
                  pivot: *mut ::std::os::raw::c_char,
                  direct: *mut ::std::os::raw::c_char,
                  m: *mut ::std::os::raw::c_int,
                  n: *mut ::std::os::raw::c_int,
                  c: *mut ::std::os::raw::c_double,
                  s: *mut ::std::os::raw::c_double, a: *mut Rcomplex,
                  lda: *mut ::std::os::raw::c_int);
    pub fn zlassq_(n: *mut ::std::os::raw::c_int, x: *mut Rcomplex,
                   incx: *mut ::std::os::raw::c_int,
                   scale: *mut ::std::os::raw::c_double,
                   sumsq: *mut ::std::os::raw::c_double);
    pub fn zlaswp_(n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   k1: *mut ::std::os::raw::c_int,
                   k2: *mut ::std::os::raw::c_int,
                   ipiv: *mut ::std::os::raw::c_int,
                   incx: *mut ::std::os::raw::c_int);
    pub fn zlatrd_(uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   nb: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int,
                   e: *mut ::std::os::raw::c_double, tau: *mut Rcomplex,
                   w: *mut Rcomplex, ldw: *mut ::std::os::raw::c_int);
    pub fn zlatrs_(uplo: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   diag: *mut ::std::os::raw::c_char,
                   normin: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, x: *mut Rcomplex,
                   scale: *mut ::std::os::raw::c_double,
                   cnorm: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn zsteqr_(compz: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int,
                   d: *mut ::std::os::raw::c_double,
                   e: *mut ::std::os::raw::c_double, z: *mut Rcomplex,
                   ldz: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn ztrcon_(norm: *const ::std::os::raw::c_char,
                   uplo: *const ::std::os::raw::c_char,
                   diag: *const ::std::os::raw::c_char,
                   n: *const ::std::os::raw::c_int, a: *const Rcomplex,
                   lda: *const ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double, work: *mut Rcomplex,
                   rwork: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn ztrevc_(side: *mut ::std::os::raw::c_char,
                   howmny: *mut ::std::os::raw::c_char,
                   select: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int, t: *mut Rcomplex,
                   ldt: *mut ::std::os::raw::c_int, vl: *mut Rcomplex,
                   ldvl: *mut ::std::os::raw::c_int, vr: *mut Rcomplex,
                   ldvr: *mut ::std::os::raw::c_int,
                   mm: *mut ::std::os::raw::c_int,
                   m: *mut ::std::os::raw::c_int, work: *mut Rcomplex,
                   rwork: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn zung2l_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zung2r_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zungbr_(vect: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zunghr_(n: *mut ::std::os::raw::c_int,
                   ilo: *mut ::std::os::raw::c_int,
                   ihi: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zungl2_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zunglq_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zungql_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zungqr_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zungr2_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zungrq_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zungtr_(uplo: *mut ::std::os::raw::c_char,
                   n: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zunm2r_(side: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   c: *mut Rcomplex, ldc: *mut ::std::os::raw::c_int,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zunmbr_(vect: *mut ::std::os::raw::c_char,
                   side: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   c: *mut Rcomplex, ldc: *mut ::std::os::raw::c_int,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zunml2_(side: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   c: *mut Rcomplex, ldc: *mut ::std::os::raw::c_int,
                   work: *mut Rcomplex, info: *mut ::std::os::raw::c_int);
    pub fn zunmlq_(side: *mut ::std::os::raw::c_char,
                   trans: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   c: *mut Rcomplex, ldc: *mut ::std::os::raw::c_int,
                   work: *mut Rcomplex, lwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgesdd_(jobz: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *const ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double, u: *mut Rcomplex,
                   ldu: *const ::std::os::raw::c_int, vt: *mut Rcomplex,
                   ldvt: *const ::std::os::raw::c_int, work: *mut Rcomplex,
                   lwork: *const ::std::os::raw::c_int,
                   rwork: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn zgelsd_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, b: *mut Rcomplex,
                   ldb: *mut ::std::os::raw::c_int,
                   s: *mut ::std::os::raw::c_double,
                   rcond: *mut ::std::os::raw::c_double,
                   rank: *mut ::std::os::raw::c_int, work: *mut Rcomplex,
                   lwork: *mut ::std::os::raw::c_int,
                   rwork: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dgegv_(jobvl: *const ::std::os::raw::c_char,
                  jobvr: *const ::std::os::raw::c_char,
                  n: *const ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *const ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *const ::std::os::raw::c_int,
                  alphar: *mut ::std::os::raw::c_double,
                  alphai: *mut ::std::os::raw::c_double,
                  Rf_beta: *const ::std::os::raw::c_double,
                  vl: *mut ::std::os::raw::c_double,
                  ldvl: *const ::std::os::raw::c_int,
                  vr: *mut ::std::os::raw::c_double,
                  ldvr: *const ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *const ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dgeqpf_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dggsvd_(jobu: *const ::std::os::raw::c_char,
                   jobv: *const ::std::os::raw::c_char,
                   jobq: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   p: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   l: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *const ::std::os::raw::c_int,
                   alpha: *const ::std::os::raw::c_double,
                   Rf_beta: *const ::std::os::raw::c_double,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *const ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   ldv: *const ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   iwork: *mut ::std::os::raw::c_int,
                   info: *mut ::std::os::raw::c_int);
    pub fn dtzrqf_(m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dlahrd_(n: *const ::std::os::raw::c_int,
                   k: *const ::std::os::raw::c_int,
                   nb: *const ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *const ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   t: *mut ::std::os::raw::c_double,
                   ldt: *const ::std::os::raw::c_int,
                   y: *mut ::std::os::raw::c_double,
                   ldy: *const ::std::os::raw::c_int);
    pub fn dlatzm_(side: *const ::std::os::raw::c_char,
                   m: *const ::std::os::raw::c_int,
                   n: *const ::std::os::raw::c_int,
                   v: *const ::std::os::raw::c_double,
                   incv: *const ::std::os::raw::c_int,
                   tau: *const ::std::os::raw::c_double,
                   c1: *mut ::std::os::raw::c_double,
                   c2: *mut ::std::os::raw::c_double,
                   ldc: *const ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double);
    pub fn dgegs_(jobvsl: *mut ::std::os::raw::c_char,
                  jobvsr: *mut ::std::os::raw::c_char,
                  n: *mut ::std::os::raw::c_int,
                  a: *mut ::std::os::raw::c_double,
                  lda: *mut ::std::os::raw::c_int,
                  b: *mut ::std::os::raw::c_double,
                  ldb: *mut ::std::os::raw::c_int,
                  alphar: *mut ::std::os::raw::c_double,
                  alphai: *mut ::std::os::raw::c_double,
                  Rf_beta: *mut ::std::os::raw::c_double,
                  vsl: *mut ::std::os::raw::c_double,
                  ldvsl: *mut ::std::os::raw::c_int,
                  vsr: *mut ::std::os::raw::c_double,
                  ldvsr: *mut ::std::os::raw::c_int,
                  work: *mut ::std::os::raw::c_double,
                  lwork: *mut ::std::os::raw::c_int,
                  info: *mut ::std::os::raw::c_int);
    pub fn dgelsx_(m: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   nrhs: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   jpvt: *mut ::std::os::raw::c_int,
                   rcond: *mut ::std::os::raw::c_double,
                   rank: *mut ::std::os::raw::c_int,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn dggsvp_(jobu: *mut ::std::os::raw::c_char,
                   jobv: *mut ::std::os::raw::c_char,
                   jobq: *mut ::std::os::raw::c_char,
                   m: *mut ::std::os::raw::c_int,
                   p: *mut ::std::os::raw::c_int,
                   n: *mut ::std::os::raw::c_int,
                   a: *mut ::std::os::raw::c_double,
                   lda: *mut ::std::os::raw::c_int,
                   b: *mut ::std::os::raw::c_double,
                   ldb: *mut ::std::os::raw::c_int,
                   tola: *mut ::std::os::raw::c_double,
                   tolb: *mut ::std::os::raw::c_double,
                   k: *mut ::std::os::raw::c_int,
                   l: *mut ::std::os::raw::c_int,
                   u: *mut ::std::os::raw::c_double,
                   ldu: *mut ::std::os::raw::c_int,
                   v: *mut ::std::os::raw::c_double,
                   ldv: *mut ::std::os::raw::c_int,
                   q: *mut ::std::os::raw::c_double,
                   ldq: *mut ::std::os::raw::c_int,
                   iwork: *mut ::std::os::raw::c_int,
                   tau: *mut ::std::os::raw::c_double,
                   work: *mut ::std::os::raw::c_double,
                   info: *mut ::std::os::raw::c_int);
    pub fn zlahrd_(n: *mut ::std::os::raw::c_int,
                   k: *mut ::std::os::raw::c_int,
                   nb: *mut ::std::os::raw::c_int, a: *mut Rcomplex,
                   lda: *mut ::std::os::raw::c_int, tau: *mut Rcomplex,
                   t: *mut Rcomplex, ldt: *mut ::std::os::raw::c_int,
                   y: *mut Rcomplex, ldy: *mut ::std::os::raw::c_int);
    pub fn dpbfa_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_int);
    pub fn dpbsl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double);
    pub fn dpoco_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_int);
    pub fn dpodi_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_int);
    pub fn dpofa_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int);
    pub fn dposl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double);
    pub fn dqrdc_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_double,
                  arg8: *mut ::std::os::raw::c_int);
    pub fn dqrsl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_double,
                  arg7: *mut ::std::os::raw::c_double,
                  arg8: *mut ::std::os::raw::c_double,
                  arg9: *mut ::std::os::raw::c_double,
                  arg10: *mut ::std::os::raw::c_double,
                  arg11: *mut ::std::os::raw::c_double,
                  arg12: *mut ::std::os::raw::c_int,
                  arg13: *mut ::std::os::raw::c_int);
    pub fn dsvdc_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_double,
                  arg7: *mut ::std::os::raw::c_double,
                  arg8: *mut ::std::os::raw::c_int,
                  arg9: *mut ::std::os::raw::c_double,
                  arg10: *mut ::std::os::raw::c_int,
                  arg11: *mut ::std::os::raw::c_double,
                  arg12: *mut ::std::os::raw::c_int,
                  arg13: *mut ::std::os::raw::c_int);
    pub fn dtrco_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_int);
    pub fn dtrsl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_int,
                  arg6: *mut ::std::os::raw::c_int);
    pub fn dchdc_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_int,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_int);
    pub fn dchdd_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_int,
                  arg8: *mut ::std::os::raw::c_double,
                  arg9: *mut ::std::os::raw::c_double,
                  arg10: *mut ::std::os::raw::c_double,
                  arg11: *mut ::std::os::raw::c_double,
                  arg12: *mut ::std::os::raw::c_int);
    pub fn dchex_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_int,
                  arg6: *mut ::std::os::raw::c_double,
                  arg7: *mut ::std::os::raw::c_int,
                  arg8: *mut ::std::os::raw::c_int,
                  arg9: *mut ::std::os::raw::c_double,
                  arg10: *mut ::std::os::raw::c_double,
                  arg11: *mut ::std::os::raw::c_int);
    pub fn dchud_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_int,
                  arg8: *mut ::std::os::raw::c_double,
                  arg9: *mut ::std::os::raw::c_double,
                  arg10: *mut ::std::os::raw::c_double,
                  arg11: *mut ::std::os::raw::c_double);
    pub fn dgbco_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_int,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_double,
                  arg8: *mut ::std::os::raw::c_double);
    pub fn dgbdi_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_int,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_double);
    pub fn dgbfa_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_int,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_int);
    pub fn dgbsl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_int,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_double,
                  arg8: *mut ::std::os::raw::c_int);
    pub fn dgeco_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_double);
    pub fn dgedi_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_double,
                  arg7: *mut ::std::os::raw::c_int);
    pub fn dgefa_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_int);
    pub fn dgesl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_int);
    pub fn dgtsl_(arg1: *mut ::std::os::raw::c_int,
                  arg2: *mut ::std::os::raw::c_double,
                  arg3: *mut ::std::os::raw::c_double,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_int);
    pub fn dpbco_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_double,
                  arg7: *mut ::std::os::raw::c_int);
    pub fn dpbdi_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double);
    pub fn dppco_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_double,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_int);
    pub fn dppdi_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_double,
                  arg4: *mut ::std::os::raw::c_int);
    pub fn dppfa_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int);
    pub fn dppsl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_double);
    pub fn dptsl_(arg1: *mut ::std::os::raw::c_int,
                  arg2: *mut ::std::os::raw::c_double,
                  arg3: *mut ::std::os::raw::c_double,
                  arg4: *mut ::std::os::raw::c_double);
    pub fn dsico_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_double);
    pub fn dsidi_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double,
                  arg6: *mut ::std::os::raw::c_int,
                  arg7: *mut ::std::os::raw::c_double,
                  arg8: *mut ::std::os::raw::c_int);
    pub fn dsifa_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_int);
    pub fn dsisl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int,
                  arg5: *mut ::std::os::raw::c_double);
    pub fn dspco_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_double);
    pub fn dspdi_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double,
                  arg5: *mut ::std::os::raw::c_int,
                  arg6: *mut ::std::os::raw::c_double,
                  arg7: *mut ::std::os::raw::c_int);
    pub fn dspfa_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_int);
    pub fn dspsl_(arg1: *mut ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int,
                  arg3: *mut ::std::os::raw::c_int,
                  arg4: *mut ::std::os::raw::c_double);
    pub fn Rf_formatLogical(arg1: *mut ::std::os::raw::c_int, arg2: R_xlen_t,
                            arg3: *mut ::std::os::raw::c_int);
    pub fn Rf_formatInteger(arg1: *mut ::std::os::raw::c_int, arg2: R_xlen_t,
                            arg3: *mut ::std::os::raw::c_int);
    pub fn Rf_formatReal(arg1: *mut ::std::os::raw::c_double, arg2: R_xlen_t,
                         arg3: *mut ::std::os::raw::c_int,
                         arg4: *mut ::std::os::raw::c_int,
                         arg5: *mut ::std::os::raw::c_int,
                         arg6: ::std::os::raw::c_int);
    pub fn Rf_formatComplex(arg1: *mut Rcomplex, arg2: R_xlen_t,
                            arg3: *mut ::std::os::raw::c_int,
                            arg4: *mut ::std::os::raw::c_int,
                            arg5: *mut ::std::os::raw::c_int,
                            arg6: *mut ::std::os::raw::c_int,
                            arg7: *mut ::std::os::raw::c_int,
                            arg8: *mut ::std::os::raw::c_int,
                            arg9: ::std::os::raw::c_int);
    pub fn Rf_EncodeLogical(arg1: ::std::os::raw::c_int,
                            arg2: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn Rf_EncodeInteger(arg1: ::std::os::raw::c_int,
                            arg2: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn Rf_EncodeReal0(arg1: ::std::os::raw::c_double,
                          arg2: ::std::os::raw::c_int,
                          arg3: ::std::os::raw::c_int,
                          arg4: ::std::os::raw::c_int,
                          arg5: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn Rf_EncodeComplex(arg1: Rcomplex, arg2: ::std::os::raw::c_int,
                            arg3: ::std::os::raw::c_int,
                            arg4: ::std::os::raw::c_int,
                            arg5: ::std::os::raw::c_int,
                            arg6: ::std::os::raw::c_int,
                            arg7: ::std::os::raw::c_int,
                            arg8: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn Rf_EncodeReal(arg1: ::std::os::raw::c_double,
                         arg2: ::std::os::raw::c_int,
                         arg3: ::std::os::raw::c_int,
                         arg4: ::std::os::raw::c_int,
                         arg5: ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn Rf_IndexWidth(arg1: R_xlen_t) -> ::std::os::raw::c_int;
    pub fn Rf_VectorIndex(arg1: R_xlen_t, arg2: ::std::os::raw::c_int);
    pub fn Rf_printIntegerVector(arg1: *mut ::std::os::raw::c_int,
                                 arg2: R_xlen_t, arg3: ::std::os::raw::c_int);
    pub fn Rf_printRealVector(arg1: *mut ::std::os::raw::c_double,
                              arg2: R_xlen_t, arg3: ::std::os::raw::c_int);
    pub fn Rf_printComplexVector(arg1: *mut Rcomplex, arg2: R_xlen_t,
                                 arg3: ::std::os::raw::c_int);
    pub fn R_HTTPOpen(url: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn R_HTTPRead(ctx: *mut ::std::os::raw::c_void,
                      dest: *mut ::std::os::raw::c_char,
                      len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn R_HTTPClose(ctx: *mut ::std::os::raw::c_void);
    pub fn R_FTPOpen(url: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn R_FTPRead(ctx: *mut ::std::os::raw::c_void,
                     dest: *mut ::std::os::raw::c_char,
                     len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn R_FTPClose(ctx: *mut ::std::os::raw::c_void);
    pub fn RxmlNanoHTTPOpen(URL: *const ::std::os::raw::c_char,
                            contentType: *mut *mut ::std::os::raw::c_char,
                            headers: *const ::std::os::raw::c_char,
                            cacheOK: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn RxmlNanoHTTPRead(ctx: *mut ::std::os::raw::c_void,
                            dest: *mut ::std::os::raw::c_void,
                            len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RxmlNanoHTTPClose(ctx: *mut ::std::os::raw::c_void);
    pub fn RxmlNanoHTTPReturnCode(ctx: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn RxmlNanoHTTPStatusMsg(ctx: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn RxmlNanoHTTPContentLength(ctx: *mut ::std::os::raw::c_void)
     -> DLsize_t;
    pub fn RxmlNanoHTTPContentType(ctx: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn RxmlNanoHTTPTimeout(GA_delay: ::std::os::raw::c_int);
    pub fn RxmlNanoFTPOpen(URL: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn RxmlNanoFTPRead(ctx: *mut ::std::os::raw::c_void,
                           dest: *mut ::std::os::raw::c_void,
                           len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn RxmlNanoFTPClose(ctx: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn RxmlNanoFTPTimeout(GA_delay: ::std::os::raw::c_int);
    pub fn RxmlNanoFTPContentLength(ctx: *mut ::std::os::raw::c_void)
     -> DLsize_t;
    pub fn RxmlMessage(level: ::std::os::raw::c_int,
                       format: *const ::std::os::raw::c_char, ...);
    pub fn RxmlNanoFTPCleanup();
    pub fn RxmlNanoHTTPCleanup();
    pub fn Riconv_open(tocode: *const ::std::os::raw::c_char,
                       fromcode: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn Riconv(cd: *mut ::std::os::raw::c_void,
                  inbuf: *mut *const ::std::os::raw::c_char,
                  inbytesleft: *mut size_t,
                  outbuf: *mut *mut ::std::os::raw::c_char,
                  outbytesleft: *mut size_t) -> size_t;
    pub fn Riconv_close(cd: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn R_DefParams(arg1: Rstart);
    pub fn R_SetParams(arg1: Rstart);
    pub fn R_SetWin32(arg1: Rstart);
    pub fn R_SizeFromEnv(arg1: Rstart);
    pub fn R_common_command_line(arg1: *mut ::std::os::raw::c_int,
                                 arg2: *mut *mut ::std::os::raw::c_char,
                                 arg3: Rstart);
    pub fn R_set_command_line_arguments(argc: ::std::os::raw::c_int,
                                        argv:
                                            *mut *mut ::std::os::raw::c_char);
    pub fn S_Rf_divset(alg: ::std::os::raw::c_int,
                       iv: *mut ::std::os::raw::c_int,
                       liv: ::std::os::raw::c_int, lv: ::std::os::raw::c_int,
                       v: *mut ::std::os::raw::c_double);
    pub fn S_nlsb_iterate(b: *mut ::std::os::raw::c_double,
                          d: *mut ::std::os::raw::c_double,
                          dr: *mut ::std::os::raw::c_double,
                          iv: *mut ::std::os::raw::c_int,
                          liv: ::std::os::raw::c_int,
                          lv: ::std::os::raw::c_int, n: ::std::os::raw::c_int,
                          nd: ::std::os::raw::c_int, p: ::std::os::raw::c_int,
                          r: *mut ::std::os::raw::c_double,
                          rd: *mut ::std::os::raw::c_double,
                          v: *mut ::std::os::raw::c_double,
                          x: *mut ::std::os::raw::c_double);
    pub fn S_nlminb_iterate(b: *mut ::std::os::raw::c_double,
                            d: *mut ::std::os::raw::c_double,
                            fx: ::std::os::raw::c_double,
                            g: *mut ::std::os::raw::c_double,
                            h: *mut ::std::os::raw::c_double,
                            iv: *mut ::std::os::raw::c_int,
                            liv: ::std::os::raw::c_int,
                            lv: ::std::os::raw::c_int,
                            n: ::std::os::raw::c_int,
                            v: *mut ::std::os::raw::c_double,
                            x: *mut ::std::os::raw::c_double);
    pub fn R_CHAR(x: SEXP) -> *const ::std::os::raw::c_char;
    pub fn Rf_isNull(s: SEXP) -> Rboolean;
    pub fn Rf_isSymbol(s: SEXP) -> Rboolean;
    pub fn Rf_isLogical(s: SEXP) -> Rboolean;
    pub fn Rf_isReal(s: SEXP) -> Rboolean;
    pub fn Rf_isComplex(s: SEXP) -> Rboolean;
    pub fn Rf_isExpression(s: SEXP) -> Rboolean;
    pub fn Rf_isEnvironment(s: SEXP) -> Rboolean;
    pub fn Rf_isString(s: SEXP) -> Rboolean;
    pub fn Rf_isObject(s: SEXP) -> Rboolean;
}
